第四章 程序包结构与状态
==============================

本章将通过把使用 R 程序包获得的隐式知识转换为创建和修改它们所需的显式知识，来开始您的程序包开发之路。\
您将了解一个程序包可能处于的各种状态，以及程序包和库（library）之间的区别（还有您应该这些关心的原因）。


4.1 程序包状态
-----------------------

创建或修改程序包时，需要在它的“源代码”或“源文件”上进行。您可以以\ **源代码**\ 的形式与正在开发的程序包进行交互。\
当然，这并\ **不是**\ 你日常使用中最熟悉的程序包的形式。如果您了解 R 程序包可能处于的五种状态，那么程序包开发的工作流将变得更有意义：

- 源代码（source）
- 已绑定的（bundled）
- 二进制文件（binary）
- 已安装的（installed）
- 载入内存中的（in-memory）

您已经知道一些将程序包转入这些状态的函数。例如，``install.packages()`` 和 ``devtools::install_github()`` 将程序包从源代码（source）、已绑定的（bundled）或二进制文件（binary）状态转移到已安装（installed）状态。\
``library()`` 函数的作用是：将已安装的程序包加载到内存中，以便立即直接使用。


4.2 源代码程序包（Source Package）
---------------------------------------

一个\ **源代码**\ 程序包就是一个有着特定结构的文件目录。它包含特定的组件，例如一个 ``DESCRIPTION`` 文件、包含 ``.R`` 文件的 ``R/`` 目录等。本书余下的大部分章节都致力于详细说明这些组成部分。

如果您刚刚接触 R 程序包的开发，那么您可能从未见过源代码形式的程序包！您的计算机上可能甚至没有任何源程序包。以源代码形式查看程序包的最简单的方法是在 web 上浏览其代码。

许多 R 程序包是在 GitHub（或者 GitLab 以及类似的平台）上的公开库（open）中开发的。最好的方案是访问程序包的 CRAN 主页（landing page），例如：

- forcats: https://cran.r-project.org/package=forcats
- readxl: https://cran.r-project.org/package=readxl

并且其中一个网页链接（URLs）链接到公共托管服务上的存储库，例如：

- forcats: https://github.com/tidyverse/forcats
- readxl: https://github.com/tidyverse/readxl

即使程序包是在公共存储库中开发的，一些维护人员还是忘记了列出这个网页链接（URL），但是您仍然可以通过搜索来发现它。

即使包不是在公共平台上开发的，也可以在 \ `METACRAN <https://r-pkg.org/about>`__\  维护的非官方只读镜像中访问其源代码。示例：

- MASS: https://github.com/cran/MASS
- car: https://github.com/cran/car

请注意，这与探索程序包真正的开发环境不同，因为这个源代码及其演变过程只是对程序包的 CRAN 发行版本进行逆向工程的结果。\
这提供了对程序包及其开发历史的审查视图，但根据定义，源代码及其历史包含了所有程序包开发的必需的内容。\\ :sub:`意译，有待审查`\ 


4.3 已绑定的程序包（bundled package）
--------------------------------------------
