[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Packages (2e)",
    "section": "",
    "text": "欢迎！\n欢迎来到由 Hadley Wickham 和 Jennifer Bryan 等撰写的 R Package。 软件包（Packages）是可复用 R 代码的基本单位。 它们包含可复用的 R 函数、描述如何使用这些函数的文档以及示例数据。在本书中，你将学习如何将你的代码变成别人能够轻松下载和使用的软件包。刚开始编写软件包可能会让人感觉无从下手。因此我们从基础的内容开始，逐渐提升我们的开发水平。你的第一个版本是否完美并不重要，只要下一版本变得更完善就好。\n这是本书第二版的在线版本。"
  },
  {
    "objectID": "translator-preface.html#翻译说明",
    "href": "translator-preface.html#翻译说明",
    "title": "翻译与排版说明",
    "section": "翻译说明",
    "text": "翻译说明\n将英文技术书籍翻译为中文是个痛苦的过程，难以避免地会遇到一些没有公认翻译方式的英文词汇，或者是有公认的中文翻译词汇，但该词过于口语化，或者不能很好地反映英文词汇的意思。这些英文词汇以及它们在书中的对应中文词汇将在下方列出，欢迎大家批评。\n\n\n英文词汇\n中文翻译\n原因\n\n\n\npackage\n软件包，程序包，包\nr packages 是一组用来完成特定任务的程序，作为 R 的补充，符合 Software Package 的定义。“包”作为“软件包”的简称使用，在翻译中可能同时使用“软件包”和“包”两种称呼。\n\n\nconscious uncoupling\n有意识地解耦\n这个词最初用于描述相对友好的离婚1，这里使用“有意识地”而非“相对友好的”以突出该决定是经过慎重考虑和精心设计的。\n\n\nThe Whole Game\n整体流程\n软件包构建的一个 toy example，这里采用意译。\n\n\nThe package within\n软件包中的奥秘，包中奥秘\n直译过来是“软件包的内部”，感觉过于平淡，使用更吸引人的翻译。\n\n\ncompelling\n令人信服的\n\n(intro?) 中 “One compelling reason …” 应该想要表达开发 R 包能带来一个明显的优势，即方便分享自己的代码，这一优势具有强烈的推动力和说服力，让你想要开发 R 包。2\n\n\n\nsection\n章节，段落\n本书中的 section 多用于指代层级低于 “chapter” 的文段，有的是小节，也有的是一个段落。\n\n\nespouse\n宣扬，倡导\n直译为“支持”，从语句通顺的角度翻译为“宣扬”。\n\n\nVignette\n主题文档\n原意是“小插曲”、“短文”、“小品文”等，在 R 中 Vignette 是对整个包或包的某个功能主题进行概括性的介绍，这里突出其内容特性，强调其内容为贡功能“主题”，不强调其独立性和概括性。\n\n\nShunryu Suzuki\n铃木俊隆\n人名的中文翻译依据是 Wikipedia\n\n\n\ntoy package\n示例软件包\n直译过来是“玩具一般的软件包”，表示其各部分相比于真实软件包来说都较为简单，但包含了真实软件包的必要的部分，用于作为一个实例展示开发流程。\n\n\ncommit history\n提交历史\nGitHub 或 Git 中列出的 commit 历史。\n\n\npane, tab\n窗格，选项卡\n窗格是对应用程序窗口的一个分割，而选项卡是在窗格中展示的，可以切换不同的选项卡，窗格中将会展示对应的内容。\n\n\npull, push\n拉取，推送\nGit 远程仓库操作的常用翻译。"
  },
  {
    "objectID": "translator-preface.html#排版说明",
    "href": "translator-preface.html#排版说明",
    "title": "翻译与排版说明",
    "section": "排版说明",
    "text": "排版说明\n由于书中不可避免地会同时出现中文和英文，因此原书的排版并不完全适用于中文翻译版。为了在尊重原书的基础上使页面变得美观，约定如下排版要求：\n\n英文单词、标点符号和数字各具有 1 个前导空格和 1 个后导空格。例如：“软件包的名称是 bookdown 吗。”。\n\n英文单词、标点和数字的一侧为标点符号时，该侧无空格。例如：“使用 Leading and Trailing Spaces。”。\n\n\n需要展示并链接 URL 时，将其放入尖括号内 &lt;&gt;。\n小括号内的文本包含中文时，使用中文小括号 （）；如果全是英文文本，则使用英文小括号 ()，并各具有 1 个前导和后导空格。\n书中某些操作中带有选项、菜单等名称，在实际操作时不具有中文翻译，此时列出该单词的中文翻译，后跟括号，括号内展示原英文单词。中文翻译便于读者查询相关资料，原英文单词便于按图索骥地进行操作。"
  },
  {
    "objectID": "translator-preface.html#翻译进度",
    "href": "translator-preface.html#翻译进度",
    "title": "翻译与排版说明",
    "section": "翻译进度",
    "text": "翻译进度\n常言道，人生未填之坑十之八九。笔者学业繁忙，只能利用空闲时间翻译本书。因此在这里记录一下翻译进度，欢迎加入本项目提交 Pull Request。\n符号说明：\n\n✅：已完成\n⚙️：进行中\n📄：计划中\n\n\n\n章节\n是否翻译\n是否润色\n\n\n\nwelcome\n✅\n✅\n\n\nPreface\n✅\n✅\n\n\nIntroduction\n✅\n⚙️\n\n\nThe Whole Game\n⚙️\n\n\n\nSystem setup\n\n\n\n\nPackage structure and state\n\n\n\n\nFundamental development workflows\n\n\n\n\nThe package within\n\n\n\n\nR Code\n\n\n\n\nData\n\n\n\n\nOther components\n\n\n\n\nDESCRIPTION\n\n\n\n\nDependencies: Mindset and Background\n\n\n\n\nDependencies: In Practice\n\n\n\n\nLicensing\n\n\n\n\nTesting basics\n\n\n\n\nDesigning your test suite\n\n\n\n\nAdvanced testing techniques\n\n\n\n\nFunction documentation\n\n\n\n\nVignettes\n\n\n\n\nOther markdown files\n\n\n\n\nWebsite\n\n\n\n\nSoftware development practices\n\n\n\n\nLifecycle\n\n\n\n\nReleasing to CRAN\n\n\n\n\nReferences\n\n\n\n\nAppendix A R CND check"
  },
  {
    "objectID": "translator-preface.html#footnotes",
    "href": "translator-preface.html#footnotes",
    "title": "翻译与排版说明",
    "section": "",
    "text": "见 https://en.wikipedia.org/wiki/Conscious_uncoupling↩︎\n译者注：需要再想清楚作者想表达的意思，然后润色↩︎"
  },
  {
    "objectID": "preface.html#致谢",
    "href": "preface.html#致谢",
    "title": "前言",
    "section": "致谢",
    "text": "致谢\n自从 R Packages 第一版发布以来，支持本书描述的工作流的软件包已经有了广泛的发展。 最初的三个软件包 devtools, roxygen2 和 testthat 已经扩展到由 devtools “有意识地解耦”所创建的许多软件包，就如 ?sec-setup-usage 所描述的那样。 由于它们具有共同的根源 devtools，因此这些软件包多数源自 Hadley Wickham (HW)。 还有许多其他重要的贡献者，其中许多人现在是软件包的维护者：\n\ndevtools: HW, Winston Chang, Jim Hester (maintainer, &gt;= v1.13.5), Jennifer Bryan (maintainer &gt;= v2.4.3)\nusethis: HW, Jennifer Bryan (maintainer &gt;= v1.5.0), Malcolm Barrett\nroxygen2: HW (maintainer), Peter Danenburg, Manuel Eugster\n\ntestthat: HW (maintainer)\ndesc: Gábor Csárdi (maintainer), Kirill Müller, Jim Hester\n\npkgbuild: HW, Jim Hester, Gábor Csárdi (maintainer &gt;= v1.2.1)\npkgload: HW, Jim Hester, Winston Chang, Lionel Henry (maintainer &gt;= v1.2.4)\nrcmdcheck: Gábor Csárdi (maintainer)\nremotes: HW, Jim Hester, Gábor Csárdi (maintainer), Winston Chang, Martin Morgan, Dan Tenenbaum\n\nrevdepcheck: HW, Gábor Csárdi (maintainer)\nsessioninfo: HW, Gábor Csárdi (maintainer), Winston Chang, Robert Flight, Kirill Müller, Jim Hester\n\n\n这本书是公开编写和修订的，它是社区努力的成果：许多人阅读草稿、修正错别字 、提出改进意见以及贡献内容。 没有这些贡献者，这本书不会像现在这样好，我们对他们的帮助深表感谢。 我们要感谢我们在 Posit 的同事，特别是 tidyverse 团队，他们一直很乐意讨论软件包的开发实践。 另外，我们出色的技术审查员团队提出的建议也极大地改进了本书：Malcolm Barrett, Laura DeCicco, Zhian Kamvar, Tom Mock 和 Maëlle Salmon。\n#&gt; Warning: package 'tidyverse' was built under R version 4.2.3\n#&gt; Warning: package 'ggplot2' was built under R version 4.2.3\n#&gt; Warning: package 'tibble' was built under R version 4.2.3\n#&gt; Warning: package 'tidyr' was built under R version 4.2.3\n#&gt; Warning: package 'readr' was built under R version 4.2.3\n#&gt; Warning: package 'purrr' was built under R version 4.2.3\n#&gt; Warning: package 'dplyr' was built under R version 4.2.3\n#&gt; Warning: package 'stringr' was built under R version 4.2.3\n#&gt; Warning: package 'forcats' was built under R version 4.2.3\n#&gt; Warning: package 'lubridate' was built under R version 4.2.3\n#&gt; ── Attaching core tidyverse packages ──────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n#&gt; Rows: 410 Columns: 3\n#&gt; ── Column specification ────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr (3): user, name, maybe_name\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nThanks to all contributors the the first and second editions (in alphabetical order by GitHub username):\n@aaelony, @aaronwolen (Aaron Wolen), @ablejec (Andrej Blejec), @adamcduncan (Adam Duncan), @adessy, @adrtod (Adrien Todeschini), @aghaynes (Alan Haynes), @agrueneberg (Alexander Grueneberg), @alejandrohagan (Alejandro Hagan), @alesantuz (Ale Santuz), @alexandrehsd (Alexandre Henrique), @alexholcombe (Alex O. Holcombe), @alexpghayes (alex hayes), @alforj (Justin Alford), @almartin82 (Andrew Martin), @aluxh (Alex Ho), @AmelZulji, @andreaphsz (Andrea Cantieni), @andrewdolman (Andrew Dolman), @andrewpbray (Andrew Bray), @AndrewsOR (John Andrews), @andycraig (Andrew Craig), @angela-li (Angela Li), @anjalisilva (Anjali Silva), @apomatix (Brad Friedman), @apreshill (Alison Presmanes Hill), @arashHaratian (Arash), @arilamstein (Ari Lamstein), @arneschillert (Arne Schillert), @arni-magnusson (Arni Magnusson), @asadow (Adam Sadowski), @ateucher (Andy Teucher), @avisser (Andy Visser), @ayormark (Adam Yormark), @azzaea (Azza Ahmed), @batpigandme (Mara Averick), @bclipp (Brian L), @beevabeeva, @behrman (Bill Behrman), @benmarwick (Ben Marwick), @BernhardKonrad (Bernhard Konrad), @bgreenwell (Brandon Greenwell), @Bisaloo (Hugo Gruson), @bklamer (Brett Klamer), @bm5tev3, @bms63 (Ben Straub), @bpbond (Ben Bond-Lamberty), @bquast (Bastiaan Quast), @Br-Johnson (Brett Johnson), @brews (Brewster Malevich), @brianrice2 (Brian Rice), @brry (Berry Boessenkool), @btruel, @calligross (Calli), @carldotac (Carl Lieberman), @carloscinelli (Carlos Cinelli), @CDCookJr, @cderv (Christophe Dervieux), @chambm (Matt Chambers), @charliejhadley (Charlie Joey Hadley), @chezou (Aki Ariga), @chsafouane (Safouane Chergui), @clente (Caio Lente), @cmarmstrong, @cooknl (CAPN), @CorradoLanera (Corrado Lanera), @craigcitro (Craig Citro), @crtahlin (Crt Ahlin), @daattali (Dean Attali), @danhalligan (Dan Halligan), @daroczig (Gergely Daróczi), @datarttu (Arttu Kosonen), @davidkane9 (David Kane), @DavisVaughan (Davis Vaughan), @deanbodenham, @dfalbel (Daniel Falbel), @dgrtwo (David Robinson), @dholstius (David Holstius), @DickStartz, @dkgaraujo (Douglas K. G. Araujo), @dlukes (David Lukes), @DOH-PXC5303 (Philip Crain), @dongzhuoer (Zhuoer Dong), @DougManuel (Doug Manuel), @dpprdan (Daniel Possenriede), @dracodoc (dracodoc), @drag05 (Dragos Bandur), @drvinceknight (Vince Knight), @dryzliang, @dyavorsky (Dan Yavorsky), @e-pet, @earino (E. Ariño de la Rubia), @echelleburns, @eeholmes (Eli Holmes), @eipi10 (Joel Schwartz), @ekbrown (Earl Brown), @EllaKaye (Ella Kaye), @EmilHvitfeldt (Emil Hvitfeldt), @eogoodwin, @erictleung (Eric Leung), @erikerhardt (Erik Erhardt), @espinielli (Enrico Spinielli), @ewan (Ewan Dunbar), @fbertran (Frederic Bertrand), @federicomarini (Federico Marini), @fenguoerbian (Chao Cheng), @fkohrt (Florian Kohrt), @florisvdh (Floris Vanderhaeghe), @floswald (Florian Oswald), @franrodalg (Francisco Rodríguez-Algarra), @franticspider (Simon Hickinbotham), @frycast (Daniel Vidali Fryer), @fsavje (Fredrik Sävje), @gajusmiknaitis, @gcpoole (Geoffrey Poole), @geanders (Brooke Anderson), @georoen (Jee Roen), @GerardTromp (Gerard Tromp), @GillesSanMartin (Gilles San Martin), @gmaubach (Georg Maubach), @gonzalezgouveia (Rafael Gonzalez Gouveia), @gregmacfarlane (Greg Macfarlane), @gregrs-uk (Greg), @grst (Gregor Sturm), @gsrohde (Scott Rohde), @guru809, @gustavdelius (Gustav W Delius), @haibin (Liu Haibin), @hanneoberman (Hanne Oberman), @harrismcgehee (Harris McGehee), @havenl (Haven Liu), @hcyvan (程一航), @hdraisma (Harmen), @hedderik (Hedderik van Rijn), @heists ((ꐦ°᷄д°)ა), @helske (Jouni Helske), @henningte (Henning Teickner), @HenrikBengtsson (Henrik Bengtsson), @heogden (Helen Ogden), @hfrick (Hannah Frick), @Holzhauer (Sascha Holzhauer), @howardbaek (Howard Baek), @howbuildingsfail (How Buildings Fail), @hq9000 (Sergey Grechin), @hrbrmstr (boB Rudis), @iangow (Ian Gow), @iargent, @idmn (Iaroslav Domin), @ijlyttle (Ian Lyttle), @imchoyoung (Choyoung Im), @InfiniteCuriosity (Russ Conte), @ionut-stefanb (Ionut Stefan-Birdea), @Ironholds (Os Keyes), @ismayc (Chester Ismay), @isomorphisms (i), @jackwasey (Jack Wasey), @jacobbien (Jacob Bien), @jadeynryan (Jadey Ryan), @jameelalsalam (Jameel Alsalam), @jameslairdsmith (James Laird-Smith), @janzzon (Stefan Jansson), @JayCeBB, @jcainey (Joe Cainey), @jdblischak (John Blischak), @jedwards24 (James Edwards), @jemus42 (Lukas Burk), @jenniferthompson (Jennifer Thompson), @jeremycg (Jeremy Gray), @jgarthur (Joey Arthur), @jimhester (Jim Hester), @jimr1603 (James Riley), @jjesusfilho (José de Jesus Filho), @jkeirstead (James Keirstead), @jmarca (James Marca), @jmarshallnz (Jonathan Marshall), @joethorley (Joe Thorley), @johnbaums (John), @jolars (Johan Larsson), @jonthegeek (Jon Harmon), @jowalski (John Kowalski), @jpinelo (Joao Pinelo Silva), @jrdnbradford (Jordan), @jthomasmock (Tom Mock), @julian-urbano (Julián Urbano), @jwpestrak, @jzadra (Jonathan Zadra), @jzhaoo (Joanna Zhao), @kaetschap (Sonja), @karthik (Karthik Ram), @KasperThystrup (Kasper Thystrup Karstensen), @KatherineCox, @katrinleinweber (Katrin Leinweber), @kbroman (Karl Broman), @kekecib (Ibrahim Kekec), @KellenBrosnahan, @kendonB (Kendon Bell), @kevinushey (Kevin Ushey), @kikapp (Kristopher Kapphahn), @KirkDSL, @KJByron (Karen J. Byron), @klmr (Konrad Rudolph), @KoderKow (Kyle Harris), @kokbent (Ben Toh), @kongdd (Dongdong Kong), @krlmlr (Kirill Müller), @kwenzig (Knut Wenzig), @kwstat (Kevin Wright), @kylelundstedt (Kyle G. Lundstedt), @lancelote (Pavel Karateev), @lbergelson (Louis Bergelson), @LechMadeyski (Lech Madeyski), @Lenostatos (Leon), @lindbrook, @lionel- (Lionel Henry), @LluisRamon (Lluís Ramon), @lorenzwalthert (Lorenz Walthert), @lwjohnst86 (Luke W Johnston), @maelle (Maëlle Salmon), @maiermarco, @maislind (David M), @majr-red (Matthew Roberts), @malcolmbarrett (Malcolm Barrett), @malexan (Alexander Matrunich), @manuelreif (Manuel Reif), @MarceloRTonon (Marcelo Tonon), @mariacuellar (Maria Cuellar), @markdly (Mark Dulhunty), @Marlin-Na (Marlin), @martin-mfg, @matanhakim (Matan Hakim), @matdoering, @matinang (Matina Angelopoulou), @mattflor (Matthias Flor), @maurolepore (Mauro Lepore), @maxheld83 (Max Held), @mayankvanani (Mayank Vanani), @mbjones (Matt Jones), @mccarthy-m-g (Michael McCarthy), @mdequeljoe (Matthew de Queljoe), @mdsumner (Michael Sumner), @michaelboerman (Michael Boerman), @MichaelChirico (Michael Chirico), @michaelmikebuckley (Michael Buckley), @michaelweylandt (Michael Weylandt), @miguelmorin, @MikeJohnPage, @mikelnrd (Michael Leonard), @mikelove (Mike Love), @mikemc (Michael McLaren), @MilesMcBain (Miles McBain), @mjkanji (Muhammad Jarir Kanji), @mkuehn10 (Michael Kuehn), @mllg (Michel Lang), @mohamed-180 (Mohamed El-Desokey), @moodymudskipper (Antoine Fabri), @Moohan (James McMahon), @MrAE (Jesse Leigh Patsolic), @mrcaseb, @ms609 (Martin R. Smith), @mskyttner (Markus Skyttner), @MWilson92 (Matthew Wilson), @myoung3, @nachti (Gerhard Nachtmann), @nanxstats (Nan Xiao), @nareal (Nelson Areal), @nattalides, @ncarchedi (Nick Carchedi), @ndphillips (Nathaniel Phillips), @nick-youngblut (Nick Youngblut), @njtierney (Nicholas Tierney), @nsheff (Nathan Sheffield), @osorensen (Øystein Sørensen), @PabRod (Pablo Rodríguez-Sánchez), @paternogbc (Gustavo Brant Paterno), @paulrougieux (Paul Rougieux), @pdwaggoner (Philip Waggoner), @pearsonca (Carl A. B. Pearson), @perryjer1 (Jeremiah), @petermeissner (Peter Meissner), @petersonR (Ryan Peterson), @petzi53 (Peter Baumgartner), @PhilipPallmann (Philip Pallmann), @philliplab (Phillip Labuschagne), @phonixor (Gerrit-Jan Schutten), @pkimes (Patrick Kimes), @pnovoa (Pavel Novoa), @ppanko (Pavel Panko), @pritesh-shrivastava (Pritesh Shrivastava), @PrzeChoj (PrzeChoj), @PursuitOfDataScience (Y. Yu), @pwaeckerle, @raerickson (Richard Erickson), @ramiromagno (Ramiro Magno), @ras44, @rbirkelbach (Robert Birkelbach), @rcorty (Robert W. Corty), @rdiaz02 (Ramon Diaz-Uriarte), @realAkhmed (Akhmed Umyarov), @reikookamoto (Reiko Okamoto), @renkun-ken (Kun Ren), @retowyss (Reto Wyss), @revodavid (David Smith), @rgknight (Ryan Knight), @rhgof (Richard), @rmar073, @rmflight (Robert M Flight), @rmsharp (R. Mark Sharp), @rnuske (Robert Nuske), @robertzk (Robert Krzyzanowski), @Robinlovelace (Robin Lovelace), @robiRagan (Robi Ragan), @Robsteranium (Robin Gower), @romanzenka (Roman Zenka), @royfrancis (Roy Francis), @rpruim (Randall Pruim), @rrunner, @rsangole (Rahul), @ryanatanner (Ryan), @salim-b (Salim B), @SamEdwardes (Sam Edwardes), @SangdonLim (Sangdon Lim), @sathishsrinivasank (Sathish), @sbgraves237, @schifferl (Lucas Schiffer), @scw (Shaun Walbridge), @sdarodrigues (Sabrina Rodrigues), @sebffischer (Sebastian Fischer), @serghiou (Stylianos Serghiou), @setoyama60jp, @sfirke (Sam Firke), @shannonpileggi (Shannon Pileggi), @Shelmith-Kariuki (Shel), @SheridanLGrant (Sheridan Grant), @shntnu (Shantanu Singh), @sibusiso16 (S’busiso Mkhondwane), @simdadim (Simen Buodd), @SimonPBiggs (SPB), @simonthelwall (Simon Thelwall), @SimonYansenZhao (Simon He Zhao), @singmann (Henrik Singmann), @Skenvy (Nathan Levett), @Smudgerville (Richard M. Smith), @sn248 (Satyaprakash Nayak), @sowla (Praer (Suthira) Owlarn), @srushe (Stephen Rushe), @statnmap (Sébastien Rochette), @steenharsted (Steen Harsted), @stefaneng (Stefan Eng), @stefanherzog (Stefan Herzog), @stephen-frank (Stephen Frank), @stephenll (Stephen Lienhard), @stephenturner (Stephen Turner), @stevenprimeaux (Steven Primeaux), @stevensbr, @stewid (Stefan Widgren), @sunbeomk (Sunbeom Kwon), @superdesolator (Po Su), @syclik (Daniel Lee), @symbolrush (Adrian Stämpfli-Schmid), @taekyunk (Taekyun Kim), @talgalili (Tal Galili), @tanho63 (Tan Ho), @tbrugz (Telmo Brugnara), @thisisnic (Nic Crane), @TimHesterberg (Tim Hesterberg), @titaniumtroop (Nathan), @tjebo, @tklebel (Thomas Klebel), @tmstauss (Tanner Stauss), @tonybreyal (Tony Breyal), @tonyfischetti (Tony Fischetti), @TonyLadson (Tony Ladson), @trickytank (Rick Tankard), @TroyVan, @uribo (Shinya Uryu), @urmils, @valeonte, @vgonzenbach (Virgilio Gonzenbach), @vladpetyuk (Vlad Petyuk), @vnijs (Vincent Nijs), @vspinu (Vitalie Spinu), @wcarlsen (Willi Carlsen), @wch (Winston Chang), @wenjie2wang (Wenjie Wang), @werkstattcodes, @wiaidp, @wibeasley (Will Beasley), @wilkinson (Sean Wilkinson), @williamlief (Lief Esbenshade), @winterschlaefer (Christof Winter), @wlamnz (William Lam), @wrathematics (Drew Schmidt), @XiangyunHuang (Xiangyun Huang), @xiaochi-liu (Xiaochi), @XiaoqiLu (Xiaoqi Lu), @xiaosongz (Xiaosong Zhang), @yihui (Yihui Xie), @ynsec37, @yonicd, @ysdgroot, @yui-knk (Yuichiro Kaneko), @Zedseayou (Calum You), @zeehio (Sergio Oller), @zekiakyol (Zeki Akyol), @zenggyu (Guangyu Zeng), @zhaoy, @zhilongjia (Zhilong), @zhixunwang, @zkamvar (Zhian N. Kamvar), @zouter (Wouter Saelens)."
  },
  {
    "objectID": "preface.html#内容约定",
    "href": "preface.html#内容约定",
    "title": "前言",
    "section": "内容约定",
    "text": "内容约定\n在本书中，我们用 fun() 来指代函数，用 var 来指代变量和函数参数，用 path/ 来指代路径。\n较大的代码块同时包含输入和输出。 代码输出的内容都被注释了，因此如果你有本书的电子版本，例如 https://r-pkgs.org，就可以轻松地将示例代码复制和粘贴到 R 中。 输出内容的注释看起来像 #&gt;，这样可以和普通注释区别开来。"
  },
  {
    "objectID": "preface.html#colophon",
    "href": "preface.html#colophon",
    "title": "前言",
    "section": "Colophon1\n",
    "text": "Colophon1\n\n本书是在 RStudio 中使用 Quarto 编写的。 本书 官方网站 由 Netlify 托管，并使用 GitHub actions 在每次提交后自动更新。 完整的源代码可以在 GitHub 上找到\n本书的当前版本是在如下环境下构建的：\n\nlibrary(devtools)\n#&gt; Warning: package 'devtools' was built under R version 4.2.2\n#&gt; Loading required package: usethis\n#&gt; Warning: package 'usethis' was built under R version 4.2.2\nlibrary(roxygen2)\n#&gt; Warning: package 'roxygen2' was built under R version 4.2.3\nlibrary(testthat)\n#&gt; Warning: package 'testthat' was built under R version 4.2.2\n#&gt; \n#&gt; Attaching package: 'testthat'\n#&gt; The following object is masked from 'package:devtools':\n#&gt; \n#&gt;     test_file\n#&gt; The following object is masked from 'package:dplyr':\n#&gt; \n#&gt;     matches\n#&gt; The following object is masked from 'package:purrr':\n#&gt; \n#&gt;     is_null\n#&gt; The following objects are masked from 'package:readr':\n#&gt; \n#&gt;     edition_get, local_edition\n#&gt; The following object is masked from 'package:tidyr':\n#&gt; \n#&gt;     matches\ndevtools::session_info()\n#&gt; ─ Session info ───────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.2.1 (2022-06-23 ucrt)\n#&gt;  os       Windows 10 x64 (build 22000)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Chinese (Simplified)_China.utf8\n#&gt;  ctype    Chinese (Simplified)_China.utf8\n#&gt;  tz       Asia/Taipei\n#&gt;  date     2023-06-09\n#&gt;  pandoc   3.1 @ D:/Program Files/Pandoc/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ───────────────────────────────────────────────────────\n#&gt;  package     * version date (UTC) lib source\n#&gt;  bit           4.0.5   2022-11-15 [1] CRAN (R 4.2.3)\n#&gt;  bit64         4.0.5   2020-08-30 [1] CRAN (R 4.2.1)\n#&gt;  brio          1.1.3   2021-11-30 [1] CRAN (R 4.2.2)\n#&gt;  cachem        1.0.6   2021-08-19 [1] CRAN (R 4.2.1)\n#&gt;  callr         3.7.3   2022-11-02 [1] CRAN (R 4.2.3)\n#&gt;  cli           3.6.1   2023-03-23 [1] CRAN (R 4.2.3)\n#&gt;  colorspace    2.1-0   2023-01-23 [1] CRAN (R 4.2.3)\n#&gt;  crayon        1.5.2   2022-09-29 [1] CRAN (R 4.2.3)\n#&gt;  devtools    * 2.4.5   2022-10-11 [1] CRAN (R 4.2.2)\n#&gt;  digest        0.6.29  2021-12-01 [1] CRAN (R 4.2.1)\n#&gt;  dplyr       * 1.1.2   2023-04-20 [1] CRAN (R 4.2.3)\n#&gt;  ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.2.1)\n#&gt;  evaluate      0.21    2023-05-05 [1] CRAN (R 4.2.1)\n#&gt;  fansi         1.0.3   2022-03-24 [1] CRAN (R 4.2.1)\n#&gt;  fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.1)\n#&gt;  forcats     * 1.0.0   2023-01-29 [1] CRAN (R 4.2.3)\n#&gt;  fs            1.6.2   2023-04-25 [1] CRAN (R 4.2.3)\n#&gt;  generics      0.1.3   2022-07-05 [1] CRAN (R 4.2.1)\n#&gt;  ggplot2     * 3.4.2   2023-04-03 [1] CRAN (R 4.2.3)\n#&gt;  glue          1.6.2   2022-02-24 [1] CRAN (R 4.2.1)\n#&gt;  gtable        0.3.3   2023-03-21 [1] CRAN (R 4.2.3)\n#&gt;  hms           1.1.3   2023-03-21 [1] CRAN (R 4.2.3)\n#&gt;  htmltools     0.5.5   2023-03-23 [1] CRAN (R 4.2.3)\n#&gt;  htmlwidgets   1.6.2   2023-03-17 [1] CRAN (R 4.2.3)\n#&gt;  httpuv        1.6.6   2022-09-08 [1] CRAN (R 4.2.1)\n#&gt;  jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.2.3)\n#&gt;  knitr         1.42    2023-01-25 [1] CRAN (R 4.2.3)\n#&gt;  later         1.3.0   2021-08-18 [1] CRAN (R 4.2.1)\n#&gt;  lifecycle     1.0.3   2022-10-07 [1] CRAN (R 4.2.2)\n#&gt;  lubridate   * 1.9.2   2023-02-10 [1] CRAN (R 4.2.3)\n#&gt;  magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.2.1)\n#&gt;  memoise       2.0.1   2021-11-26 [1] CRAN (R 4.2.1)\n#&gt;  mime          0.12    2021-09-28 [1] CRAN (R 4.2.0)\n#&gt;  miniUI        0.1.1.1 2018-05-18 [1] CRAN (R 4.2.1)\n#&gt;  munsell       0.5.0   2018-06-12 [1] CRAN (R 4.2.1)\n#&gt;  pillar        1.9.0   2023-03-22 [1] CRAN (R 4.2.3)\n#&gt;  pkgbuild      1.4.0   2022-11-27 [1] CRAN (R 4.2.3)\n#&gt;  pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.2.1)\n#&gt;  pkgload       1.3.2   2022-11-16 [1] CRAN (R 4.2.3)\n#&gt;  prettyunits   1.1.1   2020-01-24 [1] CRAN (R 4.2.1)\n#&gt;  processx      3.8.1   2023-04-18 [1] CRAN (R 4.2.3)\n#&gt;  profvis       0.3.7   2020-11-02 [1] CRAN (R 4.2.2)\n#&gt;  promises      1.2.0.1 2021-02-11 [1] CRAN (R 4.2.1)\n#&gt;  ps            1.7.1   2022-06-18 [1] CRAN (R 4.2.1)\n#&gt;  purrr       * 1.0.1   2023-01-10 [1] CRAN (R 4.2.3)\n#&gt;  R6            2.5.1   2021-08-19 [1] CRAN (R 4.2.1)\n#&gt;  Rcpp          1.0.9   2022-07-08 [1] CRAN (R 4.2.1)\n#&gt;  readr       * 2.1.4   2023-02-10 [1] CRAN (R 4.2.3)\n#&gt;  remotes       2.4.2   2021-11-30 [1] CRAN (R 4.2.1)\n#&gt;  rlang         1.1.1   2023-04-28 [1] CRAN (R 4.2.3)\n#&gt;  rmarkdown     2.21    2023-03-26 [1] CRAN (R 4.2.3)\n#&gt;  roxygen2    * 7.2.3   2022-12-08 [1] CRAN (R 4.2.3)\n#&gt;  scales        1.2.1   2022-08-20 [1] CRAN (R 4.2.3)\n#&gt;  sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.2)\n#&gt;  shiny         1.7.4   2022-12-15 [1] CRAN (R 4.2.3)\n#&gt;  stringi       1.7.8   2022-07-11 [1] CRAN (R 4.2.1)\n#&gt;  stringr     * 1.5.0   2022-12-02 [1] CRAN (R 4.2.3)\n#&gt;  testthat    * 3.1.5   2022-10-08 [1] CRAN (R 4.2.2)\n#&gt;  tibble      * 3.2.1   2023-03-20 [1] CRAN (R 4.2.3)\n#&gt;  tidyr       * 1.3.0   2023-01-24 [1] CRAN (R 4.2.3)\n#&gt;  tidyselect    1.2.0   2022-10-10 [1] CRAN (R 4.2.2)\n#&gt;  tidyverse   * 2.0.0   2023-02-22 [1] CRAN (R 4.2.3)\n#&gt;  timechange    0.2.0   2023-01-11 [1] CRAN (R 4.2.3)\n#&gt;  tinytex       0.45    2023-04-18 [1] CRAN (R 4.2.3)\n#&gt;  tzdb          0.3.0   2022-03-28 [1] CRAN (R 4.2.1)\n#&gt;  urlchecker    1.0.1   2021-11-30 [1] CRAN (R 4.2.2)\n#&gt;  usethis     * 2.1.6   2022-05-25 [1] CRAN (R 4.2.2)\n#&gt;  utf8          1.2.2   2021-07-24 [1] CRAN (R 4.2.1)\n#&gt;  vctrs         0.6.2   2023-04-19 [1] CRAN (R 4.2.3)\n#&gt;  vroom         1.6.3   2023-04-28 [1] CRAN (R 4.2.3)\n#&gt;  withr         2.5.0   2022-03-03 [1] CRAN (R 4.2.1)\n#&gt;  xfun          0.39    2023-04-20 [1] CRAN (R 4.2.3)\n#&gt;  xml2          1.3.3   2021-11-30 [1] CRAN (R 4.2.1)\n#&gt;  xtable        1.8-4   2019-04-21 [1] CRAN (R 4.2.1)\n#&gt; \n#&gt;  [1] D:/R/R-4.2.1/library\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────\n\n\n\n\n\nMüller, Kirill, and Lorenz Walthert. 2018. Styler: Non-Invasive Pretty Printing of R Code. http://styler.r-lib.org."
  },
  {
    "objectID": "preface.html#footnotes",
    "href": "preface.html#footnotes",
    "title": "前言",
    "section": "",
    "text": "译者注：版权页↩︎"
  },
  {
    "objectID": "introduction.html#sec-intro-phil",
    "href": "introduction.html#sec-intro-phil",
    "title": "简介",
    "section": "开发理念",
    "text": "开发理念\n本书宣扬了我们的软件包开发理念：凡是能够自动化的，都应该自动化。 尽量减少手动操作。 用函数完成尽可能多的事情。 这样是希望你将时间用于思考你想要让包做什么，而不是包结构的各种细节。\n这一理念主要是 devtools 包来实现的，这个软件包是让通用开发任务自动化的 R 函数套件中的代表。 devtools 在 2018 年 10 月发布了 2.0.0 版本，标志着其内部重组为一系列功能更具针对性的软件包，而它则更像是一个元软件包 (meta-package)。 usethis 包是其中你最有可能与之交互的子软件包，我们将在 ?sec-setup-usage 中解释 devtools 和 usethis 之间的关系。\n像往常一样，devtools 包的目的是让软件包的开发尽可能的轻松便利。 它囊括了 Hadley Wickham 自从作为一名多产的独立开发者以来积累的最佳实践经验。 最近，他在 Posit（以前称为 RStudio）组建了一个开发团队，共同维护数百个开源 R 包，包括那些被称为 the tidyverse 的包。 这个团队的能力让我们能够以惊人的规模探索所有可能出现的错误。 幸运的是，它还让我们有机会在专家和富有同情心的同事的陪伴下反思成功和失败。 我们试图开发出一些实践方法，让包的维护者和用户的工作更加轻松便利， 而 devtools 元软件包正是把这些经验教训具体化的地方。\ndevtools 与 RStudio 协同工作，我们相信这是对大多数 R 用户来说是最好的开发环境。 目前最流行的 RStudio 替代品是启用了 R extension 的 Visual Studio Code (VS Code)。 这可能是一个有价值并且功能强大的环境，然而它确实需要更多的工作来设置和定制3.\n\n\n\n\n\n\nRStudio\n\n\n\n在整本书中，我们在像这样特殊格式的段落中强调了使用 RStudio 加速软件包开发工作流程的具体方法。\n\n\ndevtools 和 RStudio 一起，让你无需关注软件包是怎样构建的这种低级细节。 但是当你开始开发更多的软件包时，我们强烈建议你去了解这些细节。 有关软件包开发官方细节的最佳资源，始终是官方的 writing R extensions 手册4. 然而，如果你还不熟悉软件包的基础知识，这本使用手册可能难以理解。 它也十分详尽，涵盖了所有可能的软件包组件，而不是像本书那样只关注最常见和最有用的组件。 一旦你掌握了 R 包的基础知识，并且想深入了解其背后发生了什么，那么这本手册就是十分有用的资料。"
  },
  {
    "objectID": "introduction.html#intro-outline",
    "href": "introduction.html#intro-outline",
    "title": "简介",
    "section": "本书包含的内容",
    "text": "本书包含的内容\n本书的第一部分将为你提供软件包开发之旅所需的所有工具，强烈建议你按顺序阅读。 我们将在 Chapter 1 中介绍一个小软件包的完整开发过程。 在我们深入研究 R 包的关键组件之前，它旨在描绘出整体的图景并提出一个工作流程。 然后在 ?sec-setup 你将学习如何为软件包开发准备好系统环境；在 ?sec-package-structure-state 中，你将学习软件 包的基本结构以及它不同状态下的差异。 接下来，在 ?sec-workflow101 中，我们将介绍软件包开发人员经常遇到的核心工作流。 本书第一部分以另一个案例 (?sec-package-within) 作为结尾，这次重点介绍如何将脚本转换为包，并讨论在这个过程中可能面临的挑战。\n本书的其余部分可以根据需要进行阅读。 在你开发过程中面临各种问题时，可以在各章中进行选择阅读。\n我们首先介绍软件包中的关键组件：?sec-r 讨论代码的位置和组织方式，?sec-data 介绍如何在包中包含数据，?sec-misc 介绍几个需要在一些地方讨论，但不太重要的文件和目录。\n接下来，我们将从 ?sec-description 的 DESCRIPTION 文件开始，深入了解包的元数据。 在 ?sec-dependencies-mindset-background 中，我们将介绍使用依赖项的成本和收益，并提供一些关于包命名空间和搜索路径的技术背景知识。 在 ?sec-dependencies-in-practice 中，我们关注一些实际问题，比如如何在包的不同部分使用不同类型的依赖。 这也是我们讨论导出函数 (exporting functions) 的地方，这使得其他包和项目可以将你的包作为依赖项。 我们将在 ?sec-license 中以有关添加开源软件许可证的内容结束这一部分。\n为了确保软件包能按照设计正常工作（并在你修改代码后继续正常工作），测试你的代码是必不可少的工作，所以接下来的三章将介绍测试的艺术和科学。 ?sec-testing-basics 通过 testthat 包介绍测试的基础知识。 ?sec-testing-design 教你如何以最有效的方式设计和组织测试。 ?sec-testing-advanced 将结束对测试的介绍，这一章将教你处理具有挑战性的情况的高级技能。\n如果你想让其他人（包括未来的你！）理解如何使用包中的函数，就需要为它编写文档。 ?sec-man 开始教你使用 roxygen2 为包中的函数编写文档。 只有在你知道要查找哪个函数的时候，函数文档才有帮助。所以在 ?sec-vignettes 中，我们将讨论主题文档 (vignettes)，它可以帮助你为整个包提供文档。 我们将在 ?sec-other-markdown 结束对文档编写的介绍，这一章介绍其他重要的 markdown 文件，如 README.md 和 NEWS.md。?sec-website 则是介绍如何用 pkgdown 创建软件包网站。\n本书最后回顾了开发实践方法，例如使用版本控制和持续集成的好处 (?sec-sw-dev-practices)。 最后，我们会讨论软件包的生命周期 (?sec-lifecycle)，包括在CRAN上发布软件包 (?sec-release)。\n本书中有很多东西要学，但不要感到不知所措。 从一个最小的有用的功能子集（例如一个 R/ 目录！）开始，随着时间的推移逐步构建你的包。 套用禅僧铃木俊隆 (Shunryu Suzuki) 的话:“每个包都是完美的，就像它本来的模样——但是也许可以稍作改进。”5"
  },
  {
    "objectID": "introduction.html#本书没有包含的内容",
    "href": "introduction.html#本书没有包含的内容",
    "title": "简介",
    "section": "本书没有包含的内容",
    "text": "本书没有包含的内容\n还有一些实践方法在本书中几乎没有讨论，这只是因为我们没有足够多地使用它们，因此没有任何独特的见解。 这是否意味着我们应该积极避免使用这些方法呢？ 可能并不是这样，因为我们在书中试图明确地说明我们认为你应该避免的做法。 因此，如果有什么东西没有在本书中介绍，这只是意味着数百个被广泛使用的 R 包并没有依赖于这项技术。 这一结果应该能鼓励你去评估自己的开发需求与我们不重叠的可能性有多大。 但有时这个问题的答案是明确的“是”，在这种情况下，你只需要去查阅其他的资料。\n\n\n\n\nMarwick, Ben, Carl Boettiger, and Lincoln Mullen. 2018a. “Packaging Data Analytical Work Reproducibly Using r (and Friends).” The American Statistician 72 (1): 80–88. https://doi.org/10.1080/00031305.2017.1375986.\n\n\n———. 2018b. “Packaging Data Analytical Work Reproducibly Using r (and Friends).” PeerJ Preprints 6 (March): e3192v2. https://doi.org/10.7287/peerj.preprints.3192v2."
  },
  {
    "objectID": "introduction.html#footnotes",
    "href": "introduction.html#footnotes",
    "title": "简介",
    "section": "",
    "text": "译者注：译者认为这里想要表达开发 R 包能带来一个明显的优势，即方便分享自己的代码，这一优势具有强烈的推动力和说服力，让你想要开发 R 包。↩︎\n“Seriously, it doesn’t have to be about sharing your code (although that is an added benefit!). It is about saving yourself time.”↩︎\nEmacs Speaks Statistics (ESS) 的用户将会发现本书中描述的许多工作流也可以在上面找到。 对于那些忠于 vim 的用户，我们推荐使用 Nvim-R plugin。↩︎\n你也可以在 https://rstudio.github.io/r-manuals/r-exts/ 上找到这本手册的 Quarto 版本。↩︎\n译者注：原话来自铃木俊隆的书籍《禅之初心》(Zen Mind, Beginner’s Mind)↩︎"
  },
  {
    "objectID": "whole-game.html#加载-devtools-和相关软件包",
    "href": "whole-game.html#加载-devtools-和相关软件包",
    "title": "1  整体流程",
    "section": "\n1.1 加载 devtools 和相关软件包",
    "text": "1.1 加载 devtools 和相关软件包\n你能够在任何一个活动的 R session 中初始化你的新软件包。 你不需要担心你是在一个已有或新的项目中。 我们使用的函数能够确保我们为软件包创建一个新的干净的项目。\n加载 devtools 包，它是一组支持许多软件包开发任务的软件包中的代表。 其中最明显1的是 usethis 包，你会看到它也会被加载。\n\nlibrary(devtools)\n#&gt; Warning: package 'devtools' was built under R version 4.2.2\n#&gt; Loading required package: usethis\n#&gt; Warning: package 'usethis' was built under R version 4.2.2\n\n你安装的还是旧版本的 devtools 吗？ 请和我们使用的版本比较，如果必要的话请升级 devtools。\n\npackageVersion(\"devtools\")\n#&gt; [1] '2.4.5'"
  },
  {
    "objectID": "whole-game.html#示例软件包regexcite",
    "href": "whole-game.html#示例软件包regexcite",
    "title": "1  整体流程",
    "section": "\n1.2 示例软件包：regexcite",
    "text": "1.2 示例软件包：regexcite\n为了帮助你完成整个过程，我们使用 devtools 中的各种函数从头开始构建一个小的示例软件包，其中包含在已发布软件包中常见的一些功能：\n\n满足特定需求的函数。在这个示例中是辅助使用正则表达式的函数。\n版本控制和开放的开发过程。\n\n这在你的工作流程中是完全可选的，但我们强烈建议这样做。你将看到 Git 和 GitHub 如何帮助我们展现示例软件包开发的所有中间阶段。\n\n\n进入既定的工作流程进行安装、获取帮助和检查质量。\n\n使用 roxygen2 为每个函数建立文档。\n使用 testthat 进行单元测试。\n通过一个可执行的 README.Rmd 为软件包建立整体说明文档。\n\n\n\n我们称这个软件包为 regexcite，它包含了几个函数，可以对使用正则表达式的常见任务进行简化。 请注意，这些函数十分简单，我们在这里只使用它们来引导你完成软件包的开发过程。 如果你正在寻找能够实际帮助你使用正则表达式的函数，这里有几个适合的 R 包可能可以解决问题：\n\n\nstringr（使用了 stringi）\nstringi\nrex\nrematch2\n\n再次强调，regexcite 包本身只是一个用于演示使用 devtools 开发包的典型工作流的工具。"
  },
  {
    "objectID": "whole-game.html#预览成品",
    "href": "whole-game.html#预览成品",
    "title": "1  整体流程",
    "section": "\n1.3 预览成品",
    "text": "1.3 预览成品\n我们使用了 Git 版本控制系统来追踪 regexcite 包的整个开发过程。 这一设置是完全可选的，你当然可以不使用。 不过它有一个很好的附加好处，我们最终会将它连接到 GitHub 的一个远程储存库，这意味着你可以通过访问 GitHub 上的 https://github.com/jennybc/regexcite 来看到我们努力取得的辉煌成果。 通过检查提交历史 (commit history) ，特别是其中的文件差异（diff），你可以清楚地看到下面列出的过程中的每一步变化。"
  },
  {
    "objectID": "whole-game.html#create_package",
    "href": "whole-game.html#create_package",
    "title": "1  整体流程",
    "section": "\n1.4 create_package()\n",
    "text": "1.4 create_package()\n\n调用 create_package()，在你的计算机的一个目录下初始化一个新的软件包。 如果该目录不存在（通常都是这样），create_package() 将会自动创建该目录。 有关创建包的更多信息，请参见 ?sec-workflow101-create-package。\n仔细选择创建新软件包的目录。 它可以与其他 R 项目共同位于你的主目录下。 但是，它不应该被嵌套在另一个 RStudio 项目、R 包或者是 Git 存储库中。 它也不应该在 R 的软件包库目录中，因为这个库目录下包含有已经被构建和安装的软件包。 将我们在这里创建的源码包转换为已安装的包是 devtools 工作的一部分。 不要为 devtools 完成它的工作！\n一旦你选择了创建这个软件包的位置，像这样将你选择的路径传入 create_package() 的调用中：\n\ncreate_package(\"~/path/to/regexcite\")\n\n在本书的创作中，我们必须在临时目录中工作，因为这本书是在云上以非交互形式构建的。 在幕后，我们会执行自己的 create_package() 命令，如果我们的输出与你的略有不清，请不要惊讶。\n\nwithr::with_options(\n  list(usethis.description = NULL),\n  create_package(pkgpath, open = FALSE, rstudio = TRUE)\n)\n#&gt; ✔ Creating 'C:/Users/xiaob/AppData/Local/Temp/RtmpAnNRAK/regexcite/'\n#&gt; ✔ Setting active project to 'C:/Users/xiaob/AppData/Local/Temp/RtmpAnNRAK/regexcite'\n#&gt; ✔ Creating 'R/'\n#&gt; ✔ Writing 'DESCRIPTION'\n#&gt; Package: regexcite\n#&gt; Title: What the Package Does (One Line, Title Case)\n#&gt; Version: 0.0.0.9000\n#&gt; Authors@R (parsed):\n#&gt;     * First Last &lt;first.last@example.com&gt; [aut, cre] (YOUR-ORCID-ID)\n#&gt; Description: What the package does (one paragraph).\n#&gt; License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n#&gt;     license\n#&gt; Encoding: UTF-8\n#&gt; Roxygen: list(markdown = TRUE)\n#&gt; RoxygenNote: 7.2.3\n#&gt; ✔ Writing 'NAMESPACE'\n#&gt; ✔ Writing 'regexcite.Rproj'\n#&gt; ✔ Adding '^regexcite\\\\.Rproj$' to '.Rbuildignore'\n#&gt; ✔ Adding '.Rproj.user' to '.gitignore'\n#&gt; ✔ Adding '^\\\\.Rproj\\\\.user$' to '.Rbuildignore'\n#&gt; ✔ Setting active project to '&lt;no active project&gt;'\n\n\n(owd &lt;- getwd())\n#&gt; [1] \"F:/Projects/R/Books/R Packages/R-Packages-zh-CN\"\nlocal_project(pkgpath, setwd = TRUE)\n#&gt; ✔ Setting active project to\n#&gt; 'C:/Users/xiaob/AppData/Local/Temp/RtmpAnNRAK/regexcite'\ngetwd()\n#&gt; [1] \"C:/Users/xiaob/AppData/Local/Temp/RtmpAnNRAK/regexcite\"\n\n# I normally am not this masochistic, but there is little choice\nknitr::opts_knit$set(root.dir = pkgpath)\n\n\n# can't be in chunk above, because knitr\nproj_sitrep()\n#&gt; •   working_directory: 'C:/Users/xiaob/AppData/Local/Temp/RtmpAnNRAK/regexcite'\n#&gt; • active_usethis_proj: 'C:/Users/xiaob/AppData/Local/Temp/RtmpAnNRAK/regexcite'\n#&gt; • active_rstudio_proj: &lt;unset&gt;\n\n如果你正在使用 RStudio，你会发现自己进入了一个新的 RStudio 实例，它已经在新的 regexcite 包（或项目）目录中打开了。 如果你因为某种原因需要手动执行这个操作，请进入该目录并双击 regexcite.Rproj。 RStudio 对源码包项目有特殊的处理，你现在应该可以在 Environment 和 History 所在的窗格中看见 Build 选项卡。\n你可能需要再次调用 library(devtools)，因为 create_package() 可能将你放入了新软件包目录的一个新的 R session 中。\n\nlibrary(devtools)\n\n这个新的目录也是一个 R 包，而且可能也是一个 RStudio 项目，里面有什么呢？ 这里有一个列表（在本地，你可以查看 Files 窗格）：\n\n\n\n\npath\ntype\n\n\n\n.gitignore\nfile\n\n\n.Rbuildignore\nfile\n\n\nDESCRIPTION\nfile\n\n\nNAMESPACE\nfile\n\n\nR\ndirectory\n\n\nregexcite.Rproj\nfile\n\n\n\n\n\n\n\n\n\n\n\nRStudio\n\n\n\n在 Files 窗格中，转到 More（齿轮符号）&gt; Show Hidden Files 来使隐藏文件（也被称为 “dotfiles”）可见。 可选中的部分文件是始终可见的，但有时你希望看到全部文件。\n\n\n\n\n.Rbuildignore 列出了我们需要使用的，但从源代码构建 R 包时不应该包含的文件。如果你不使用 RStudio, create_package() 可能不会在一开始创建这个文件（同样也不会创建 .gitignore），因为没有需要忽略的 RStudio 相关机制。然而，不管你是用的是什么编辑器，在某些时候你可能仍然会需要 .Rbuildignore 文件。?sec-rbuildignore 会进行更加详细的讨论。\n\n.Rproj.user（如果有的话）是 RStudio 内部使用的目录。\n\n.gitignore anticipates Git usage and tells Git to ignore some standard, behind-the-scenes files created by R and RStudio. Even if you do not plan to use Git, this is harmless.\n\nDESCRIPTION provides metadata about your package. We edit this shortly and ?sec-description covers the general topic of the DESCRIPTION file.\n\nNAMESPACE declares the functions your package exports for external use and the external functions your package imports from other packages. At this point, it is empty, except for a comment declaring that this is a file you should not edit by hand.\n\nR/ 目录是你的软件包的“业务端”。它很快就会包含带有函数定义的 .R 文件。\n\nregexcite.Rproj is the file that makes this directory an RStudio Project. Even if you don’t use RStudio, this file is harmless. Or you can suppress its creation with create_package(..., rstudio = FALSE). More in ?sec-workflow101-rstudio-projects."
  },
  {
    "objectID": "whole-game.html#use_git",
    "href": "whole-game.html#use_git",
    "title": "1  整体流程",
    "section": "\n1.5 use_git()\n",
    "text": "1.5 use_git()\n\nThe regexcite directory is an R source package and an RStudio Project. Now we make it also a Git repository, with use_git(). (By the way, use_git() works in any project, regardless of whether it’s an R package.)\n\nuse_git()\n#&gt; ✔ Initialising Git repo\n#&gt; ✔ Adding '.Rhistory', '.Rdata', '.httr-oauth', '.DS_Store' to '.gitignore'\n\nIn an interactive session, you will be asked if you want to commit some files here and you should accept the offer. Behind the scenes, we’ll also commit those same files.\n\nsuppressPackageStartupMessages(library(gert))\n#&gt; Warning: package 'gert' was built under R version 4.2.2\ngit_add(\".\")\n#&gt; # A tibble: 5 × 3\n#&gt;   file            status staged\n#&gt;   &lt;chr&gt;           &lt;chr&gt;  &lt;lgl&gt; \n#&gt; 1 .gitignore      new    TRUE  \n#&gt; 2 .Rbuildignore   new    TRUE  \n#&gt; 3 DESCRIPTION     new    TRUE  \n#&gt; 4 NAMESPACE       new    TRUE  \n#&gt; 5 regexcite.Rproj new    TRUE\ngit_commit(\"Initial commit\")\n#&gt; [1] \"cc153acfe02876dddb039757b62ba6d6f8ec1b98\"\n\nSo what has changed in the package? Only the creation of a .git directory, which is hidden in most contexts, including the RStudio file browser. Its existence is evidence that we have indeed initialized a Git repo here.\n\n\n\n\npath\ntype\n\n\n.git\ndirectory\n\n\n\n\nIf you’re using RStudio, it probably requested permission to relaunch itself in this Project, which you should do. You can do so manually by quitting, then relaunching RStudio by double clicking on regexcite.Rproj. Now, in addition to package development support, you have access to a basic Git client in the Git tab of the Environment/History/Build pane.\n\nClick on History (the clock icon in the Git pane) and, if you consented, you will see an initial commit made via use_git():\n\n\n\n\ncommit\nauthor\nmessage\n\n\ncc153acfe0…\nYuanchenZhu2020 yuanchenzhu@126.com\n\nInitial commit\n\n\n\n\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio can initialize a Git repository, in any Project, even if it’s not an R package, as long you’ve set up RStudio + Git integration. Do Tools &gt; Version Control &gt; Project Setup. Then choose Version control system: Git and initialize a new git repository for this project."
  },
  {
    "objectID": "whole-game.html#write-the-first-function",
    "href": "whole-game.html#write-the-first-function",
    "title": "1  整体流程",
    "section": "\n1.6 Write the first function",
    "text": "1.6 Write the first function\nA fairly common task when dealing with strings is the need to split a single string into many parts. The strsplit() function in base R does exactly this.\n\n(x &lt;- \"alfa,bravo,charlie,delta\")\n#&gt; [1] \"alfa,bravo,charlie,delta\"\nstrsplit(x, split = \",\")\n#&gt; [[1]]\n#&gt; [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\n\nTake a close look at the return value.\n\nstr(strsplit(x, split = \",\"))\n#&gt; List of 1\n#&gt;  $ : chr [1:4] \"alfa\" \"bravo\" \"charlie\" \"delta\"\n\nThe shape of this return value often surprises people or, at least, inconveniences them. The input is a character vector of length one and the output is a list of length one. This makes total sense in light of R’s fundamental tendency towards vectorization. But sometimes it’s still a bit of a bummer. Often you know that your input is morally a scalar, i.e. it’s just a single string, and really want the output to be the character vector of its parts.\nThis leads R users to employ various methods of “unlist”-ing the result:\n\nunlist(strsplit(x, split = \",\"))\n#&gt; [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\n\nstrsplit(x, split = \",\")[[1]]\n#&gt; [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\n\nThe second, safer solution is the basis for the inaugural function of regexcite: strsplit1().\n\nstrsplit1 &lt;- function(x, split) {\n  strsplit(x, split = split)[[1]]\n}\n\nThis book does not teach you how to write functions in R. To learn more about that take a look at the Functions chapter of R for Data Science and the Functions chapter of Advanced R.\n\n\n\n\n\n\nTip\n\n\n\nThe name of strsplit1() is a nod to the very handy paste0(), which first appeared in R 2.15.0 in 2012. paste0() was created to address the extremely common use case of paste()-ing strings together without a separator. paste0() has been lovingly described as “statistical computing’s most influential contribution of the 21st century”.\nThe strsplit1() function was so inspiring that it’s now a real function in the stringr package: stringr::str_split_1()!"
  },
  {
    "objectID": "whole-game.html#use_r",
    "href": "whole-game.html#use_r",
    "title": "1  整体流程",
    "section": "\n1.7 use_r()\n",
    "text": "1.7 use_r()\n\nWhere should you put the definition of strsplit1()? Save it in a .R file, in the R/ subdirectory of your package. A reasonable starting position is to make a new .R file for each user-facing function in your package and name the file after the function. As you add more functions, you’ll want to relax this and begin to group related functions together. We’ll save the definition of strsplit1() in the file R/strsplit1.R.\nThe helper use_r() creates and/or opens a script below R/. It really shines in a more mature package, when navigating between .R files and the associated test file. But, even here, it’s useful to keep yourself from getting too carried away while working in Untitled4.\n\nuse_r(\"strsplit1\")\n#&gt; • Edit 'R/strsplit1.R'\n#&gt; • Call `use_test()` to create a matching test file\n\nPut the definition of strsplit1() and only the definition of strsplit1() in R/strsplit1.R and save it. The file R/strsplit1.R should NOT contain any of the other top-level code we have recently executed, such as the definition of our practice input x, library(devtools), or use_git(). This foreshadows an adjustment you’ll need to make as you transition from writing R scripts to R packages. Packages and scripts use different mechanisms to declare their dependency on other packages and to store example or test code. We explore this further in ?sec-r."
  },
  {
    "objectID": "whole-game.html#sec-whole-game-load-all",
    "href": "whole-game.html#sec-whole-game-load-all",
    "title": "1  整体流程",
    "section": "\n1.8 load_all()\n",
    "text": "1.8 load_all()\n\nHow do we test drive strsplit1()? If this were a regular R script, we might use RStudio to send the function definition to the R Console and define strsplit1() in the global environment. Or maybe we’d call source(\"R/strsplit1.R\"). For package development, however, devtools offers a more robust approach.\nCall load_all() to make strsplit1() available for experimentation.\n\nload_all()\n#&gt; ℹ Loading regexcite\n\nNow call strsplit1(x) to see how it works.\n\n(x &lt;- \"alfa,bravo,charlie,delta\")\n#&gt; [1] \"alfa,bravo,charlie,delta\"\nstrsplit1(x, split = \",\")\n#&gt; [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\n\nNote that load_all() has made the strsplit1() function available, although it does not exist in the global environment.\n\nexists(\"strsplit1\", where = globalenv(), inherits = FALSE)\n#&gt; [1] FALSE\n\nIf you see TRUE instead of FALSE, that indicates you’re still using a script-oriented workflow and sourcing your functions. Here’s how to get back on track:\n\nClean out the global environment and restart R.\nRe-attach devtools with library(devtools) and re-load regexcite with load_all().\nRedefine the test input x and call strsplit1(x, split = \",\") again. This should work!\nRun exists(\"strsplit1\", where = globalenv(), inherits = FALSE) again and you should see FALSE.\n\nload_all() simulates the process of building, installing, and attaching the regexcite package. As your package accumulates more functions, some exported, some not, some of which call each other, some of which call functions from packages you depend on, load_all() gives you a much more accurate sense of how the package is developing than test driving functions defined in the global environment. Also load_all() allows much faster iteration than actually building, installing, and attaching the package. See ?sec-workflow101-load-all for more about load_all().\nTo review what we’ve done so far:\n\nWe wrote our first function, strsplit1(), to split a string into a character vector (not a list containing a character vector).\nWe used load_all() to quickly make this function available for interactive use, as if we’d built and installed regexcite and attached it via library(regexcite).\n\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio exposes load_all() in the Build menu, in the Build pane via More &gt; Load All, and in keyboard shortcuts Ctrl + Shift + L (Windows & Linux) or Cmd + Shift + L (macOS).\n\n\n\n1.8.1 Commit strsplit1()\n\nIf you’re using Git, use your preferred method to commit the new R/strsplit1.R file. We do so behind the scenes here and here’s the associated diff.\n\ngit_add(path(\"R\", \"strsplit1.R\"))\n#&gt; # A tibble: 1 × 3\n#&gt;   file          status staged\n#&gt;   &lt;chr&gt;         &lt;chr&gt;  &lt;lgl&gt; \n#&gt; 1 R/strsplit1.R new    TRUE\ngit_commit(\"Add strsplit1()\")\n#&gt; [1] \"b1233cc310127a7eeb95a116ac0314e37326646d\"\n## tags might be useful for making stable links to the package at specific\n## evolutionary stages\n## possible convention: tag name = chunk label\n#tag_name &lt;- knitr::opts_current$get(\"label\")\n#tag(repo, tag_name, \"initial creation of strsplit1()\")\n#tag(repo, \"strsplit1-init\", \"initial creation of strsplit1()\")\n#sha &lt;- (commits(repo)[[1]])@sha\n\n\ndiff --git a/R/strsplit1.R b/R/strsplit1.R\nnew file mode 100644\nindex 0000000..29efb88\n--- /dev/null\n+++ b/R/strsplit1.R\n@@ -0,0 +1,3 @@\n+strsplit1 &lt;- function(x, split) {\n+  strsplit(x, split = split)[[1]]\n+}\n\nFrom this point on, we commit after each step. Remember these commits are available in the public repository."
  },
  {
    "objectID": "whole-game.html#check",
    "href": "whole-game.html#check",
    "title": "1  整体流程",
    "section": "\n1.9 check()\n",
    "text": "1.9 check()\n\nWe have informal, empirical evidence that strsplit1() works. But how can we be sure that all the moving parts of the regexcite package still work? This may seem silly to check, after such a small addition, but it’s good to establish the habit of checking this often.\nR CMD check, executed in the shell, is the gold standard for checking that an R package is in full working order. check() is a convenient way to run this without leaving your R session.\nNote that check() produces rather voluminous output, optimized for interactive consumption. We intercept that here and just reveal a summary. Your local check() output will be different.\n\ncheck()\n\n\n── R CMD check results ─────────────────── regexcite 0.0.0.9000 ────\nDuration: 1m 11.3s\n\n❯ checking DESCRIPTION meta-information ... WARNING\n  Non-standard license specification:\n    `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\n  Standardizable: FALSE\n\n0 errors ✔ | 1 warning ✖ | 0 notes ✔\n\nIt is essential to actually read the output of the check! Deal with problems early and often. It’s just like incremental development of .R and .Rmd files. The longer you go between full checks that everything works, the harder it becomes to pinpoint and solve your problems.\nAt this point, we expect 1 warning (and 0 errors, 0 notes):\nNon-standard license specification:\n  `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n  license\nWe’ll address that soon, by doing exactly what it says. You can learn more about check() in ?sec-workflow101-r-cmd-check.\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio exposes check() in the Build menu, in the Build pane via Check, and in keyboard shortcuts Ctrl + Shift + E (Windows & Linux) or Cmd + Shift + E (macOS)."
  },
  {
    "objectID": "whole-game.html#edit-description",
    "href": "whole-game.html#edit-description",
    "title": "1  整体流程",
    "section": "\n1.10 Edit DESCRIPTION\n",
    "text": "1.10 Edit DESCRIPTION\n\nThe DESCRIPTION file provides metadata about your package and is covered fully in ?sec-description. This is a good time to have a look at regexcite’s current DESCRIPTION. You’ll see it’s populated with boilerplate content, which needs to be replaced.\nTo add your own metadata, make these edits:\n\nMake yourself the author. If you don’t have an ORCID, you can omit the comment = ... portion.\nWrite some descriptive text in the Title and Description fields.\n\n\n\n\n\n\n\nRStudio\n\n\n\nUse Ctrl + . in RStudio and start typing “DESCRIPTION” to activate a helper that makes it easy to open a file for editing. In addition to a filename, your hint can be a function name. This is very handy once a package has lots of files.\n\n\nWhen you’re done, DESCRIPTION should look similar to this:\n\n\n\nPackage: regexcite\nTitle: Make Regular Expressions More Exciting\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"Jane\", \"Doe\", , \"jane@example.com\", role = c(\"aut\", \"cre\"))\nDescription: Convenience functions to make some common tasks with string\n    manipulation and regular expressions a bit easier.\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.1.2\n\n\ngit_add(\"DESCRIPTION\")\n#&gt; # A tibble: 1 × 3\n#&gt;   file        status   staged\n#&gt;   &lt;chr&gt;       &lt;chr&gt;    &lt;lgl&gt; \n#&gt; 1 DESCRIPTION modified TRUE\ngit_commit(\"Edit DESCRIPTION\")\n#&gt; [1] \"bd76e0bcde20aea83644f78486f57a95515ef432\""
  },
  {
    "objectID": "whole-game.html#use_mit_license",
    "href": "whole-game.html#use_mit_license",
    "title": "1  整体流程",
    "section": "\n1.11 use_mit_license()\n",
    "text": "1.11 use_mit_license()\n\n\nPick a License, Any License. – Jeff Atwood\n\nWe currently have a placeholder in the License field of DESCRIPTION that’s deliberately invalid and suggests a resolution.\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nTo configure a valid license for the package, call use_mit_license().\n\nuse_mit_license()\n#&gt; ✔ Setting License field in DESCRIPTION to 'MIT + file LICENSE'\n#&gt; ✔ Writing 'LICENSE'\n#&gt; ✔ Writing 'LICENSE.md'\n#&gt; ✔ Adding '^LICENSE\\\\.md$' to '.Rbuildignore'\n\nThis configures the License field correctly for the MIT license, which promises to name the copyright holders and year in a LICENSE file. Open the newly created LICENSE file and confirm it looks something like this:\n\nYEAR: 2023\nCOPYRIGHT HOLDER: regexcite authors\n\nLike other license helpers, use_mit_license() also puts a copy of the full license in LICENSE.md and adds this file to .Rbuildignore. It’s considered a best practice to include a full license in your package’s source, such as on GitHub, but CRAN disallows the inclusion of this file in a package tarball. You can learn more about licensing in ?sec-license.\n\ngit_add(c(\".Rbuildignore\", \"DESCRIPTION\", \"LICENSE\", \"LICENSE.md\"))\n#&gt; # A tibble: 4 × 3\n#&gt;   file          status   staged\n#&gt;   &lt;chr&gt;         &lt;chr&gt;    &lt;lgl&gt; \n#&gt; 1 .Rbuildignore modified TRUE  \n#&gt; 2 DESCRIPTION   modified TRUE  \n#&gt; 3 LICENSE       new      TRUE  \n#&gt; 4 LICENSE.md    new      TRUE\ngit_commit(\"Use MIT license\")\n#&gt; [1] \"aaaf7f6d5ccd99c0a06afed2fcfa19af175acbfa\""
  },
  {
    "objectID": "whole-game.html#sec-whole-game-document",
    "href": "whole-game.html#sec-whole-game-document",
    "title": "1  整体流程",
    "section": "\n1.12 document()\n",
    "text": "1.12 document()\n\nWouldn’t it be nice to get help on strsplit1(), just like we do with other R functions? This requires that your package have a special R documentation file, man/strsplit1.Rd, written in an R-specific markup language that is sort of like LaTeX. Luckily we don’t necessarily have to author that directly.\nWe write a specially formatted comment right above strsplit1(), in its source file, and then let a package called roxygen2 handle the creation of man/strsplit1.Rd. The motivation and mechanics of roxygen2 are covered in ?sec-man.\nIf you use RStudio, open R/strsplit1.R in the source editor and put the cursor somewhere in the strsplit1() function definition. Now do Code &gt; Insert roxygen skeleton. A very special comment should appear above your function, in which each line begins with #'. RStudio only inserts a barebones template, so you will need to edit it to look something like that below.\nIf you don’t use RStudio, create the comment yourself. Regardless, you should modify it to look something like this:\n\n#' Split a string\n#'\n#' @param x A character vector with one element.\n#' @param split What to split on.\n#'\n#' @return A character vector.\n#' @export\n#'\n#' @examples\n#' x &lt;- \"alfa,bravo,charlie,delta\"\n#' strsplit1(x, split = \",\")\nstrsplit1 &lt;- function(x, split) {\n  strsplit(x, split = split)[[1]]\n}\n\n\n\ngit_add(path(\"R\", \"strsplit1.R\"))\n#&gt; # A tibble: 1 × 3\n#&gt;   file          status   staged\n#&gt;   &lt;chr&gt;         &lt;chr&gt;    &lt;lgl&gt; \n#&gt; 1 R/strsplit1.R modified TRUE\ngit_commit(\"Add roxygen header to document strsplit1()\")\n#&gt; [1] \"da8b6bf200172f513fd3631b5454758ba8822f52\"\n\nBut we’re not done yet! We still need to trigger the conversion of this new roxygen comment into man/strsplit1.Rd with document():\n\ndocument()\n#&gt; ℹ Updating regexcite documentation\n#&gt; Setting `RoxygenNote` to \"7.2.3\"\n#&gt; ℹ Loading regexcite\n#&gt; Writing 'NAMESPACE'\n#&gt; Writing 'strsplit1.Rd'\n\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio exposes document() in the Build menu, in the Build pane via More &gt; Document, and in keyboard shortcuts Ctrl + Shift + D (Windows & Linux) or Cmd + Shift + D (macOS).\n\n\nYou should now be able to preview your help file like so:\n\n?strsplit1\n\nYou’ll see a message like “Rendering development documentation for ‘strsplit1’”, which reminds that you are basically previewing draft documentation. That is, this documentation is present in your package’s source, but is not yet present in an installed package. In fact, we haven’t installed regexcite yet, but we will soon. If ?strsplit1 doesn’t work for you, you may need to call load_all() first, then try again.\nNote also that your package’s documentation won’t be properly wired up until it has been formally built and installed. This polishes off niceties like the links between help files and the creation of a package index.\n\n1.12.1 NAMESPACE changes\nIn addition to converting strsplit1()’s special comment into man/strsplit1.Rd, the call to document() updates the NAMESPACE file, based on @export tags found in roxygen comments. Open NAMESPACE for inspection. The contents should be:\n\n\n# Generated by roxygen2: do not edit by hand\n\nexport(strsplit1)\n\nThe export directive in NAMESPACE is what makes strsplit1() available to a user after attaching regexcite via library(regexcite). Just as it is entirely possible to author .Rd files “by hand”, you can manage NAMESPACE explicitly yourself. But we choose to delegate this to devtools (and roxygen2).\n\ngit_add(c(\"NAMESPACE\", path(\"man\", \"strsplit1.Rd\")))\n#&gt; # A tibble: 3 × 3\n#&gt;   file             status   staged\n#&gt;   &lt;chr&gt;            &lt;chr&gt;    &lt;lgl&gt; \n#&gt; 1 DESCRIPTION      modified FALSE \n#&gt; 2 man/strsplit1.Rd new      TRUE  \n#&gt; 3 NAMESPACE        modified TRUE\ngit_commit(\"Run document()\")\n#&gt; [1] \"2eadd186e804934ee33129ed4d583ddec5571f09\""
  },
  {
    "objectID": "whole-game.html#再次-check",
    "href": "whole-game.html#再次-check",
    "title": "1  整体流程",
    "section": "\n1.13 再次 check()\n",
    "text": "1.13 再次 check()\n\n现在，regexcite 应该可以立刻并将永远干净地通过 R CMD check：0 错误，0 警告，0 注释。\n\ncheck()\n\n\n── R CMD check results ─────────────────── regexcite 0.0.0.9000 ────\nDuration: 1m 19.3s\n\n0 errors ✔ | 0 warnings ✔ | 0 notes ✔"
  },
  {
    "objectID": "whole-game.html#install",
    "href": "whole-game.html#install",
    "title": "1  整体流程",
    "section": "\n1.14 install()\n",
    "text": "1.14 install()\n\nNow that we know we have a minimum viable product, let’s install the regexcite package into your library via install():\n\ninstall()\n\n\n── R CMD build ─────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\xiaob\\AppData\\Local\\Temp\\RtmpAnNRAK\\regexcite/DESCRIPTION' ... OK\n* preparing 'regexcite':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'regexcite_0.0.0.9000.tar.gz'\nRunning \"D:/R/R-4.2.1/bin/x64/Rcmd.exe\" INSTALL \\\n  \"C:\\Users\\xiaob\\AppData\\Local\\Temp\\RtmpAnNRAK/regexcite_0.0.0.9000.tar.gz\" \\\n  --install-tests \n* installing to library 'D:/R/R-4.2.1/library'\n* installing *source* package 'regexcite' ...\n** using staged installation\n** R\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (regexcite)\n\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio exposes similar functionality in the Build menu and in the Build pane via Install and Restart, and in keyboard shortcuts Ctrl + Shift + B (Windows & Linux) or Cmd + Shift + B (macOS).\n\n\nAfter installation is complete, we can attach and use regexcite like any other package. Let’s revisit our small example from the top. This is also a good time to restart your R session and ensure you have a clean workspace.\n\nlibrary(regexcite)\n\nx &lt;- \"alfa,bravo,charlie,delta\"\nstrsplit1(x, split = \",\")\n#&gt; [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\n\nSuccess!"
  },
  {
    "objectID": "whole-game.html#use_testthat",
    "href": "whole-game.html#use_testthat",
    "title": "1  整体流程",
    "section": "\n1.15 use_testthat()\n",
    "text": "1.15 use_testthat()\n\nWe’ve tested strsplit1() informally, in a single example. We can formalize this as a unit test. This means we express a concrete expectation about the correct strsplit1() result for a specific input.\nFirst, we declare our intent to write unit tests and to use the testthat package for this, via use_testthat():\n\nuse_testthat()\n#&gt; ✔ Adding 'testthat' to Suggests field in DESCRIPTION\n#&gt; ✔ Setting Config/testthat/edition field in DESCRIPTION to '3'\n#&gt; ✔ Creating 'tests/testthat/'\n#&gt; ✔ Writing 'tests/testthat.R'\n#&gt; • Call `use_test()` to initialize a basic test file and open it for editing.\n\nThis initializes the unit testing machinery for your package. It adds Suggests: testthat to DESCRIPTION, creates the directory tests/testthat/, and adds the script tests/testthat.R. You’ll notice that testthat is probably added with a minimum version of 3.0.0 and a second DESCRIPTION field, Config/testthat/edition: 3. We’ll talk more about those details in ?sec-testing-basics.\n\ngit_add(c(\"DESCRIPTION\", path(\"tests\", \"testthat.R\")))\n#&gt; # A tibble: 2 × 3\n#&gt;   file             status   staged\n#&gt;   &lt;chr&gt;            &lt;chr&gt;    &lt;lgl&gt; \n#&gt; 1 DESCRIPTION      modified TRUE  \n#&gt; 2 tests/testthat.R new      TRUE\ngit_commit(\"Add testing infrastructure\")\n#&gt; [1] \"9dd9dbceec3e5fc2a9fe72a6dab030e1163314e8\"\n\nHowever, it’s still up to YOU to write the actual tests!\nThe helper use_test() opens and/or creates a test file. You can provide the file’s basename or, if you are editing the relevant source file in RStudio, it will be automatically generated. For many of you, if R/strsplit1.R is the active file in RStudio, you can just call use_test(). However, since this book is built non-interactively, we must provide the basename explicitly:\n\nuse_test(\"strsplit1\")\n#&gt; ✔ Writing 'tests/testthat/test-strsplit1.R'\n#&gt; • Edit 'tests/testthat/test-strsplit1.R'\n\nThis creates the file tests/testthat/test-strsplit1.R. If it had already existed, use_test() would have just opened it. You will notice that there is an example test in the newly created file - delete that code and replace it with this content:\n\ntest_path &lt;- path(\"tests\", \"testthat\", \"test-strsplit1.R\")\n\n\ntest_that(\"strsplit1() splits a string\", {\n  expect_equal(strsplit1(\"a,b,c\", split = \",\"), c(\"a\", \"b\", \"c\"))\n})\n\nThis tests that strsplit1() gives the expected result when splitting a string.\n\ngit_add(test_path)\n#&gt; # A tibble: 1 × 3\n#&gt;   file                            status staged\n#&gt;   &lt;chr&gt;                           &lt;chr&gt;  &lt;lgl&gt; \n#&gt; 1 tests/testthat/test-strsplit1.R new    TRUE\ngit_commit(\"Test strsplit1()\")\n#&gt; [1] \"43b24726d32ee204e83746564e907154cba15afc\"\n\nRun this test interactively, as you will when you write your own. If test_that() or strsplit1() can’t be found, that suggests that you probably need to call load_all().\nGoing forward, your tests will mostly run en masse and at arm’s length via test():\n\n\ntest()\n#&gt; ℹ Testing regexcite\n#&gt; ✔ | F W S  OK | Context\n#&gt; \n#&gt; ⠏ |         0 | strsplit1                                           \n#&gt; ✔ |         1 | strsplit1\n#&gt; \n#&gt; ══ Results ═════════════════════════════════════════════════════════\n#&gt; [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio exposes test() in the Build menu, in the Build pane via More &gt; Test package, and in keyboard shortcuts Ctrl + Shift + T (Windows & Linux) or Cmd + Shift + T (macOS).\n\n\nYour tests are also run whenever you check() the package. In this way, you basically augment the standard checks with some of your own, that are specific to your package. It is a good idea to use the covr package to track what proportion of your package’s source code is exercised by the tests. More details can be found in ?sec-testing-basics."
  },
  {
    "objectID": "whole-game.html#use_package",
    "href": "whole-game.html#use_package",
    "title": "1  整体流程",
    "section": "\n1.16 use_package()\n",
    "text": "1.16 use_package()\n\nYou will inevitably want to use a function from another package in your own package. We will need to use package-specific methods for declaring the other packages we need (i.e. our dependencies) and for using these packages in ours. If you plan to submit a package to CRAN, note that this even applies to functions in packages that you think of as “always available”, such as stats::median() or utils::head().\nOne common dilemma when using R’s regular expression functions is uncertainty about whether to request perl = TRUE or perl = FALSE. And then there are often, but not always, other arguments that alter how patterns are matched, such as fixed, ignore.case, and invert. It can be hard to keep track of which functions use which arguments and how the arguments interact, so many users never get to the point where they retain these details without rereading the docs.\nThe stringr package “provides a cohesive set of functions designed to make working with strings as easy as possible”. In particular, stringr uses one regular expression system everywhere (ICU regular expressions) and uses the same interface in every function for controlling matching behaviors, such as case sensitivity. Some people find this easier to internalize and program around. Let’s imagine you decide you’d rather build regexcite based on stringr (and stringi) than base R’s regular expression functions.\nFirst, declare your general intent to use some functions from the stringr namespace with use_package():\n\nuse_package(\"stringr\")\n#&gt; ✔ Adding 'stringr' to Imports field in DESCRIPTION\n#&gt; • Refer to functions with `stringr::fun()`\n\nThis adds the stringr package to the Imports field of DESCRIPTION. And that is all it does.\n\ngit_add(\"DESCRIPTION\")\n#&gt; # A tibble: 1 × 3\n#&gt;   file        status   staged\n#&gt;   &lt;chr&gt;       &lt;chr&gt;    &lt;lgl&gt; \n#&gt; 1 DESCRIPTION modified TRUE\ngit_commit(\"Import stringr\")\n#&gt; [1] \"2cf7675fd92ade413bbdaa92a77997c98b05fef8\"\n\nLet’s revisit strsplit1() to make it more stringr-like. Here’s a new take on it2:\n\nstr_split_one &lt;- function(string, pattern, n = Inf) {\n  stopifnot(is.character(string), length(string) &lt;= 1)\n  if (length(string) == 1) {\n    stringr::str_split(string = string, pattern = pattern, n = n)[[1]]\n  } else {\n    character()\n  }\n}\n\nNotice that we:\n\nRename the function to str_split_one(), to signal that that is a wrapper around stringr::str_split().\nAdopt the argument names from stringr::str_split(). Now we have string and pattern (and n), instead of x and split.\nIntroduce a bit of argument checking and edge case handling. This is unrelated to the switch to stringr and would be equally beneficial in the version built on strsplit().\nUse the package::function() form when calling stringr::str_split(). This specifies that we want to call the str_split() function from the stringr namespace. There is more than one way to call a function from another package and the one we endorse here is explained fully in ?sec-dependencies-in-practice.\n\nWhere should we write this new function definition? If we want to keep following the convention where we name the .R file after the function it defines, we now need to do some fiddly file shuffling. Because this comes up fairly often in real life, we have the rename_files() function, which choreographs the renaming of a file in R/ and its associated companion files below test/.\n\nrename_files(\"strsplit1\", \"str_split_one\")\n#&gt; ✔ Moving 'R/strsplit1.R' to 'R/str_split_one.R'\n#&gt; ✔ Moving 'tests/testthat/test-strsplit1.R' to 'tests/testthat/test-str_split_one.R'\n\nRemember: the file name work is purely aspirational. We still need to update the contents of these files!\nHere are the updated contents of R/str_split_one.R. In addition to changing the function definition, we’ve also updated the roxygen header to reflect the new arguments and to include examples that show off the stringr features.\n\n#' Split a string\n#'\n#' @param string A character vector with, at most, one element.\n#' @inheritParams stringr::str_split\n#'\n#' @return A character vector.\n#' @export\n#'\n#' @examples\n#' x &lt;- \"alfa,bravo,charlie,delta\"\n#' str_split_one(x, pattern = \",\")\n#' str_split_one(x, pattern = \",\", n = 2)\n#'\n#' y &lt;- \"192.168.0.1\"\n#' str_split_one(y, pattern = stringr::fixed(\".\"))\nstr_split_one &lt;- function(string, pattern, n = Inf) {\n  stopifnot(is.character(string), length(string) &lt;= 1)\n  if (length(string) == 1) {\n    stringr::str_split(string = string, pattern = pattern, n = n)[[1]]\n  } else {\n    character()\n  }\n}\n\nDon’t forget to also update the test file!\nHere are the updated contents of tests/testthat/test-str_split_one.R. In addition to the change in the function’s name and arguments, we’ve added a couple more tests.\n\ntest_that(\"str_split_one() splits a string\", {\n  expect_equal(str_split_one(\"a,b,c\", \",\"), c(\"a\", \"b\", \"c\"))\n})\n\ntest_that(\"str_split_one() errors if input length &gt; 1\", {\n  expect_error(str_split_one(c(\"a,b\",\"c,d\"), \",\"))\n})\n\ntest_that(\"str_split_one() exposes features of stringr::str_split()\", {\n  expect_equal(str_split_one(\"a,b,c\", \",\", n = 2), c(\"a\", \"b,c\"))\n  expect_equal(str_split_one(\"a.b\", stringr::fixed(\".\")), c(\"a\", \"b\"))\n})\n\nBefore we take the new str_split_one() out for a test drive, we need to call document(). Why? Remember that document() does two main jobs:\n\nConverts our roxygen comments into proper R documentation.\n(Re)generates NAMESPACE.\n\nThe second job is especially important here, since we will no longer export strsplit1() and we will newly export str_split_one(). Don’t be dismayed by the warning about \"Objects listed as exports, but not present in namespace: strsplit1\". That always happens when you remove something from the namespace.\n\ndocument()\n#&gt; ℹ Updating regexcite documentation\n#&gt; ℹ Loading regexcite\n#&gt; Warning: Objects listed as exports, but not present in namespace:\n#&gt; • strsplit1\n#&gt; Writing 'NAMESPACE'\n#&gt; Writing 'str_split_one.Rd'\n#&gt; Deleting 'strsplit1.Rd'\n\nTry out the new str_split_one() function by simulating package installation via load_all():\n\nload_all()\n#&gt; ℹ Loading regexcite\nstr_split_one(\"a, b, c\", pattern = \", \")\n#&gt; [1] \"a\" \"b\" \"c\"\n\n\ngit_add(c(\n  \"NAMESPACE\",\n  path(\"man\", c(\"str_split_one.Rd\", \"strsplit1.Rd\")),\n  path(\"R\", c(\"str_split_one.R\", \"strsplit1.R\")),\n  path(\"tests\", \"testthat\", c(\"test-str_split_one.R\", \"test-strsplit1.R\"))\n))\n#&gt; # A tibble: 7 × 3\n#&gt;   file                                status   staged\n#&gt;   &lt;chr&gt;                               &lt;chr&gt;    &lt;lgl&gt; \n#&gt; 1 man/str_split_one.Rd                new      TRUE  \n#&gt; 2 man/strsplit1.Rd                    deleted  TRUE  \n#&gt; 3 NAMESPACE                           modified TRUE  \n#&gt; 4 R/str_split_one.R                   new      TRUE  \n#&gt; 5 R/strsplit1.R                       deleted  TRUE  \n#&gt; 6 tests/testthat/test-str_split_one.R new      TRUE  \n#&gt; 7 tests/testthat/test-strsplit1.R     deleted  TRUE\ngit_commit(\"Switch to str_split_one()\")\n#&gt; [1] \"c89536a80f8e2d584d82fd12f38037030bf56fc4\""
  },
  {
    "objectID": "whole-game.html#use_github",
    "href": "whole-game.html#use_github",
    "title": "1  整体流程",
    "section": "\n1.17 use_github()\n",
    "text": "1.17 use_github()\n\n在 regexcite 包开发过程中，你已经看见我们提交了许多次代码。 你可以在 https://github.com/jennybc/regexcite 上查看这个仓库的提交历史。 我们使用版本控制并公开开发过程，这意味着你能够检查 regexcite 在每个开发阶段的源码状态。 通过查看所谓的文件差异，你可以清楚地看到每个 devtools 帮助函数是如何修改构成 regexcite 包的源文件。\n如何将本地的 regexcite 包和 Git 存储库连接到 GitHub 上的配套存储库？ 这里有三种方法：\n\n\nuse_github() 是我们推荐长期使用的一个帮助函数。我们不会在这里进行演示，因为它需要在你的终端上进行一些凭据设置。我们也不想每次构建本书时都要推倒并重建放在公开储存库中的 regexcite 包。\n首先设置 GitHub 远程仓库！这听起来违反直觉，但把你的工作放在 GitHub 上的最简单的方法就是在 GitHub 初始化，然后使用 RStudio 开始在一个同步的本地副本中工作。这种方法在 Happy Git’s workflows New project, GitHub first 和 Existing project, GitHub first 中都有描述\n命令行 Git (Command Line Git) 总是可以用来在事后添加远程存储库。这在 Happy Git workflow Existing project, GitHub last 中进行了描述。\n\n这些方法中的任何一种都会将你本地的 regexcite 项目连接到公共或私有的 GitHub 仓库，你可以使用 RStudio 内置的 Git 客户端来推送 (push) 或拉取 (pull) 它。 在 ?sec-sw-dev-practices 中，我们会详细说明为什版本控制（例如 Git），特别是托管版本控制（例如 GitHub）值得合并到软件包开发过程中。"
  },
  {
    "objectID": "whole-game.html#use_readme_rmd",
    "href": "whole-game.html#use_readme_rmd",
    "title": "1  整体流程",
    "section": "\n1.18 use_readme_rmd()\n",
    "text": "1.18 use_readme_rmd()\n\n现在你的软件包已经在 GitHub 上了，那么 README.md 文件就变得很重要。 它是程序包的主页和欢迎界面，至少在你决定为它添加网站（详见 ?sec-website）、添加主题文档（详见 ?sec-vignettes）或将其提交到 CRAN（详见 ?sec-release）前是这样的。\nuse_readme_rmd() 函数的作用是初始化一个基础且可执行的 README.Rmd 以便你编辑：\n\nuse_readme_rmd()\n#&gt; ✔ Writing 'README.Rmd'\n#&gt; ✔ Adding '^README\\\\.Rmd$' to '.Rbuildignore'\n#&gt; • Update 'README.Rmd' to include installation instructions.\n#&gt; ✔ Writing '.git/hooks/pre-commit'\n\n除了创建 README.Rmd之外，它还会在 .Rbuildignore 中添加一些行，并创建一个 Git pre-commit hook 来帮助你在 README.Rmd 和 README.md 之间保持同步。\nREADME.Rmd 已经包含了以下几个部分，提示你完成以下几个部分的内容：\n\n描述软件包的用途。\n提供安装说明。如果在调用 use_readme_rmd() 时检测到了 GitHub 远程仓库，该部分将预先填写有关如何从 GitHub 安装的说明。\n展示一些使用示例。\n\n如何填充这个内容框架？ 可以自由地从 DESCRIPTION 文件和任何正式或非正式的测试或示例中复制内容。 任何东西都比没有好。 这很有帮助，因为人们可能不会安装你的软件包并逐个查看帮助文件来学习如何使用它。\n我们喜欢用 R Markdown 写 README 文件，这样它可以体现实际的用法。 包含实时代码还可以降低 README 文件过时和与实际软件包不同步的可能性。\n要进行你自己的编辑，如果 RStudio 还没有这样做，请打开 README.Rmd 进行编辑。3 确保它显示了 str_split_one() 的一些用法。\n我们使用的 README.Rmd 在这里：README.Rmd 以下是该文件的内容：\n\nfile_copy(\n  path(owd, \"fixtures\", \"regexcite-README.Rmd\"),\n  \"README.Rmd\",\n  overwrite = TRUE\n)\n\n\n---\noutput: github_document\n---\n\n&lt;!-- README.md is generated from README.Rmd. Please edit that file --&gt;\n\n```{r, include = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#&gt;\",\n  fig.path = \"man/figures/README-\",\n  out.width = \"100%\"\n)\n```\n\n**NOTE: This is a toy package created for expository purposes, for the second edition of [R Packages](https://r-pkgs.org). It is not meant to actually be useful. If you want a package for factor handling, please see [stringr](https://stringr.tidyverse.org), [stringi](https://stringi.gagolewski.com/),\n[rex](https://cran.r-project.org/package=rex), and\n[rematch2](https://cran.r-project.org/package=rematch2).**\n\n# regexcite\n\n&lt;!-- badges: start --&gt;\n&lt;!-- badges: end --&gt;\n\nThe goal of regexcite is to make regular expressions more exciting!\nIt provides convenience functions to make some common tasks with string manipulation and regular expressions a bit easier.\n\n## Installation\n\nYou can install the development version of regexcite from [GitHub](https://github.com/) with:\n      \n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"jennybc/regexcite\")\n```\n\n## Usage\n\nA fairly common task when dealing with strings is the need to split a single string into many parts.\nThis is what `base::strplit()` and `stringr::str_split()` do.\n\n```{r}\n(x &lt;- \"alfa,bravo,charlie,delta\")\nstrsplit(x, split = \",\")\nstringr::str_split(x, pattern = \",\")\n```\n\nNotice how the return value is a **list** of length one, where the first element holds the character vector of parts.\nOften the shape of this output is inconvenient, i.e. we want the un-listed version.\n\nThat's exactly what `regexcite::str_split_one()` does.\n\n```{r}\nlibrary(regexcite)\n\nstr_split_one(x, pattern = \",\")\n```\n\nUse `str_split_one()` when the input is known to be a single string.\nFor safety, it will error if its input has length greater than one.\n\n`str_split_one()` is built on `stringr::str_split()`, so you can use its `n` argument and stringr's general interface for describing the `pattern` to be matched.\n\n```{r}\nstr_split_one(x, pattern = \",\", n = 2)\n\ny &lt;- \"192.168.0.1\"\nstr_split_one(y, pattern = stringr::fixed(\".\"))\n```\n\n别忘了渲染生成 README.md！ 如果你尝试提交 README.Rmd 而不是 README.md，或者 README.md 似乎已经过期时，pre-commit hook 应该会提醒你。\n使用 build_readme() 渲染生成 README.Rmd 文件是最好的方法，因为它会确保使用你的软件包的最新版本进行渲染，即它会从当前源代码安装一个临时副本来进行渲染。\n\nbuild_readme()\n#&gt; ℹ Installing regexcite in temporary library\n#&gt; ℹ Building\n#&gt;   'C:/Users/xiaob/AppData/Local/Temp/RtmpAnNRAK/regexcite/README.Rmd'\n\n你可以简单地通过访问 visiting regexcite on GitHub 来查看渲染好的 README.md。\n最后，别忘了做最后一次提交。 如果你使用 GitHub，还需要推送到远程仓库。\n\ngit_add(c(\".Rbuildignore\", \"README.Rmd\", \"README.md\"))\n#&gt; # A tibble: 3 × 3\n#&gt;   file          status   staged\n#&gt;   &lt;chr&gt;         &lt;chr&gt;    &lt;lgl&gt; \n#&gt; 1 .Rbuildignore modified TRUE  \n#&gt; 2 README.md     new      TRUE  \n#&gt; 3 README.Rmd    new      TRUE\ngit_commit(\"Write README.Rmd and render\")\n#&gt; [1] \"4cda6a47210ee4597a3c4c6810b465953a3c9f1e\""
  },
  {
    "objectID": "whole-game.html#最后一步check-以及-install",
    "href": "whole-game.html#最后一步check-以及-install",
    "title": "1  整体流程",
    "section": "\n1.19 最后一步：check() 以及 install()\n",
    "text": "1.19 最后一步：check() 以及 install()\n\n让我们再次运行 check() 以确保软件包一切正常。\n\ncheck()\n\n\n── R CMD check results ─────────────────── regexcite 0.0.0.9000 ────\nDuration: 1m 12.7s\n\n0 errors ✔ | 0 warnings ✔ | 0 notes ✔\n\nregexcite 应该没有错误、警告或注释信息。 现在是重新构建和正确安装它的最好时机。 庆祝一下！\n\ninstall()\n\n\n── R CMD build ─────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\xiaob\\AppData\\Local\\Temp\\RtmpAnNRAK\\regexcite/DESCRIPTION' ... OK\n* preparing 'regexcite':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'regexcite_0.0.0.9000.tar.gz'\nRunning \"D:/R/R-4.2.1/bin/x64/Rcmd.exe\" INSTALL \\\n  \"C:\\Users\\xiaob\\AppData\\Local\\Temp\\RtmpAnNRAK/regexcite_0.0.0.9000.tar.gz\" \\\n  --install-tests \n* installing to library 'D:/R/R-4.2.1/library'\n* installing *source* package 'regexcite' ...\n** using staged installation\n** R\n** tests\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (regexcite)\n\n请随意访问 GitHub 上的 regexcite 包，它正是在这里开发的。 提交历史反映了每个单独的步骤，因此可以使用文件差异来查看随着包的发展，哪些文件被添加和修改。 本书的其余部分将更详细地介绍你在这里看到的每一个步骤以及更多内容。\n\npkgload::unload(\"regexcite\")\nremove.packages(\"regexcite\")\n#&gt; Removing package from 'D:/R/R-4.2.1/library'\n#&gt; (as 'lib' is unspecified)\n\n# being kind to someone working interactively and locally\nif (is.null(getOption(\"knitr.in.progress\"))) {\n  withr::deferred_run()\n}\n\nknitr::opts_knit$set(root.dir = owd)\n\n\ngetwd()\n#&gt; [1] \"F:/Projects/R/Books/R Packages/R-Packages-zh-CN\""
  },
  {
    "objectID": "whole-game.html#回顾",
    "href": "whole-game.html#回顾",
    "title": "1  整体流程",
    "section": "\n1.20 回顾",
    "text": "1.20 回顾\n本章旨在让你了解典型的软件包卡覅工作流程，可以总结为 Figure 1.1 的流程图。 除了 GitHub Actions 之外，你在图中看到的所有内容都在本章的内容中进行了介绍，而 GitHub Actions 将在 ?sec-sw-dev-practices-gha 详细介绍。\n\n\n\n\nFigure 1.1: The devtools package development workflow.\n\n\n\n下面将回顾本章介绍的关键函数，并按照它们在开发过程中所扮演的角色进行大致的组织。\n这些函数可以对软件包的各个部分进行设置，通常在每个包中只调用一次：\n\ncreate_package()\nuse_git()\nuse_mit_license()\nuse_testthat()\nuse_github()\nuse_readme_rmd()\n\n当你添加函数和测试或获取依赖时，你会定期调用这些函数：\n\nuse_r()\nuse_test()\nuse_package()\n\n在开发过程中，你会时常调用这些函数：\n\nload_all()\ndocument()\ntest()\ncheck()"
  },
  {
    "objectID": "whole-game.html#footnotes",
    "href": "whole-game.html#footnotes",
    "title": "1  整体流程",
    "section": "",
    "text": "译者注：这里的“obvious”我并没有理解其确切含义，也许指的是只有 usethis 会显示加载信息，所以最为显眼。↩︎\nRecall that this example was so inspiring that it’s now a real function in the stringr package: `stringr::str_split_1()`!↩︎\nTo make your own edits, if RStudio has not already done so, open README.Rmd for editing.↩︎"
  }
]