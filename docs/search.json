[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Packages (2e)",
    "section": "",
    "text": "欢迎！\n欢迎来到由 Hadley Wickham 和 Jennifer Bryan 等撰写的第二版 R Package 的在线版本。 软件包（Packages）是可复用 R 代码的基本单位。 它们包含可复用的 R 函数、描述如何使用这些函数的文档以及示例数据。 在本书中，你将学习如何将你的代码变成别人能够轻松下载和使用的软件包。 刚开始编写软件包可能会让人感觉无从下手。 因此我们从基础的内容开始，逐渐提升我们的开发水平。 你的第一个版本是否完美并不重要，只要下一版本变得更完善就好。\n本网站在 CC BY-NC-ND 4.0 许可下是并将永远是免费的。 如果你想要一本实体书，你可以在 Amazon 上订购。"
  },
  {
    "objectID": "translator-preface.html#翻译说明",
    "href": "translator-preface.html#翻译说明",
    "title": "翻译与排版说明",
    "section": "翻译说明",
    "text": "翻译说明\n将英文技术书籍翻译为中文是个痛苦的过程，难以避免地会遇到一些没有公认翻译方式的英文词汇，或者是有公认的中文翻译词汇，但该词过于口语化，或者不能很好地反映英文词汇的意思。这些英文词汇以及它们在书中的对应中文词汇将在下方列出，欢迎大家批评。\n\n\n英文词汇\n中文翻译\n原因\n\n\n\npackage\n软件包，程序包，包\nr packages 是一组用来完成特定任务的程序，作为 R 的补充，符合 Software Package 的定义。“包”作为“软件包”的简称使用，在翻译中可能同时使用“软件包”和“包”两种称呼。\n\n\nconscious uncoupling\n有意识地解耦\n这个词最初用于描述相对友好的离婚1，这里使用“有意识地”而非“相对友好的”以突出该决定是经过慎重考虑和精心设计的。\n\n\nThe Whole Game\n整体流程\n软件包构建的一个 toy example，这里采用意译。\n\n\nThe package within\n软件包中的奥秘，包中奥秘\n直译过来是“软件包的内部”，感觉过于平淡，使用更吸引人的翻译。\n\n\ncompelling\n令人信服的\n\n(intro?) 中 “One compelling reason …” 应该想要表达开发 R 包能带来一个明显的优势，即方便分享自己的代码，这一优势具有强烈的推动力和说服力，让你想要开发 R 包。2\n\n\n\nsection\n章节，段落\n本书中的 section 多用于指代层级低于 “chapter” 的文段，有的是小节，也有的是一个段落。\n\n\nespouse\n宣扬，倡导\n直译为“支持”，从语句通顺的角度翻译为“宣扬”。\n\n\nVignette\n主题文档\n原意是“小插曲”、“短文”、“小品文”等，在 R 中 Vignette 是对整个包或包的某个功能主题进行概括性的介绍，这里突出其内容特性，强调其内容为贡功能“主题”，不强调其独立性和概括性。\n\n\nShunryu Suzuki\n铃木俊隆\n人名的中文翻译依据是 Wikipedia\n\n\n\ntoy package\n示例软件包\n直译过来是“玩具一般的软件包”，表示其各部分相比于真实软件包来说都较为简单，但包含了真实软件包的必要的部分，用于作为一个实例展示开发流程。\n\n\ncommit history\n提交历史\nGitHub 或 Git 中列出的 commit 历史。\n\n\npane, tab\n窗格，选项卡\n窗格是对应用程序窗口的一个分割，而选项卡是在窗格中展示的，可以切换不同的选项卡，窗格中将会展示对应的内容。\n\n\npull, push\n拉取，推送\nGit 远程仓库操作的常用翻译。\n\n\nbehind-the-scenes files\n临时文件\n直译是“幕后文件”，通常指的是一些程序在运行时自动生成的文件，这些文件通常不需要用户干预或直接操作，而是在程序或工具的运行过程中被使用或调用，并且没有用处后会被程序自动删除，因此翻译为更通俗的“临时文件”。\n\n\nhelper; helper function\n辅助函数\n所谓的“helper”是从函数和包的功能上进行描述的，它多指 devtools 包中的函数，可以辅助使用者进行软件包开发等工作。\n\n\nexpose\n提供\n我并不是很满意这个翻译。expose 是指 devtools 提供了来自构成它的其他软件包的函数，类似于“暴露接口”，但“暴露”一词有偏向被动、被揭示的意思，此处是主动提供。\n\n\nqualified call\n限定调用\n在 R 中是形如 pkg::foo() 的形式，指不附加包而是调用函数时添加限定符 pkg::，指查找路径时将查找范围限定在 pkg 的命名空间中。"
  },
  {
    "objectID": "translator-preface.html#排版说明",
    "href": "translator-preface.html#排版说明",
    "title": "翻译与排版说明",
    "section": "排版说明",
    "text": "排版说明\n由于书中不可避免地会同时出现中文和英文，因此原书的排版并不完全适用于中文翻译版。为了在尊重原书的基础上使页面变得美观，约定如下排版要求：\n\n英文单词、标点符号和数字各具有 1 个前导空格和 1 个后导空格。例如：“软件包的名称是 bookdown 吗。”。\n\n英文单词、标点和数字的一侧为标点符号时，该侧无空格。例如：“使用 Leading and Trailing Spaces。”。\n\n\n需要展示并链接 URL 时，将其放入尖括号内 &lt;&gt;。\n小括号内的文本包含中文时，使用中文小括号 （）；如果全是英文文本，则使用英文小括号 ()，并各具有 1 个前导和后导空格。\n书中某些操作中带有选项、菜单等名称，在实际操作时不具有中文翻译，此时列出该单词的中文翻译，后跟括号，括号内展示原英文单词。中文翻译便于读者查询相关资料，原英文单词便于按图索骥地进行操作。"
  },
  {
    "objectID": "translator-preface.html#翻译进度",
    "href": "translator-preface.html#翻译进度",
    "title": "翻译与排版说明",
    "section": "翻译进度",
    "text": "翻译进度\n常言道，人生未填之坑十之八九。笔者学业繁忙，只能利用空闲时间翻译本书。因此在这里记录一下翻译进度，欢迎加入本项目提交 Pull Request。\n符号说明：\n\n✅：已完成\n⚙️：进行中\n📄：计划中\n\n\n\n章节\n是否翻译\n是否润色\n\n\n\nwelcome\n✅\n✅\n\n\nPreface\n✅\n✅\n\n\nIntroduction\n✅\n⚙️\n\n\nThe Whole Game\n⚙️\n\n\n\nSystem setup\n✅\n⚙️\n\n\nPackage structure and state\n\n\n\n\nFundamental development workflows\n\n\n\n\nThe package within\n\n\n\n\nR Code\n\n\n\n\nData\n\n\n\n\nOther components\n\n\n\n\nDESCRIPTION\n\n\n\n\nDependencies: Mindset and Background\n\n\n\n\nDependencies: In Practice\n\n\n\n\nLicensing\n\n\n\n\nTesting basics\n\n\n\n\nDesigning your test suite\n\n\n\n\nAdvanced testing techniques\n\n\n\n\nFunction documentation\n\n\n\n\nVignettes\n\n\n\n\nOther markdown files\n\n\n\n\nWebsite\n\n\n\n\nSoftware development practices\n\n\n\n\nLifecycle\n\n\n\n\nReleasing to CRAN\n\n\n\n\nReferences\n\n\n\n\nAppendix A R CND check"
  },
  {
    "objectID": "translator-preface.html#footnotes",
    "href": "translator-preface.html#footnotes",
    "title": "翻译与排版说明",
    "section": "",
    "text": "见 https://en.wikipedia.org/wiki/Conscious_uncoupling↩︎\n译者注：需要再想清楚作者想表达的意思，然后润色↩︎"
  },
  {
    "objectID": "preface.html#致谢",
    "href": "preface.html#致谢",
    "title": "前言",
    "section": "致谢",
    "text": "致谢\n自从 R Packages 第一版发布以来，支持本书描述的工作流的软件包已经有了广泛的发展。 最初的三个软件包 devtools, roxygen2 和 testthat 已经扩展到由 devtools “有意识地解耦”所创建的许多软件包，就如 Section 2.2 所描述的那样。 由于它们具有共同的根源 devtools，因此这些软件包多数源自 Hadley Wickham (HW)。 还有许多其他重要的贡献者，其中许多人现在是软件包的维护者：\n\ndevtools: HW, Winston Chang, Jim Hester (maintainer, &gt;= v1.13.5), Jennifer Bryan (maintainer &gt;= v2.4.3)\nusethis: HW, Jennifer Bryan (maintainer &gt;= v1.5.0), Malcolm Barrett\nroxygen2: HW (maintainer), Peter Danenburg, Manuel Eugster\n\ntestthat: HW (maintainer)\ndesc: Gábor Csárdi (maintainer), Kirill Müller, Jim Hester\n\npkgbuild: HW, Jim Hester, Gábor Csárdi (maintainer &gt;= v1.2.1)\npkgload: HW, Jim Hester, Winston Chang, Lionel Henry (maintainer &gt;= v1.2.4)\nrcmdcheck: Gábor Csárdi (maintainer)\nremotes: HW, Jim Hester, Gábor Csárdi (maintainer), Winston Chang, Martin Morgan, Dan Tenenbaum\n\nrevdepcheck: HW, Gábor Csárdi (maintainer)\nsessioninfo: HW, Gábor Csárdi (maintainer), Winston Chang, Robert Flight, Kirill Müller, Jim Hester\n\n\n这本书是公开编写和修订的，它是社区努力的成果：许多人阅读草稿、修正错别字 、提出改进意见以及贡献内容。 没有这些贡献者，这本书不会像现在这样好，我们对他们的帮助深表感谢。 我们要感谢我们在 Posit 的同事，特别是 tidyverse 团队，他们一直很乐意讨论软件包的开发实践。 另外，我们出色的技术审查员团队提出的建议也极大地改进了本书：Malcolm Barrett, Laura DeCicco, Zhian Kamvar, Tom Mock 和 Maëlle Salmon。\n#&gt; Warning: package 'tidyverse' was built under R version 4.2.3\n#&gt; Warning: package 'ggplot2' was built under R version 4.2.3\n#&gt; Warning: package 'tibble' was built under R version 4.2.3\n#&gt; Warning: package 'tidyr' was built under R version 4.2.3\n#&gt; Warning: package 'readr' was built under R version 4.2.3\n#&gt; Warning: package 'purrr' was built under R version 4.2.3\n#&gt; Warning: package 'dplyr' was built under R version 4.2.3\n#&gt; Warning: package 'stringr' was built under R version 4.2.3\n#&gt; Warning: package 'forcats' was built under R version 4.2.3\n#&gt; Warning: package 'lubridate' was built under R version 4.2.3\n#&gt; ── Attaching core tidyverse packages ──────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n#&gt; Rows: 410 Columns: 3\n#&gt; ── Column specification ────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr (3): user, name, maybe_name\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nThanks to all contributors the the first and second editions (in alphabetical order by GitHub username):\n@aaelony, @aaronwolen (Aaron Wolen), @ablejec (Andrej Blejec), @adamcduncan (Adam Duncan), @adessy, @adrtod (Adrien Todeschini), @aghaynes (Alan Haynes), @agrueneberg (Alexander Grueneberg), @alejandrohagan (Alejandro Hagan), @alesantuz (Ale Santuz), @alexandrehsd (Alexandre Henrique), @alexholcombe (Alex O. Holcombe), @alexpghayes (alex hayes), @alforj (Justin Alford), @almartin82 (Andrew Martin), @aluxh (Alex Ho), @AmelZulji, @andreaphsz (Andrea Cantieni), @andrewdolman (Andrew Dolman), @andrewpbray (Andrew Bray), @AndrewsOR (John Andrews), @andycraig (Andrew Craig), @angela-li (Angela Li), @anjalisilva (Anjali Silva), @apomatix (Brad Friedman), @apreshill (Alison Presmanes Hill), @arashHaratian (Arash), @arilamstein (Ari Lamstein), @arneschillert (Arne Schillert), @arni-magnusson (Arni Magnusson), @asadow (Adam Sadowski), @ateucher (Andy Teucher), @avisser (Andy Visser), @ayormark (Adam Yormark), @azzaea (Azza Ahmed), @batpigandme (Mara Averick), @bclipp (Brian L), @beevabeeva, @behrman (Bill Behrman), @benmarwick (Ben Marwick), @BernhardKonrad (Bernhard Konrad), @bgreenwell (Brandon Greenwell), @Bisaloo (Hugo Gruson), @bklamer (Brett Klamer), @bm5tev3, @bms63 (Ben Straub), @bpbond (Ben Bond-Lamberty), @bquast (Bastiaan Quast), @Br-Johnson (Brett Johnson), @brews (Brewster Malevich), @brianrice2 (Brian Rice), @brry (Berry Boessenkool), @btruel, @calligross (Calli), @carldotac (Carl Lieberman), @carloscinelli (Carlos Cinelli), @CDCookJr, @cderv (Christophe Dervieux), @chambm (Matt Chambers), @charliejhadley (Charlie Joey Hadley), @chezou (Aki Ariga), @chsafouane (Safouane Chergui), @clente (Caio Lente), @cmarmstrong, @cooknl (CAPN), @CorradoLanera (Corrado Lanera), @craigcitro (Craig Citro), @crtahlin (Crt Ahlin), @daattali (Dean Attali), @danhalligan (Dan Halligan), @daroczig (Gergely Daróczi), @datarttu (Arttu Kosonen), @davidkane9 (David Kane), @DavisVaughan (Davis Vaughan), @deanbodenham, @dfalbel (Daniel Falbel), @dgrtwo (David Robinson), @dholstius (David Holstius), @DickStartz, @dkgaraujo (Douglas K. G. Araujo), @dlukes (David Lukes), @DOH-PXC5303 (Philip Crain), @dongzhuoer (Zhuoer Dong), @DougManuel (Doug Manuel), @dpprdan (Daniel Possenriede), @dracodoc (dracodoc), @drag05 (Dragos Bandur), @drvinceknight (Vince Knight), @dryzliang, @dyavorsky (Dan Yavorsky), @e-pet, @earino (E. Ariño de la Rubia), @echelleburns, @eeholmes (Eli Holmes), @eipi10 (Joel Schwartz), @ekbrown (Earl Brown), @EllaKaye (Ella Kaye), @EmilHvitfeldt (Emil Hvitfeldt), @eogoodwin, @erictleung (Eric Leung), @erikerhardt (Erik Erhardt), @espinielli (Enrico Spinielli), @ewan (Ewan Dunbar), @fbertran (Frederic Bertrand), @federicomarini (Federico Marini), @fenguoerbian (Chao Cheng), @fkohrt (Florian Kohrt), @florisvdh (Floris Vanderhaeghe), @floswald (Florian Oswald), @franrodalg (Francisco Rodríguez-Algarra), @franticspider (Simon Hickinbotham), @frycast (Daniel Vidali Fryer), @fsavje (Fredrik Sävje), @gajusmiknaitis, @gcpoole (Geoffrey Poole), @geanders (Brooke Anderson), @georoen (Jee Roen), @GerardTromp (Gerard Tromp), @GillesSanMartin (Gilles San Martin), @gmaubach (Georg Maubach), @gonzalezgouveia (Rafael Gonzalez Gouveia), @gregmacfarlane (Greg Macfarlane), @gregrs-uk (Greg), @grst (Gregor Sturm), @gsrohde (Scott Rohde), @guru809, @gustavdelius (Gustav W Delius), @haibin (Liu Haibin), @hanneoberman (Hanne Oberman), @harrismcgehee (Harris McGehee), @havenl (Haven Liu), @hcyvan (程一航), @hdraisma (Harmen), @hedderik (Hedderik van Rijn), @heists ((ꐦ°᷄д°)ა), @helske (Jouni Helske), @henningte (Henning Teickner), @HenrikBengtsson (Henrik Bengtsson), @heogden (Helen Ogden), @hfrick (Hannah Frick), @Holzhauer (Sascha Holzhauer), @howardbaek (Howard Baek), @howbuildingsfail (How Buildings Fail), @hq9000 (Sergey Grechin), @hrbrmstr (boB Rudis), @iangow (Ian Gow), @iargent, @idmn (Iaroslav Domin), @ijlyttle (Ian Lyttle), @imchoyoung (Choyoung Im), @InfiniteCuriosity (Russ Conte), @ionut-stefanb (Ionut Stefan-Birdea), @Ironholds (Os Keyes), @ismayc (Chester Ismay), @isomorphisms (i), @jackwasey (Jack Wasey), @jacobbien (Jacob Bien), @jadeynryan (Jadey Ryan), @jameelalsalam (Jameel Alsalam), @jameslairdsmith (James Laird-Smith), @janzzon (Stefan Jansson), @JayCeBB, @jcainey (Joe Cainey), @jdblischak (John Blischak), @jedwards24 (James Edwards), @jemus42 (Lukas Burk), @jenniferthompson (Jennifer Thompson), @jeremycg (Jeremy Gray), @jgarthur (Joey Arthur), @jimhester (Jim Hester), @jimr1603 (James Riley), @jjesusfilho (José de Jesus Filho), @jkeirstead (James Keirstead), @jmarca (James Marca), @jmarshallnz (Jonathan Marshall), @joethorley (Joe Thorley), @johnbaums (John), @jolars (Johan Larsson), @jonthegeek (Jon Harmon), @jowalski (John Kowalski), @jpinelo (Joao Pinelo Silva), @jrdnbradford (Jordan), @jthomasmock (Tom Mock), @julian-urbano (Julián Urbano), @jwpestrak, @jzadra (Jonathan Zadra), @jzhaoo (Joanna Zhao), @kaetschap (Sonja), @karthik (Karthik Ram), @KasperThystrup (Kasper Thystrup Karstensen), @KatherineCox, @katrinleinweber (Katrin Leinweber), @kbroman (Karl Broman), @kekecib (Ibrahim Kekec), @KellenBrosnahan, @kendonB (Kendon Bell), @kevinushey (Kevin Ushey), @kikapp (Kristopher Kapphahn), @KirkDSL, @KJByron (Karen J. Byron), @klmr (Konrad Rudolph), @KoderKow (Kyle Harris), @kokbent (Ben Toh), @kongdd (Dongdong Kong), @krlmlr (Kirill Müller), @kwenzig (Knut Wenzig), @kwstat (Kevin Wright), @kylelundstedt (Kyle G. Lundstedt), @lancelote (Pavel Karateev), @lbergelson (Louis Bergelson), @LechMadeyski (Lech Madeyski), @Lenostatos (Leon), @lindbrook, @lionel- (Lionel Henry), @LluisRamon (Lluís Ramon), @lorenzwalthert (Lorenz Walthert), @lwjohnst86 (Luke W Johnston), @maelle (Maëlle Salmon), @maiermarco, @maislind (David M), @majr-red (Matthew Roberts), @malcolmbarrett (Malcolm Barrett), @malexan (Alexander Matrunich), @manuelreif (Manuel Reif), @MarceloRTonon (Marcelo Tonon), @mariacuellar (Maria Cuellar), @markdly (Mark Dulhunty), @Marlin-Na (Marlin), @martin-mfg, @matanhakim (Matan Hakim), @matdoering, @matinang (Matina Angelopoulou), @mattflor (Matthias Flor), @maurolepore (Mauro Lepore), @maxheld83 (Max Held), @mayankvanani (Mayank Vanani), @mbjones (Matt Jones), @mccarthy-m-g (Michael McCarthy), @mdequeljoe (Matthew de Queljoe), @mdsumner (Michael Sumner), @michaelboerman (Michael Boerman), @MichaelChirico (Michael Chirico), @michaelmikebuckley (Michael Buckley), @michaelweylandt (Michael Weylandt), @miguelmorin, @MikeJohnPage, @mikelnrd (Michael Leonard), @mikelove (Mike Love), @mikemc (Michael McLaren), @MilesMcBain (Miles McBain), @mjkanji (Muhammad Jarir Kanji), @mkuehn10 (Michael Kuehn), @mllg (Michel Lang), @mohamed-180 (Mohamed El-Desokey), @moodymudskipper (Antoine Fabri), @Moohan (James McMahon), @MrAE (Jesse Leigh Patsolic), @mrcaseb, @ms609 (Martin R. Smith), @mskyttner (Markus Skyttner), @MWilson92 (Matthew Wilson), @myoung3, @nachti (Gerhard Nachtmann), @nanxstats (Nan Xiao), @nareal (Nelson Areal), @nattalides, @ncarchedi (Nick Carchedi), @ndphillips (Nathaniel Phillips), @nick-youngblut (Nick Youngblut), @njtierney (Nicholas Tierney), @nsheff (Nathan Sheffield), @osorensen (Øystein Sørensen), @PabRod (Pablo Rodríguez-Sánchez), @paternogbc (Gustavo Brant Paterno), @paulrougieux (Paul Rougieux), @pdwaggoner (Philip Waggoner), @pearsonca (Carl A. B. Pearson), @perryjer1 (Jeremiah), @petermeissner (Peter Meissner), @petersonR (Ryan Peterson), @petzi53 (Peter Baumgartner), @PhilipPallmann (Philip Pallmann), @philliplab (Phillip Labuschagne), @phonixor (Gerrit-Jan Schutten), @pkimes (Patrick Kimes), @pnovoa (Pavel Novoa), @ppanko (Pavel Panko), @pritesh-shrivastava (Pritesh Shrivastava), @PrzeChoj (PrzeChoj), @PursuitOfDataScience (Y. Yu), @pwaeckerle, @raerickson (Richard Erickson), @ramiromagno (Ramiro Magno), @ras44, @rbirkelbach (Robert Birkelbach), @rcorty (Robert W. Corty), @rdiaz02 (Ramon Diaz-Uriarte), @realAkhmed (Akhmed Umyarov), @reikookamoto (Reiko Okamoto), @renkun-ken (Kun Ren), @retowyss (Reto Wyss), @revodavid (David Smith), @rgknight (Ryan Knight), @rhgof (Richard), @rmar073, @rmflight (Robert M Flight), @rmsharp (R. Mark Sharp), @rnuske (Robert Nuske), @robertzk (Robert Krzyzanowski), @Robinlovelace (Robin Lovelace), @robiRagan (Robi Ragan), @Robsteranium (Robin Gower), @romanzenka (Roman Zenka), @royfrancis (Roy Francis), @rpruim (Randall Pruim), @rrunner, @rsangole (Rahul), @ryanatanner (Ryan), @salim-b (Salim B), @SamEdwardes (Sam Edwardes), @SangdonLim (Sangdon Lim), @sathishsrinivasank (Sathish), @sbgraves237, @schifferl (Lucas Schiffer), @scw (Shaun Walbridge), @sdarodrigues (Sabrina Rodrigues), @sebffischer (Sebastian Fischer), @serghiou (Stylianos Serghiou), @setoyama60jp, @sfirke (Sam Firke), @shannonpileggi (Shannon Pileggi), @Shelmith-Kariuki (Shel), @SheridanLGrant (Sheridan Grant), @shntnu (Shantanu Singh), @sibusiso16 (S’busiso Mkhondwane), @simdadim (Simen Buodd), @SimonPBiggs (SPB), @simonthelwall (Simon Thelwall), @SimonYansenZhao (Simon He Zhao), @singmann (Henrik Singmann), @Skenvy (Nathan Levett), @Smudgerville (Richard M. Smith), @sn248 (Satyaprakash Nayak), @sowla (Praer (Suthira) Owlarn), @srushe (Stephen Rushe), @statnmap (Sébastien Rochette), @steenharsted (Steen Harsted), @stefaneng (Stefan Eng), @stefanherzog (Stefan Herzog), @stephen-frank (Stephen Frank), @stephenll (Stephen Lienhard), @stephenturner (Stephen Turner), @stevenprimeaux (Steven Primeaux), @stevensbr, @stewid (Stefan Widgren), @sunbeomk (Sunbeom Kwon), @superdesolator (Po Su), @syclik (Daniel Lee), @symbolrush (Adrian Stämpfli-Schmid), @taekyunk (Taekyun Kim), @talgalili (Tal Galili), @tanho63 (Tan Ho), @tbrugz (Telmo Brugnara), @thisisnic (Nic Crane), @TimHesterberg (Tim Hesterberg), @titaniumtroop (Nathan), @tjebo, @tklebel (Thomas Klebel), @tmstauss (Tanner Stauss), @tonybreyal (Tony Breyal), @tonyfischetti (Tony Fischetti), @TonyLadson (Tony Ladson), @trickytank (Rick Tankard), @TroyVan, @uribo (Shinya Uryu), @urmils, @valeonte, @vgonzenbach (Virgilio Gonzenbach), @vladpetyuk (Vlad Petyuk), @vnijs (Vincent Nijs), @vspinu (Vitalie Spinu), @wcarlsen (Willi Carlsen), @wch (Winston Chang), @wenjie2wang (Wenjie Wang), @werkstattcodes, @wiaidp, @wibeasley (Will Beasley), @wilkinson (Sean Wilkinson), @williamlief (Lief Esbenshade), @winterschlaefer (Christof Winter), @wlamnz (William Lam), @wrathematics (Drew Schmidt), @XiangyunHuang (Xiangyun Huang), @xiaochi-liu (Xiaochi), @XiaoqiLu (Xiaoqi Lu), @xiaosongz (Xiaosong Zhang), @yihui (Yihui Xie), @ynsec37, @yonicd, @ysdgroot, @yui-knk (Yuichiro Kaneko), @Zedseayou (Calum You), @zeehio (Sergio Oller), @zekiakyol (Zeki Akyol), @zenggyu (Guangyu Zeng), @zhaoy, @zhilongjia (Zhilong), @zhixunwang, @zkamvar (Zhian N. Kamvar), @zouter (Wouter Saelens)."
  },
  {
    "objectID": "preface.html#内容约定",
    "href": "preface.html#内容约定",
    "title": "前言",
    "section": "内容约定",
    "text": "内容约定\n在本书中，我们用 fun() 来指代函数，用 var 来指代变量和函数参数，用 path/ 来指代路径。\n较大的代码块同时包含输入和输出。 代码输出的内容都被注释了，因此如果你有本书的电子版本，例如 https://r-pkgs.org，就可以轻松地将示例代码复制和粘贴到 R 中。 输出内容的注释看起来像 #&gt;，这样可以和普通注释区别开来。"
  },
  {
    "objectID": "preface.html#colophon",
    "href": "preface.html#colophon",
    "title": "前言",
    "section": "Colophon1\n",
    "text": "Colophon1\n\n本书是在 RStudio 中使用 Quarto 编写的。 本书 官方网站 由 Netlify 托管，并使用 GitHub actions 在每次提交后自动更新。 完整的源代码可以在 GitHub 上找到\n本书的当前版本是在如下环境下构建的：\n\nlibrary(devtools)\n#&gt; Warning: package 'devtools' was built under R version 4.2.2\n#&gt; Loading required package: usethis\n#&gt; Warning: package 'usethis' was built under R version 4.2.3\nlibrary(roxygen2)\n#&gt; Warning: package 'roxygen2' was built under R version 4.2.3\nlibrary(testthat)\n#&gt; Warning: package 'testthat' was built under R version 4.2.3\n#&gt; \n#&gt; Attaching package: 'testthat'\n#&gt; The following object is masked from 'package:devtools':\n#&gt; \n#&gt;     test_file\n#&gt; The following object is masked from 'package:dplyr':\n#&gt; \n#&gt;     matches\n#&gt; The following object is masked from 'package:purrr':\n#&gt; \n#&gt;     is_null\n#&gt; The following objects are masked from 'package:readr':\n#&gt; \n#&gt;     edition_get, local_edition\n#&gt; The following object is masked from 'package:tidyr':\n#&gt; \n#&gt;     matches\ndevtools::session_info()\n#&gt; ─ Session info ───────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.2.1 (2022-06-23 ucrt)\n#&gt;  os       Windows 10 x64 (build 22000)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Chinese (Simplified)_China.utf8\n#&gt;  ctype    Chinese (Simplified)_China.utf8\n#&gt;  tz       Asia/Taipei\n#&gt;  date     2023-12-25\n#&gt;  pandoc   3.1.1 @ D:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ───────────────────────────────────────────────────────\n#&gt;  package     * version date (UTC) lib source\n#&gt;  bit           4.0.5   2022-11-15 [1] CRAN (R 4.2.3)\n#&gt;  bit64         4.0.5   2020-08-30 [1] CRAN (R 4.2.1)\n#&gt;  brio          1.1.3   2021-11-30 [1] CRAN (R 4.2.2)\n#&gt;  cachem        1.0.6   2021-08-19 [1] CRAN (R 4.2.1)\n#&gt;  callr         3.7.3   2022-11-02 [1] CRAN (R 4.2.3)\n#&gt;  cli           3.6.1   2023-03-23 [1] CRAN (R 4.2.3)\n#&gt;  colorspace    2.1-0   2023-01-23 [1] CRAN (R 4.2.3)\n#&gt;  crayon        1.5.2   2022-09-29 [1] CRAN (R 4.2.3)\n#&gt;  devtools    * 2.4.5   2022-10-11 [1] CRAN (R 4.2.2)\n#&gt;  digest        0.6.29  2021-12-01 [1] CRAN (R 4.2.1)\n#&gt;  dplyr       * 1.1.2   2023-04-20 [1] CRAN (R 4.2.3)\n#&gt;  ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.2.1)\n#&gt;  evaluate      0.21    2023-05-05 [1] CRAN (R 4.2.1)\n#&gt;  fansi         1.0.3   2022-03-24 [1] CRAN (R 4.2.1)\n#&gt;  fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.1)\n#&gt;  forcats     * 1.0.0   2023-01-29 [1] CRAN (R 4.2.3)\n#&gt;  fs            1.6.2   2023-04-25 [1] CRAN (R 4.2.3)\n#&gt;  generics      0.1.3   2022-07-05 [1] CRAN (R 4.2.1)\n#&gt;  ggplot2     * 3.4.2   2023-04-03 [1] CRAN (R 4.2.3)\n#&gt;  glue          1.6.2   2022-02-24 [1] CRAN (R 4.2.1)\n#&gt;  gtable        0.3.3   2023-03-21 [1] CRAN (R 4.2.3)\n#&gt;  hms           1.1.3   2023-03-21 [1] CRAN (R 4.2.3)\n#&gt;  htmltools     0.5.5   2023-03-23 [1] CRAN (R 4.2.3)\n#&gt;  htmlwidgets   1.6.2   2023-03-17 [1] CRAN (R 4.2.3)\n#&gt;  httpuv        1.6.6   2022-09-08 [1] CRAN (R 4.2.1)\n#&gt;  jsonlite      1.8.5   2023-06-05 [1] CRAN (R 4.2.3)\n#&gt;  knitr         1.43    2023-05-25 [1] CRAN (R 4.2.3)\n#&gt;  later         1.3.0   2021-08-18 [1] CRAN (R 4.2.1)\n#&gt;  lifecycle     1.0.3   2022-10-07 [1] CRAN (R 4.2.2)\n#&gt;  lubridate   * 1.9.2   2023-02-10 [1] CRAN (R 4.2.3)\n#&gt;  magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.2.1)\n#&gt;  memoise       2.0.1   2021-11-26 [1] CRAN (R 4.2.1)\n#&gt;  mime          0.12    2021-09-28 [1] CRAN (R 4.2.0)\n#&gt;  miniUI        0.1.1.1 2018-05-18 [1] CRAN (R 4.2.1)\n#&gt;  munsell       0.5.0   2018-06-12 [1] CRAN (R 4.2.1)\n#&gt;  pillar        1.9.0   2023-03-22 [1] CRAN (R 4.2.3)\n#&gt;  pkgbuild      1.4.1   2023-06-14 [1] CRAN (R 4.2.1)\n#&gt;  pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.2.1)\n#&gt;  pkgload       1.3.2   2022-11-16 [1] CRAN (R 4.2.3)\n#&gt;  prettyunits   1.1.1   2020-01-24 [1] CRAN (R 4.2.1)\n#&gt;  processx      3.8.1   2023-04-18 [1] CRAN (R 4.2.3)\n#&gt;  profvis       0.3.7   2020-11-02 [1] CRAN (R 4.2.2)\n#&gt;  promises      1.2.0.1 2021-02-11 [1] CRAN (R 4.2.1)\n#&gt;  ps            1.7.1   2022-06-18 [1] CRAN (R 4.2.1)\n#&gt;  purrr       * 1.0.1   2023-01-10 [1] CRAN (R 4.2.3)\n#&gt;  R6            2.5.1   2021-08-19 [1] CRAN (R 4.2.1)\n#&gt;  Rcpp          1.0.9   2022-07-08 [1] CRAN (R 4.2.1)\n#&gt;  readr       * 2.1.4   2023-02-10 [1] CRAN (R 4.2.3)\n#&gt;  remotes       2.4.2   2021-11-30 [1] CRAN (R 4.2.1)\n#&gt;  rlang         1.1.1   2023-04-28 [1] CRAN (R 4.2.3)\n#&gt;  rmarkdown     2.22    2023-06-01 [1] CRAN (R 4.2.3)\n#&gt;  roxygen2    * 7.2.3   2022-12-08 [1] CRAN (R 4.2.3)\n#&gt;  rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.2.3)\n#&gt;  scales        1.2.1   2022-08-20 [1] CRAN (R 4.2.3)\n#&gt;  sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.2)\n#&gt;  shiny         1.7.4   2022-12-15 [1] CRAN (R 4.2.3)\n#&gt;  stringi       1.7.8   2022-07-11 [1] CRAN (R 4.2.1)\n#&gt;  stringr     * 1.5.0   2022-12-02 [1] CRAN (R 4.2.3)\n#&gt;  testthat    * 3.1.8   2023-05-04 [1] CRAN (R 4.2.3)\n#&gt;  tibble      * 3.2.1   2023-03-20 [1] CRAN (R 4.2.3)\n#&gt;  tidyr       * 1.3.0   2023-01-24 [1] CRAN (R 4.2.3)\n#&gt;  tidyselect    1.2.0   2022-10-10 [1] CRAN (R 4.2.2)\n#&gt;  tidyverse   * 2.0.0   2023-02-22 [1] CRAN (R 4.2.3)\n#&gt;  timechange    0.2.0   2023-01-11 [1] CRAN (R 4.2.3)\n#&gt;  tinytex       0.45    2023-04-18 [1] CRAN (R 4.2.3)\n#&gt;  tzdb          0.3.0   2022-03-28 [1] CRAN (R 4.2.1)\n#&gt;  urlchecker    1.0.1   2021-11-30 [1] CRAN (R 4.2.2)\n#&gt;  usethis     * 2.2.0   2023-06-06 [1] CRAN (R 4.2.3)\n#&gt;  utf8          1.2.2   2021-07-24 [1] CRAN (R 4.2.1)\n#&gt;  vctrs         0.6.2   2023-04-19 [1] CRAN (R 4.2.3)\n#&gt;  vroom         1.6.3   2023-04-28 [1] CRAN (R 4.2.3)\n#&gt;  withr         2.5.0   2022-03-03 [1] CRAN (R 4.2.1)\n#&gt;  xfun          0.39    2023-04-20 [1] CRAN (R 4.2.3)\n#&gt;  xml2          1.3.3   2021-11-30 [1] CRAN (R 4.2.1)\n#&gt;  xtable        1.8-4   2019-04-21 [1] CRAN (R 4.2.1)\n#&gt; \n#&gt;  [1] D:/R/R-4.2.1/library\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────\n\n\n\n\n\nMüller, Kirill, and Lorenz Walthert. 2018. Styler: Non-Invasive Pretty Printing of R Code. http://styler.r-lib.org."
  },
  {
    "objectID": "preface.html#footnotes",
    "href": "preface.html#footnotes",
    "title": "前言",
    "section": "",
    "text": "译者注：版权页↩︎"
  },
  {
    "objectID": "introduction.html#sec-intro-phil",
    "href": "introduction.html#sec-intro-phil",
    "title": "简介",
    "section": "开发理念",
    "text": "开发理念\n本书宣扬了我们的软件包开发理念：凡是能够自动化的，都应该自动化。 尽量减少手动操作。 用函数完成尽可能多的事情。 这样是希望你将时间用于思考你想要让包做什么，而不是包结构的各种细节。\n这一理念主要是 devtools 包来实现的，这个软件包是让通用开发任务自动化的 R 函数套件中的代表。 devtools 在 2018 年 10 月发布了 2.0.0 版本，标志着其内部重组为一系列功能更具针对性的软件包，而它则更像是一个元软件包 (meta-package)。 usethis 包是其中你最有可能与之交互的子软件包，我们将在 Section 2.2 中解释 devtools 和 usethis 之间的关系。\n像往常一样，devtools 包的目的是让软件包的开发尽可能的轻松便利。 它囊括了 Hadley Wickham 自从作为一名多产的独立开发者以来积累的最佳实践经验。 最近，他在 Posit（以前称为 RStudio）组建了一个开发团队，共同维护数百个开源 R 包，包括那些被称为 the tidyverse 的包。 这个团队的能力让我们能够以惊人的规模探索所有可能出现的错误。 幸运的是，它还让我们有机会在专家和富有同情心的同事的陪伴下反思成功和失败。 我们试图开发出一些实践方法，让包的维护者和用户的工作更加轻松便利， 而 devtools 元软件包正是把这些经验教训具体化的地方。\ndevtools 与 RStudio 协同工作，我们相信这是对大多数 R 用户来说是最好的开发环境。 目前最流行的 RStudio 替代品是启用了 R extension 的 Visual Studio Code (VS Code)。 这可能是一个有价值并且功能强大的环境，然而它确实需要更多的工作来设置和定制3.\n\n\n\n\n\n\nRStudio\n\n\n\n在整本书中，我们在像这样特殊格式的段落中强调了使用 RStudio 加速软件包开发工作流程的具体方法。\n\n\ndevtools 和 RStudio 一起，让你无需关注软件包是怎样构建的这种低级细节。 但是当你开始开发更多的软件包时，我们强烈建议你去了解这些细节。 有关软件包开发官方细节的最佳资源，始终是官方的 writing R extensions 手册4. 然而，如果你还不熟悉软件包的基础知识，这本使用手册可能难以理解。 它也十分详尽，涵盖了所有可能的软件包组件，而不是像本书那样只关注最常见和最有用的组件。 一旦你掌握了 R 包的基础知识，并且想深入了解其背后发生了什么，那么这本手册就是十分有用的资料。"
  },
  {
    "objectID": "introduction.html#intro-outline",
    "href": "introduction.html#intro-outline",
    "title": "简介",
    "section": "本书包含的内容",
    "text": "本书包含的内容\n本书的第一部分将为你提供软件包开发之旅所需的所有工具，强烈建议你按顺序阅读。 我们将在 Chapter 1 中介绍一个小软件包的完整开发过程。 在我们深入研究 R 包的关键组件之前，它旨在描绘出整体的图景并提出一个工作流程。 然后在 Chapter 2 你将学习如何为软件包开发准备好系统环境；在 Chapter 3 中，你将学习软件 包的基本结构以及它不同状态下的差异。 接下来，在 Chapter 4 中，我们将介绍软件包开发人员经常遇到的核心工作流。 本书第一部分以另一个案例 (Chapter 5) 作为结尾，这次重点介绍如何将脚本转换为包，并讨论在这个过程中可能面临的挑战。\n本书的其余部分可以根据需要进行阅读。 在你开发过程中面临各种问题时，可以在各章中进行选择阅读。\n我们首先介绍软件包中的关键组件：?sec-r 讨论代码的位置和组织方式，?sec-data 介绍如何在包中包含数据，?sec-misc 介绍几个需要在一些地方讨论，但不太重要的文件和目录。\n接下来，我们将从 ?sec-description 的 DESCRIPTION 文件开始，深入了解包的元数据。 在 ?sec-dependencies-mindset-background 中，我们将介绍使用依赖项的成本和收益，并提供一些关于包命名空间和搜索路径的技术背景知识。 在 ?sec-dependencies-in-practice 中，我们关注一些实际问题，比如如何在包的不同部分使用不同类型的依赖。 这也是我们讨论导出函数 (exporting functions) 的地方，这使得其他包和项目可以将你的包作为依赖项。 我们将在 ?sec-license 中以有关添加开源软件许可证的内容结束这一部分。\n为了确保软件包能按照设计正常工作（并在你修改代码后继续正常工作），测试你的代码是必不可少的工作，所以接下来的三章将介绍测试的艺术和科学。 ?sec-testing-basics 通过 testthat 包介绍测试的基础知识。 ?sec-testing-design 教你如何以最有效的方式设计和组织测试。 ?sec-testing-advanced 将结束对测试的介绍，这一章将教你处理具有挑战性的情况的高级技能。\n如果你想让其他人（包括未来的你！）理解如何使用包中的函数，就需要为它编写文档。 ?sec-man 开始教你使用 roxygen2 为包中的函数编写文档。 只有在你知道要查找哪个函数的时候，函数文档才有帮助。所以在 ?sec-vignettes 中，我们将讨论主题文档 (vignettes)，它可以帮助你为整个包提供文档。 我们将在 ?sec-other-markdown 结束对文档编写的介绍，这一章介绍其他重要的 markdown 文件，如 README.md 和 NEWS.md。?sec-website 则是介绍如何用 pkgdown 创建软件包网站。\n本书最后回顾了开发实践方法，例如使用版本控制和持续集成的好处 (?sec-sw-dev-practices)。 最后，我们会讨论软件包的生命周期 (?sec-lifecycle)，包括在CRAN上发布软件包 (?sec-release)。\n本书中有很多东西要学，但不要感到不知所措。 从一个最小的有用的功能子集（例如一个 R/ 目录！）开始，随着时间的推移逐步构建你的包。 套用禅僧铃木俊隆 (Shunryu Suzuki) 的话:“每个包都是完美的，就像它本来的模样——但是也许可以稍作改进。”5"
  },
  {
    "objectID": "introduction.html#本书没有包含的内容",
    "href": "introduction.html#本书没有包含的内容",
    "title": "简介",
    "section": "本书没有包含的内容",
    "text": "本书没有包含的内容\n还有一些实践方法在本书中几乎没有讨论，这只是因为我们没有足够多地使用它们，因此没有任何独特的见解。 这是否意味着我们应该积极避免使用这些方法呢？ 可能并不是这样，因为我们在书中试图明确地说明我们认为你应该避免的做法。 因此，如果有什么东西没有在本书中介绍，这只是意味着数百个被广泛使用的 R 包并没有依赖于这项技术。 这一结果应该能鼓励你去评估自己的开发需求与我们不重叠的可能性有多大。 但有时这个问题的答案是明确的“是”，在这种情况下，你只需要去查阅其他的资料。\n\n\n\n\nMarwick, Ben, Carl Boettiger, and Lincoln Mullen. 2018a. “Packaging Data Analytical Work Reproducibly Using r (and Friends).” The American Statistician 72 (1): 80–88. https://doi.org/10.1080/00031305.2017.1375986.\n\n\n———. 2018b. “Packaging Data Analytical Work Reproducibly Using r (and Friends).” PeerJ Preprints 6 (March): e3192v2. https://doi.org/10.7287/peerj.preprints.3192v2."
  },
  {
    "objectID": "introduction.html#footnotes",
    "href": "introduction.html#footnotes",
    "title": "简介",
    "section": "",
    "text": "译者注：译者认为这里想要表达开发 R 包能带来一个明显的优势，即方便分享自己的代码，这一优势具有强烈的推动力和说服力，让你想要开发 R 包。↩︎\n“Seriously, it doesn’t have to be about sharing your code (although that is an added benefit!). It is about saving yourself time.”↩︎\nEmacs Speaks Statistics (ESS) 的用户将会发现本书中描述的许多工作流也可以在上面找到。 对于那些忠于 vim 的用户，我们推荐使用 Nvim-R plugin。↩︎\n你也可以在 https://rstudio.github.io/r-manuals/r-exts/ 上找到这本手册的 Quarto 版本。↩︎\n译者注：原话来自铃木俊隆的书籍《禅之初心》(Zen Mind, Beginner’s Mind)↩︎"
  },
  {
    "objectID": "whole-game.html#load-devtools-and-friends",
    "href": "whole-game.html#load-devtools-and-friends",
    "title": "1  The Whole Game",
    "section": "\n1.1 Load devtools and friends",
    "text": "1.1 Load devtools and friends\nYou can initiate your new package from any active R session. You don’t need to worry about whether you’re in an existing or new project or not. The functions we use ensure that we create a new clean project for the package.\nLoad the devtools package, which is the public face of a set of packages that support various aspects of package development. The most obvious of these is the usethis package, which you’ll see is also being loaded.\n\nlibrary(devtools)\n#&gt; Warning: package 'devtools' was built under R version 4.2.2\n#&gt; Loading required package: usethis\n#&gt; Warning: package 'usethis' was built under R version 4.2.3\n\nDo you have an old version of devtools? Compare your version against ours and upgrade if necessary.\n\npackageVersion(\"devtools\")\n#&gt; [1] '2.4.5'"
  },
  {
    "objectID": "whole-game.html#toy-package-regexcite",
    "href": "whole-game.html#toy-package-regexcite",
    "title": "1  The Whole Game",
    "section": "\n1.2 Toy package: regexcite",
    "text": "1.2 Toy package: regexcite\nTo help walk you through the process, we use various functions from devtools to build a small toy package from scratch, with features commonly seen in released packages:\n\nFunctions to address a specific need, in this case helpers for work with regular expressions.\nVersion control and an open development process.\n\nThis is completely optional in your work, but highly recommended. You’ll see how Git and GitHub help us expose all the intermediate stages of our toy package.\n\n\nAccess to established workflows for installation, getting help, and checking quality.\n\nDocumentation for individual functions via roxygen2.\nUnit testing with testthat.\nDocumentation for the package as a whole via an executable README.Rmd.\n\n\n\nWe call the package regexcite and it contains a couple of functions that make common tasks with regular expressions easier. Please note that these functions are very simple and we’re only using them here as a means to guide you through the package development process. If you’re looking for actual helpers for work with regular expressions, there are several proper R packages that address this problem space:\n\n\nstringr (which uses stringi)\nstringi\nrex\nrematch2\n\nAgain, the regexcite package itself is just a device for demonstrating a typical workflow for package development with devtools."
  },
  {
    "objectID": "whole-game.html#preview-the-finished-product",
    "href": "whole-game.html#preview-the-finished-product",
    "title": "1  The Whole Game",
    "section": "\n1.3 Preview the finished product",
    "text": "1.3 Preview the finished product\nThe regexcite package is tracked during its development with the Git version control system. This is purely optional and you can certainly follow along without implementing this. A nice side benefit is that we eventually connect it to a remote repository on GitHub, which means you can see the glorious result we are working towards by visiting regexcite on GitHub: https://github.com/jennybc/regexcite. By inspecting the commit history and especially the diffs, you can see exactly what changes at each step of the process laid out below."
  },
  {
    "objectID": "whole-game.html#create_package",
    "href": "whole-game.html#create_package",
    "title": "1  The Whole Game",
    "section": "\n1.4 create_package()\n",
    "text": "1.4 create_package()\n\nCall create_package() to initialize a new package in a directory on your computer. create_package() will automatically create that directory if it doesn’t exist yet (and that is usually the case). See Section 4.1 for more on creating packages.\nMake a deliberate choice about where to create this package on your computer. It should probably be somewhere within your home directory, alongside your other R projects. It should not be nested inside another RStudio Project, R package, or Git repo. Nor should it be in an R package library, which holds packages that have already been built and installed. The conversion of the source package we create here into an installed package is part of what devtools facilitates. Don’t try to do devtools’ job for it!\nOnce you’ve selected where to create this package, substitute your chosen path into a create_package() call like this:\n\ncreate_package(\"~/path/to/regexcite\")\n\nFor the creation of this book we have to work in a temporary directory, because the book is built non-interactively in the cloud. Behind the scenes, we’re executing our own create_package() command, but don’t be surprised if our output differs a bit from yours.\n\n#&gt; ✔ Creating 'C:/Users/xiaob/AppData/Local/Temp/RtmpcBDjYn/regexcite/'\n#&gt; ✔ Setting active project to 'C:/Users/xiaob/AppData/Local/Temp/RtmpcBDjYn/regexcite'\n#&gt; ✔ Creating 'R/'\n#&gt; ✔ Writing 'DESCRIPTION'\n#&gt; Package: regexcite\n#&gt; Title: What the Package Does (One Line, Title Case)\n#&gt; Version: 0.0.0.9000\n#&gt; Authors@R (parsed):\n#&gt;     * First Last &lt;first.last@example.com&gt; [aut, cre] (YOUR-ORCID-ID)\n#&gt; Description: What the package does (one paragraph).\n#&gt; License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n#&gt;     license\n#&gt; Encoding: UTF-8\n#&gt; Roxygen: list(markdown = TRUE)\n#&gt; RoxygenNote: 7.2.3\n#&gt; ✔ Writing 'NAMESPACE'\n#&gt; ✔ Writing 'regexcite.Rproj'\n#&gt; ✔ Adding '^regexcite\\\\.Rproj$' to '.Rbuildignore'\n#&gt; ✔ Adding '.Rproj.user' to '.gitignore'\n#&gt; ✔ Adding '^\\\\.Rproj\\\\.user$' to '.Rbuildignore'\n#&gt; ✔ Setting active project to '&lt;no active project&gt;'\n\nIf you’re working in RStudio, you should find yourself in a new instance of RStudio, opened into your new regexcite package (and Project). If you somehow need to do this manually, navigate to the directory and double click on regexcite.Rproj. RStudio has special handling for packages and you should now see a Build tab in the same pane as Environment and History.\nYou probably need to call library(devtools) again, because create_package() has probably dropped you into a fresh R session, in your new package.\n\nlibrary(devtools)\n\nWhat’s in this new directory that is also an R package and, probably, an RStudio Project? Here’s a listing (locally, you can consult your Files pane):\n\n\n\n\npath\ntype\n\n\n\n.gitignore\nfile\n\n\n.Rbuildignore\nfile\n\n\nDESCRIPTION\nfile\n\n\nNAMESPACE\nfile\n\n\nR\ndirectory\n\n\nregexcite.Rproj\nfile\n\n\n\n\n\n\n\n\n\n\n\nRStudio\n\n\n\nIn the Files pane, go to More (gear symbol) &gt; Show Hidden Files to toggle the visibility of hidden files (a.k.a. “dotfiles”). A select few are visible all the time, but sometimes you want to see them all.\n\n\n\n\n.Rbuildignore lists files that we need to have around but that should not be included when building the R package from source. If you aren’t using RStudio, create_package() may not create this file (nor .gitignore) at first, since there’s no RStudio-related machinery that needs to be ignored. However, you will likely develop the need for .Rbuildignore at some point, regardless of what editor you are using. It is discussed in more detail in Section 3.3.1.\n\n.Rproj.user, if you have it, is a directory used internally by RStudio.\n\n.gitignore anticipates Git usage and tells Git to ignore some standard, behind-the-scenes files created by R and RStudio. Even if you do not plan to use Git, this is harmless.\n\nDESCRIPTION provides metadata about your package. We edit this shortly and ?sec-description covers the general topic of the DESCRIPTION file.\n\nNAMESPACE declares the functions your package exports for external use and the external functions your package imports from other packages. At this point, it is empty, except for a comment declaring that this is a file you should not edit by hand.\nThe R/ directory is the “business end” of your package. It will soon contain .R files with function definitions.\n\nregexcite.Rproj is the file that makes this directory an RStudio Project. Even if you don’t use RStudio, this file is harmless. Or you can suppress its creation with create_package(..., rstudio = FALSE). More in Section 4.2."
  },
  {
    "objectID": "whole-game.html#use_git",
    "href": "whole-game.html#use_git",
    "title": "1  The Whole Game",
    "section": "\n1.5 use_git()\n",
    "text": "1.5 use_git()\n\nThe regexcite directory is an R source package and an RStudio Project. Now we make it also a Git repository, with use_git(). (By the way, use_git() works in any project, regardless of whether it’s an R package.)\n\nuse_git()\n#&gt; ✔ Initialising Git repo\n#&gt; ✔ Adding '.Rhistory', '.Rdata', '.httr-oauth', '.DS_Store', '.quarto' to '.gitignore'\n\nIn an interactive session, you will be asked if you want to commit some files here and you should accept the offer. Behind the scenes, we’ll also commit those same files.\nSo what has changed in the package? Only the creation of a .git directory, which is hidden in most contexts, including the RStudio file browser. Its existence is evidence that we have indeed initialized a Git repo here.\n\n\n\n\npath\ntype\n\n\n.git\ndirectory\n\n\n\n\nIf you’re using RStudio, it probably requested permission to relaunch itself in this Project, which you should do. You can do so manually by quitting, then relaunching RStudio by double clicking on regexcite.Rproj. Now, in addition to package development support, you have access to a basic Git client in the Git tab of the Environment/History/Build pane.\n\nClick on History (the clock icon in the Git pane) and, if you consented, you will see an initial commit made via use_git():\n\n\n\n\ncommit\nauthor\nmessage\n\n\nb428e988f2…\nYuanchenZhu2020 yuanchenzhu@126.com\n\nInitial commit\n\n\n\n\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio can initialize a Git repository, in any Project, even if it’s not an R package, as long you’ve set up RStudio + Git integration. Do Tools &gt; Version Control &gt; Project Setup. Then choose Version control system: Git and initialize a new git repository for this project."
  },
  {
    "objectID": "whole-game.html#write-the-first-function",
    "href": "whole-game.html#write-the-first-function",
    "title": "1  The Whole Game",
    "section": "\n1.6 Write the first function",
    "text": "1.6 Write the first function\nA fairly common task when dealing with strings is the need to split a single string into many parts. The strsplit() function in base R does exactly this.\n\n(x &lt;- \"alfa,bravo,charlie,delta\")\n#&gt; [1] \"alfa,bravo,charlie,delta\"\nstrsplit(x, split = \",\")\n#&gt; [[1]]\n#&gt; [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\n\nTake a close look at the return value.\n\nstr(strsplit(x, split = \",\"))\n#&gt; List of 1\n#&gt;  $ : chr [1:4] \"alfa\" \"bravo\" \"charlie\" \"delta\"\n\nThe shape of this return value often surprises people or, at least, inconveniences them. The input is a character vector of length one and the output is a list of length one. This makes total sense in light of R’s fundamental tendency towards vectorization. But sometimes it’s still a bit of a bummer. Often you know that your input is morally a scalar, i.e. it’s just a single string, and really want the output to be the character vector of its parts.\nThis leads R users to employ various methods of “unlist”-ing the result:\n\nunlist(strsplit(x, split = \",\"))\n#&gt; [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\n\nstrsplit(x, split = \",\")[[1]]\n#&gt; [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\n\nThe second, safer solution is the basis for the inaugural function of regexcite: strsplit1().\n\nstrsplit1 &lt;- function(x, split) {\n  strsplit(x, split = split)[[1]]\n}\n\nThis book does not teach you how to write functions in R. To learn more about that take a look at the Functions chapter of R for Data Science and the Functions chapter of Advanced R.\n\n\n\n\n\n\nTip\n\n\n\nThe name of strsplit1() is a nod to the very handy paste0(), which first appeared in R 2.15.0 in 2012. paste0() was created to address the extremely common use case of paste()-ing strings together without a separator. paste0() has been lovingly described as “statistical computing’s most influential contribution of the 21st century”.\nThe strsplit1() function was so inspiring that it’s now a real function in the stringr package: stringr::str_split_1()!"
  },
  {
    "objectID": "whole-game.html#use_r",
    "href": "whole-game.html#use_r",
    "title": "1  The Whole Game",
    "section": "\n1.7 use_r()\n",
    "text": "1.7 use_r()\n\nWhere should you put the definition of strsplit1()? Save it in a .R file, in the R/ subdirectory of your package. A reasonable starting position is to make a new .R file for each user-facing function in your package and name the file after the function. As you add more functions, you’ll want to relax this and begin to group related functions together. We’ll save the definition of strsplit1() in the file R/strsplit1.R.\nThe helper use_r() creates and/or opens a script below R/. It really shines in a more mature package, when navigating between .R files and the associated test file. But, even here, it’s useful to keep yourself from getting too carried away while working in Untitled4.\n\nuse_r(\"strsplit1\")\n#&gt; • Edit 'R/strsplit1.R'\n\nPut the definition of strsplit1() and only the definition of strsplit1() in R/strsplit1.R and save it. The file R/strsplit1.R should NOT contain any of the other top-level code we have recently executed, such as the definition of our practice input x, library(devtools), or use_git(). This foreshadows an adjustment you’ll need to make as you transition from writing R scripts to R packages. Packages and scripts use different mechanisms to declare their dependency on other packages and to store example or test code. We explore this further in ?sec-r."
  },
  {
    "objectID": "whole-game.html#sec-whole-game-load-all",
    "href": "whole-game.html#sec-whole-game-load-all",
    "title": "1  The Whole Game",
    "section": "\n1.8 load_all()\n",
    "text": "1.8 load_all()\n\nHow do we test drive strsplit1()? If this were a regular R script, we might use RStudio to send the function definition to the R Console and define strsplit1() in the global environment. Or maybe we’d call source(\"R/strsplit1.R\"). For package development, however, devtools offers a more robust approach.\nCall load_all() to make strsplit1() available for experimentation.\n\nload_all()\n#&gt; ℹ Loading regexcite\n\nNow call strsplit1(x) to see how it works.\n\n(x &lt;- \"alfa,bravo,charlie,delta\")\n#&gt; [1] \"alfa,bravo,charlie,delta\"\nstrsplit1(x, split = \",\")\n#&gt; [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\n\nNote that load_all() has made the strsplit1() function available, although it does not exist in the global environment.\n\nexists(\"strsplit1\", where = globalenv(), inherits = FALSE)\n#&gt; [1] FALSE\n\nIf you see TRUE instead of FALSE, that indicates you’re still using a script-oriented workflow and sourcing your functions. Here’s how to get back on track:\n\nClean out the global environment and restart R.\nRe-attach devtools with library(devtools) and re-load regexcite with load_all().\nRedefine the test input x and call strsplit1(x, split = \",\") again. This should work!\nRun exists(\"strsplit1\", where = globalenv(), inherits = FALSE) again and you should see FALSE.\n\nload_all() simulates the process of building, installing, and attaching the regexcite package. As your package accumulates more functions, some exported, some not, some of which call each other, some of which call functions from packages you depend on, load_all() gives you a much more accurate sense of how the package is developing than test driving functions defined in the global environment. Also load_all() allows much faster iteration than actually building, installing, and attaching the package. See Section 4.4 for more about load_all().\nTo review what we’ve done so far:\n\nWe wrote our first function, strsplit1(), to split a string into a character vector (not a list containing a character vector).\nWe used load_all() to quickly make this function available for interactive use, as if we’d built and installed regexcite and attached it via library(regexcite).\n\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio exposes load_all() in the Build menu, in the Build pane via More &gt; Load All, and in keyboard shortcuts Ctrl + Shift + L (Windows & Linux) or Cmd + Shift + L (macOS).\n\n\n\n1.8.1 Commit strsplit1()\n\nIf you’re using Git, use your preferred method to commit the new R/strsplit1.R file. We do so behind the scenes here and here’s the associated diff.\n\ndiff --git a/R/strsplit1.R b/R/strsplit1.R\nnew file mode 100644\nindex 0000000..29efb88\n--- /dev/null\n+++ b/R/strsplit1.R\n@@ -0,0 +1,3 @@\n+strsplit1 &lt;- function(x, split) {\n+  strsplit(x, split = split)[[1]]\n+}\n\nFrom this point on, we commit after each step. Remember these commits are available in the public repository."
  },
  {
    "objectID": "whole-game.html#check",
    "href": "whole-game.html#check",
    "title": "1  The Whole Game",
    "section": "\n1.9 check()\n",
    "text": "1.9 check()\n\nWe have informal, empirical evidence that strsplit1() works. But how can we be sure that all the moving parts of the regexcite package still work? This may seem silly to check, after such a small addition, but it’s good to establish the habit of checking this often.\nR CMD check, executed in the shell, is the gold standard for checking that an R package is in full working order. check() is a convenient way to run this without leaving your R session.\nNote that check() produces rather voluminous output, optimized for interactive consumption. We intercept that here and just reveal a summary. Your local check() output will be different.\n\ncheck()\n\n\n── R CMD check results ─────────────────── regexcite 0.0.0.9000 ────\nDuration: 27.7s\n\n❯ checking DESCRIPTION meta-information ... WARNING\n  Non-standard license specification:\n    `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\n  Standardizable: FALSE\n\n0 errors ✔ | 1 warning ✖ | 0 notes ✔\n\nIt is essential to actually read the output of the check! Deal with problems early and often. It’s just like incremental development of .R and .Rmd files. The longer you go between full checks that everything works, the harder it becomes to pinpoint and solve your problems.\nAt this point, we expect 1 warning (and 0 errors, 0 notes):\nNon-standard license specification:\n  `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n  license\nWe’ll address that soon, by doing exactly what it says. You can learn more about check() in Section 4.5.\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio exposes check() in the Build menu, in the Build pane via Check, and in keyboard shortcuts Ctrl + Shift + E (Windows & Linux) or Cmd + Shift + E (macOS)."
  },
  {
    "objectID": "whole-game.html#edit-description",
    "href": "whole-game.html#edit-description",
    "title": "1  The Whole Game",
    "section": "\n1.10 Edit DESCRIPTION\n",
    "text": "1.10 Edit DESCRIPTION\n\nThe DESCRIPTION file provides metadata about your package and is covered fully in ?sec-description. This is a good time to have a look at regexcite’s current DESCRIPTION. You’ll see it’s populated with boilerplate content, which needs to be replaced.\nTo add your own metadata, make these edits:\n\nMake yourself the author. If you don’t have an ORCID, you can omit the comment = ... portion.\nWrite some descriptive text in the Title and Description fields.\n\n\n\n\n\n\n\nRStudio\n\n\n\nUse Ctrl + . in RStudio and start typing “DESCRIPTION” to activate a helper that makes it easy to open a file for editing. In addition to a filename, your hint can be a function name. This is very handy once a package has lots of files.\n\n\nWhen you’re done, DESCRIPTION should look similar to this:\n\n\n\nPackage: regexcite\nTitle: Make Regular Expressions More Exciting\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"Jane\", \"Doe\", , \"jane@example.com\", role = c(\"aut\", \"cre\"))\nDescription: Convenience functions to make some common tasks with string\n    manipulation and regular expressions a bit easier.\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.1.2"
  },
  {
    "objectID": "whole-game.html#use_mit_license",
    "href": "whole-game.html#use_mit_license",
    "title": "1  The Whole Game",
    "section": "\n1.11 use_mit_license()\n",
    "text": "1.11 use_mit_license()\n\n\nPick a License, Any License. – Jeff Atwood\n\nWe currently have a placeholder in the License field of DESCRIPTION that’s deliberately invalid and suggests a resolution.\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nTo configure a valid license for the package, call use_mit_license().\n\nuse_mit_license()\n#&gt; ✔ Adding 'MIT + file LICENSE' to License\n#&gt; ✔ Writing 'LICENSE'\n#&gt; ✔ Writing 'LICENSE.md'\n#&gt; ✔ Adding '^LICENSE\\\\.md$' to '.Rbuildignore'\n\nThis configures the License field correctly for the MIT license, which promises to name the copyright holders and year in a LICENSE file. Open the newly created LICENSE file and confirm it looks something like this:\n\nYEAR: 2023\nCOPYRIGHT HOLDER: regexcite authors\n\nLike other license helpers, use_mit_license() also puts a copy of the full license in LICENSE.md and adds this file to .Rbuildignore. It’s considered a best practice to include a full license in your package’s source, such as on GitHub, but CRAN disallows the inclusion of this file in a package tarball. You can learn more about licensing in ?sec-license."
  },
  {
    "objectID": "whole-game.html#sec-whole-game-document",
    "href": "whole-game.html#sec-whole-game-document",
    "title": "1  The Whole Game",
    "section": "\n1.12 document()\n",
    "text": "1.12 document()\n\nWouldn’t it be nice to get help on strsplit1(), just like we do with other R functions? This requires that your package have a special R documentation file, man/strsplit1.Rd, written in an R-specific markup language that is sort of like LaTeX. Luckily we don’t necessarily have to author that directly.\nWe write a specially formatted comment right above strsplit1(), in its source file, and then let a package called roxygen2 handle the creation of man/strsplit1.Rd. The motivation and mechanics of roxygen2 are covered in ?sec-man.\nIf you use RStudio, open R/strsplit1.R in the source editor and put the cursor somewhere in the strsplit1() function definition. Now do Code &gt; Insert roxygen skeleton. A very special comment should appear above your function, in which each line begins with #'. RStudio only inserts a barebones template, so you will need to edit it to look something like that below.\nIf you don’t use RStudio, create the comment yourself. Regardless, you should modify it to look something like this:\n\n#' Split a string\n#'\n#' @param x A character vector with one element.\n#' @param split What to split on.\n#'\n#' @return A character vector.\n#' @export\n#'\n#' @examples\n#' x &lt;- \"alfa,bravo,charlie,delta\"\n#' strsplit1(x, split = \",\")\nstrsplit1 &lt;- function(x, split) {\n  strsplit(x, split = split)[[1]]\n}\n\n\nBut we’re not done yet! We still need to trigger the conversion of this new roxygen comment into man/strsplit1.Rd with document():\n\ndocument()\n#&gt; ℹ Updating regexcite documentation\n#&gt; Setting `RoxygenNote` to \"7.2.3\"\n#&gt; ℹ Loading regexcite\n#&gt; Writing 'NAMESPACE'\n#&gt; Writing 'strsplit1.Rd'\n\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio exposes document() in the Build menu, in the Build pane via More &gt; Document, and in keyboard shortcuts Ctrl + Shift + D (Windows & Linux) or Cmd + Shift + D (macOS).\n\n\nYou should now be able to preview your help file like so:\n\n?strsplit1\n\nYou’ll see a message like “Rendering development documentation for ‘strsplit1’”, which reminds that you are basically previewing draft documentation. That is, this documentation is present in your package’s source, but is not yet present in an installed package. In fact, we haven’t installed regexcite yet, but we will soon. If ?strsplit1 doesn’t work for you, you may need to call load_all() first, then try again.\nNote also that your package’s documentation won’t be properly wired up until it has been formally built and installed. This polishes off niceties like the links between help files and the creation of a package index.\n\n1.12.1 NAMESPACE changes\nIn addition to converting strsplit1()’s special comment into man/strsplit1.Rd, the call to document() updates the NAMESPACE file, based on @export tags found in roxygen comments. Open NAMESPACE for inspection. The contents should be:\n\n\n# Generated by roxygen2: do not edit by hand\n\nexport(strsplit1)\n\nThe export directive in NAMESPACE is what makes strsplit1() available to a user after attaching regexcite via library(regexcite). Just as it is entirely possible to author .Rd files “by hand”, you can manage NAMESPACE explicitly yourself. But we choose to delegate this to devtools (and roxygen2)."
  },
  {
    "objectID": "whole-game.html#check-again",
    "href": "whole-game.html#check-again",
    "title": "1  The Whole Game",
    "section": "\n1.13 check() again",
    "text": "1.13 check() again\nregexcite should pass R CMD check cleanly now and forever more: 0 errors, 0 warnings, 0 notes.\n\ncheck()\n\n\n── R CMD check results ─────────────────── regexcite 0.0.0.9000 ────\nDuration: 21.6s\n\n0 errors ✔ | 0 warnings ✔ | 0 notes ✔"
  },
  {
    "objectID": "whole-game.html#install",
    "href": "whole-game.html#install",
    "title": "1  The Whole Game",
    "section": "\n1.14 install()\n",
    "text": "1.14 install()\n\nNow that we know we have a minimum viable product, let’s install the regexcite package into your library via install():\n\ninstall()\n\n\n── R CMD build ─────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\xiaob\\AppData\\Local\\Temp\\RtmpcBDjYn\\regexcite/DESCRIPTION' ... OK\n* preparing 'regexcite':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'regexcite_0.0.0.9000.tar.gz'\nRunning \"D:/R/R-4.2.1/bin/x64/Rcmd.exe\" INSTALL \\\n  \"C:\\Users\\xiaob\\AppData\\Local\\Temp\\RtmpcBDjYn/regexcite_0.0.0.9000.tar.gz\" \\\n  --install-tests \n* installing to library 'D:/R/R-4.2.1/library'\n* installing *source* package 'regexcite' ...\n** using staged installation\n** R\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (regexcite)\n\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio exposes similar functionality in the Build menu and in the Build pane via Install and Restart, and in keyboard shortcuts Ctrl + Shift + B (Windows & Linux) or Cmd + Shift + B (macOS).\n\n\nAfter installation is complete, we can attach and use regexcite like any other package. Let’s revisit our small example from the top. This is also a good time to restart your R session and ensure you have a clean workspace.\n\nlibrary(regexcite)\n\nx &lt;- \"alfa,bravo,charlie,delta\"\nstrsplit1(x, split = \",\")\n#&gt; [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"\n\nSuccess!"
  },
  {
    "objectID": "whole-game.html#use_testthat",
    "href": "whole-game.html#use_testthat",
    "title": "1  The Whole Game",
    "section": "\n1.15 use_testthat()\n",
    "text": "1.15 use_testthat()\n\nWe’ve tested strsplit1() informally, in a single example. We can formalize this as a unit test. This means we express a concrete expectation about the correct strsplit1() result for a specific input.\nFirst, we declare our intent to write unit tests and to use the testthat package for this, via use_testthat():\n\nuse_testthat()\n#&gt; ✔ Adding 'testthat' to Suggests field in DESCRIPTION\n#&gt; ✔ Adding '3' to Config/testthat/edition\n#&gt; ✔ Creating 'tests/testthat/'\n#&gt; ✔ Writing 'tests/testthat.R'\n#&gt; • Call `use_test()` to initialize a basic test file and open it for editing.\n\nThis initializes the unit testing machinery for your package. It adds Suggests: testthat to DESCRIPTION, creates the directory tests/testthat/, and adds the script tests/testthat.R. You’ll notice that testthat is probably added with a minimum version of 3.0.0 and a second DESCRIPTION field, Config/testthat/edition: 3. We’ll talk more about those details in ?sec-testing-basics.\nHowever, it’s still up to YOU to write the actual tests!\nThe helper use_test() opens and/or creates a test file. You can provide the file’s basename or, if you are editing the relevant source file in RStudio, it will be automatically generated. For many of you, if R/strsplit1.R is the active file in RStudio, you can just call use_test(). However, since this book is built non-interactively, we must provide the basename explicitly:\n\nuse_test(\"strsplit1\")\n#&gt; ✔ Writing 'tests/testthat/test-strsplit1.R'\n#&gt; • Edit 'tests/testthat/test-strsplit1.R'\n\nThis creates the file tests/testthat/test-strsplit1.R. If it had already existed, use_test() would have just opened it. You will notice that there is an example test in the newly created file - delete that code and replace it with this content:\n\ntest_that(\"strsplit1() splits a string\", {\n  expect_equal(strsplit1(\"a,b,c\", split = \",\"), c(\"a\", \"b\", \"c\"))\n})\n\nThis tests that strsplit1() gives the expected result when splitting a string.\nRun this test interactively, as you will when you write your own. If test_that() or strsplit1() can’t be found, that suggests that you probably need to call load_all().\nGoing forward, your tests will mostly run en masse and at arm’s length via test():\n\n\ntest()\n#&gt; ℹ Testing regexcite\n#&gt; ✔ | F W S  OK | Context\n#&gt; \n#&gt; ⠏ |         0 | strsplit1                                           \n#&gt; ✔ |         1 | strsplit1\n#&gt; \n#&gt; ══ Results ═════════════════════════════════════════════════════════\n#&gt; [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\n\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio exposes test() in the Build menu, in the Build pane via More &gt; Test package, and in keyboard shortcuts Ctrl + Shift + T (Windows & Linux) or Cmd + Shift + T (macOS).\n\n\nYour tests are also run whenever you check() the package. In this way, you basically augment the standard checks with some of your own, that are specific to your package. It is a good idea to use the covr package to track what proportion of your package’s source code is exercised by the tests. More details can be found in ?sec-testing-basics."
  },
  {
    "objectID": "whole-game.html#use_package",
    "href": "whole-game.html#use_package",
    "title": "1  The Whole Game",
    "section": "\n1.16 use_package()\n",
    "text": "1.16 use_package()\n\nYou will inevitably want to use a function from another package in your own package. We will need to use package-specific methods for declaring the other packages we need (i.e. our dependencies) and for using these packages in ours. If you plan to submit a package to CRAN, note that this even applies to functions in packages that you think of as “always available”, such as stats::median() or utils::head().\nOne common dilemma when using R’s regular expression functions is uncertainty about whether to request perl = TRUE or perl = FALSE. And then there are often, but not always, other arguments that alter how patterns are matched, such as fixed, ignore.case, and invert. It can be hard to keep track of which functions use which arguments and how the arguments interact, so many users never get to the point where they retain these details without rereading the docs.\nThe stringr package “provides a cohesive set of functions designed to make working with strings as easy as possible”. In particular, stringr uses one regular expression system everywhere (ICU regular expressions) and uses the same interface in every function for controlling matching behaviors, such as case sensitivity. Some people find this easier to internalize and program around. Let’s imagine you decide you’d rather build regexcite based on stringr (and stringi) than base R’s regular expression functions.\nFirst, declare your general intent to use some functions from the stringr namespace with use_package():\n\nuse_package(\"stringr\")\n#&gt; ✔ Adding 'stringr' to Imports field in DESCRIPTION\n#&gt; • Refer to functions with `stringr::fun()`\n\nThis adds the stringr package to the Imports field of DESCRIPTION. And that is all it does.\nLet’s revisit strsplit1() to make it more stringr-like. Here’s a new take on it1:\n\nstr_split_one &lt;- function(string, pattern, n = Inf) {\n  stopifnot(is.character(string), length(string) &lt;= 1)\n  if (length(string) == 1) {\n    stringr::str_split(string = string, pattern = pattern, n = n)[[1]]\n  } else {\n    character()\n  }\n}\n\nNotice that we:\n\nRename the function to str_split_one(), to signal that it is a wrapper around stringr::str_split().\nAdopt the argument names from stringr::str_split(). Now we have string and pattern (and n), instead of x and split.\nIntroduce a bit of argument checking and edge case handling. This is unrelated to the switch to stringr and would be equally beneficial in the version built on strsplit().\nUse the package::function() form when calling stringr::str_split(). This specifies that we want to call the str_split() function from the stringr namespace. There is more than one way to call a function from another package and the one we endorse here is explained fully in ?sec-dependencies-in-practice.\n\nWhere should we write this new function definition? If we want to keep following the convention where we name the .R file after the function it defines, we now need to do some fiddly file shuffling. Because this comes up fairly often in real life, we have the rename_files() function, which choreographs the renaming of a file in R/ and its associated companion files below test/.\n\nrename_files(\"strsplit1\", \"str_split_one\")\n#&gt; ✔ Moving 'R/strsplit1.R' to 'R/str_split_one.R'\n#&gt; ✔ Moving 'tests/testthat/test-strsplit1.R' to 'tests/testthat/test-str_split_one.R'\n\nRemember: the file name work is purely aspirational. We still need to update the contents of these files!\nHere are the updated contents of R/str_split_one.R. In addition to changing the function definition, we’ve also updated the roxygen header to reflect the new arguments and to include examples that show off the stringr features.\n\n#' Split a string\n#'\n#' @param string A character vector with, at most, one element.\n#' @inheritParams stringr::str_split\n#'\n#' @return A character vector.\n#' @export\n#'\n#' @examples\n#' x &lt;- \"alfa,bravo,charlie,delta\"\n#' str_split_one(x, pattern = \",\")\n#' str_split_one(x, pattern = \",\", n = 2)\n#'\n#' y &lt;- \"192.168.0.1\"\n#' str_split_one(y, pattern = stringr::fixed(\".\"))\nstr_split_one &lt;- function(string, pattern, n = Inf) {\n  stopifnot(is.character(string), length(string) &lt;= 1)\n  if (length(string) == 1) {\n    stringr::str_split(string = string, pattern = pattern, n = n)[[1]]\n  } else {\n    character()\n  }\n}\n\nDon’t forget to also update the test file!\nHere are the updated contents of tests/testthat/test-str_split_one.R. In addition to the change in the function’s name and arguments, we’ve added a couple more tests.\n\ntest_that(\"str_split_one() splits a string\", {\n  expect_equal(str_split_one(\"a,b,c\", \",\"), c(\"a\", \"b\", \"c\"))\n})\n\ntest_that(\"str_split_one() errors if input length &gt; 1\", {\n  expect_error(str_split_one(c(\"a,b\",\"c,d\"), \",\"))\n})\n\ntest_that(\"str_split_one() exposes features of stringr::str_split()\", {\n  expect_equal(str_split_one(\"a,b,c\", \",\", n = 2), c(\"a\", \"b,c\"))\n  expect_equal(str_split_one(\"a.b\", stringr::fixed(\".\")), c(\"a\", \"b\"))\n})\n\nBefore we take the new str_split_one() out for a test drive, we need to call document(). Why? Remember that document() does two main jobs:\n\nConverts our roxygen comments into proper R documentation.\n(Re)generates NAMESPACE.\n\nThe second job is especially important here, since we will no longer export strsplit1() and we will newly export str_split_one(). Don’t be dismayed by the warning about \"Objects listed as exports, but not present in namespace: strsplit1\". That always happens when you remove something from the namespace.\n\ndocument()\n#&gt; ℹ Updating regexcite documentation\n#&gt; ℹ Loading regexcite\n#&gt; Warning: Objects listed as exports, but not present in namespace:\n#&gt; • strsplit1\n#&gt; Writing 'NAMESPACE'\n#&gt; Writing 'str_split_one.Rd'\n#&gt; Deleting 'strsplit1.Rd'\n\nTry out the new str_split_one() function by simulating package installation via load_all():\n\nload_all()\n#&gt; ℹ Loading regexcite\nstr_split_one(\"a, b, c\", pattern = \", \")\n#&gt; [1] \"a\" \"b\" \"c\""
  },
  {
    "objectID": "whole-game.html#use_github",
    "href": "whole-game.html#use_github",
    "title": "1  The Whole Game",
    "section": "\n1.17 use_github()\n",
    "text": "1.17 use_github()\n\nYou’ve seen us making commits during the development process for regexcite. You can see an indicative history at https://github.com/jennybc/regexcite. Our use of version control and the decision to expose the development process means you can inspect the state of the regexcite source at each developmental stage. By looking at so-called diffs, you can see exactly how each devtools helper function modifies the source files that constitute the regexcite package.\nHow would you connect your local regexcite package and Git repository to a companion repository on GitHub? Here are three approaches:\n\n\nuse_github() is a helper that we recommend for the long-term. We won’t demonstrate it here because it requires some credential setup on your end. We also don’t want to tear down and rebuild the public regexcite package every time we build this book.\nSet up the GitHub repo first! It sounds counter-intuitive, but the easiest way to get your work onto GitHub is to initiate there, then use RStudio to start working in a synced local copy. This approach is described in Happy Git’s workflows New project, GitHub first and Existing project, GitHub first.\nCommand line Git can always be used to add a remote repository post hoc. This is described in the Happy Git workflow Existing project, GitHub last.\n\nAny of these approaches will connect your local regexcite project to a GitHub repo, public or private, which you can push to or pull from using the Git client built into RStudio. In ?sec-sw-dev-practices, we elaborate on why version control (e.g., Git) and, specifically, hosted version control (e.g. GitHub) is worth incorporating into your package development process."
  },
  {
    "objectID": "whole-game.html#use_readme_rmd",
    "href": "whole-game.html#use_readme_rmd",
    "title": "1  The Whole Game",
    "section": "\n1.18 use_readme_rmd()\n",
    "text": "1.18 use_readme_rmd()\n\nNow that your package is on GitHub, the README.md file matters. It is the package’s home page and welcome mat, at least until you decide to give it a website (see ?sec-website), add a vignette (see ?sec-vignettes), or submit it to CRAN (see ?sec-release).\nThe use_readme_rmd() function initializes a basic, executable README.Rmd ready for you to edit:\n\nuse_readme_rmd()\n#&gt; ✔ Writing 'README.Rmd'\n#&gt; ✔ Adding '^README\\\\.Rmd$' to '.Rbuildignore'\n#&gt; • Update 'README.Rmd' to include installation instructions.\n#&gt; ✔ Writing '.git/hooks/pre-commit'\n\nIn addition to creating README.Rmd, this adds some lines to .Rbuildignore, and creates a Git pre-commit hook to help you keep README.Rmd and README.md in sync.\nREADME.Rmd already has sections that prompt you to:\n\nDescribe the purpose of the package.\nProvide installation instructions. If a GitHub remote is detected when use_readme_rmd() is called, this section is pre-filled with instructions on how to install from GitHub.\nShow a bit of usage.\n\nHow to populate this skeleton? Copy stuff liberally from DESCRIPTION and any formal and informal tests or examples you have. Anything is better than nothing. This is helpful because people probably won’t install your package and comb through individual help files to figure out how to use it.\nWe like to write the README in R Markdown, so it can feature actual usage. The inclusion of live code also makes it less likely that your README grows stale and out-of-sync with your actual package.\nTo make your own edits, if RStudio has not already done so, open README.Rmd for editing. Make sure it shows some usage of str_split_one().\nThe README.Rmd we use is here: README.Rmd and here’s what it contains:\n\n---\noutput: github_document\n---\n\n&lt;!-- README.md is generated from README.Rmd. Please edit that file --&gt;\n\n```{r, include = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#&gt;\",\n  fig.path = \"man/figures/README-\",\n  out.width = \"100%\"\n)\n```\n\n**NOTE: This is a toy package created for expository purposes, for the second edition of [R Packages](https://r-pkgs.org). It is not meant to actually be useful. If you want a package for factor handling, please see [stringr](https://stringr.tidyverse.org), [stringi](https://stringi.gagolewski.com/),\n[rex](https://cran.r-project.org/package=rex), and\n[rematch2](https://cran.r-project.org/package=rematch2).**\n\n# regexcite\n\n&lt;!-- badges: start --&gt;\n&lt;!-- badges: end --&gt;\n\nThe goal of regexcite is to make regular expressions more exciting!\nIt provides convenience functions to make some common tasks with string manipulation and regular expressions a bit easier.\n\n## Installation\n\nYou can install the development version of regexcite from [GitHub](https://github.com/) with:\n      \n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"jennybc/regexcite\")\n```\n\n## Usage\n\nA fairly common task when dealing with strings is the need to split a single string into many parts.\nThis is what `base::strplit()` and `stringr::str_split()` do.\n\n```{r}\n(x &lt;- \"alfa,bravo,charlie,delta\")\nstrsplit(x, split = \",\")\nstringr::str_split(x, pattern = \",\")\n```\n\nNotice how the return value is a **list** of length one, where the first element holds the character vector of parts.\nOften the shape of this output is inconvenient, i.e. we want the un-listed version.\n\nThat's exactly what `regexcite::str_split_one()` does.\n\n```{r}\nlibrary(regexcite)\n\nstr_split_one(x, pattern = \",\")\n```\n\nUse `str_split_one()` when the input is known to be a single string.\nFor safety, it will error if its input has length greater than one.\n\n`str_split_one()` is built on `stringr::str_split()`, so you can use its `n` argument and stringr's general interface for describing the `pattern` to be matched.\n\n```{r}\nstr_split_one(x, pattern = \",\", n = 2)\n\ny &lt;- \"192.168.0.1\"\nstr_split_one(y, pattern = stringr::fixed(\".\"))\n```\n\nDon’t forget to render it to make README.md! The pre-commit hook should remind you if you try to commit README.Rmd, but not README.md, and also when README.md appears to be out-of-date.\nThe very best way to render README.Rmd is with build_readme(), because it takes care to render with the most current version of your package, i.e. it installs a temporary copy from the current source.\n\nbuild_readme()\n#&gt; ℹ Installing regexcite in temporary library\n#&gt; ℹ Building\n#&gt;   'C:/Users/xiaob/AppData/Local/Temp/RtmpcBDjYn/regexcite/README.Rmd'\n\nYou can see the rendered README.md simply by visiting regexcite on GitHub.\nFinally, don’t forget to do one last commit. And push, if you’re using GitHub."
  },
  {
    "objectID": "whole-game.html#the-end-check-and-install",
    "href": "whole-game.html#the-end-check-and-install",
    "title": "1  The Whole Game",
    "section": "\n1.19 The end: check() and install()\n",
    "text": "1.19 The end: check() and install()\n\nLet’s run check() again to make sure all is still well.\n\ncheck()\n\n\n── R CMD check results ─────────────────── regexcite 0.0.0.9000 ────\nDuration: 23.2s\n\n0 errors ✔ | 0 warnings ✔ | 0 notes ✔\n\nregexcite should have no errors, warnings or notes. This would be a good time to re-build and install it properly. And celebrate!\n\ninstall()\n\n\n── R CMD build ─────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\xiaob\\AppData\\Local\\Temp\\RtmpcBDjYn\\regexcite/DESCRIPTION' ... OK\n* preparing 'regexcite':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'regexcite_0.0.0.9000.tar.gz'\nRunning \"D:/R/R-4.2.1/bin/x64/Rcmd.exe\" INSTALL \\\n  \"C:\\Users\\xiaob\\AppData\\Local\\Temp\\RtmpcBDjYn/regexcite_0.0.0.9000.tar.gz\" \\\n  --install-tests \n* installing to library 'D:/R/R-4.2.1/library'\n* installing *source* package 'regexcite' ...\n** using staged installation\n** R\n** tests\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (regexcite)\n\nFeel free to visit the regexcite package on GitHub, which appears exactly as developed here. The commit history reflects each individual step, so use the diffs to see the addition and modification of files, as the package evolved. The rest of this book goes in greater detail for each step you’ve seen here and much more."
  },
  {
    "objectID": "whole-game.html#review",
    "href": "whole-game.html#review",
    "title": "1  The Whole Game",
    "section": "\n1.20 Review",
    "text": "1.20 Review\nThis chapter is meant to give you a sense of the typical package development workflow, summarized as a diagram in Figure 1.1. Everything you see here has been touched on in this chapter, with the exception of GitHub Actions, which you will learn more about in ?sec-sw-dev-practices-gha.\n\n\n\n\nFigure 1.1: The devtools package development workflow.\n\n\n\nHere is a review of the key functions you’ve seen in this chapter, organized roughly by their role in the development process.\nThese functions setup parts of the package and are typically called once per package:\n\ncreate_package()\nuse_git()\nuse_mit_license()\nuse_testthat()\nuse_github()\nuse_readme_rmd()\n\nYou will call these functions on a regular basis, as you add functions and tests or take on dependencies:\n\nuse_r()\nuse_test()\nuse_package()\n\nYou will call these functions multiple times per day or per hour, during development:\n\nload_all()\ndocument()\ntest()\ncheck()"
  },
  {
    "objectID": "whole-game.html#footnotes",
    "href": "whole-game.html#footnotes",
    "title": "1  The Whole Game",
    "section": "",
    "text": "Recall that this example was so inspiring that it’s now a real function in the stringr package: `stringr::str_split_1()`!↩︎"
  },
  {
    "objectID": "setup.html#setup-prep",
    "href": "setup.html#setup-prep",
    "title": "2  系统设置",
    "section": "\n2.1 准备好你的系统",
    "text": "2.1 准备好你的系统\n在开始之前，请确保您已经安装了最新版本的 R（至少需要 4.2.1，本书即是使用该版本渲染生成的），然后再运行以下代码来获取您将使用到的程序包：\n\ninstall.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\"))\n\n请确保您已经安装了最新版本的 RStudio 集成开发环境（IDE）。 新版本会定期发布，所以我们建议经常更新以获得最新和最好的功能。\n从这里下载最新版本的 RStudio Desktop：https://posit.co/download/rstudio-desktop/。 大多数读者可以使用 RStudio Desktop 的免费开源版本。"
  },
  {
    "objectID": "setup.html#sec-setup-usage",
    "href": "setup.html#sec-setup-usage",
    "title": "2  系统设置",
    "section": "\n2.2 devtools, usethis, 以及你自己",
    "text": "2.2 devtools, usethis, 以及你自己\n\n“I am large, I contain multitudes.”\n— Walt Whitman, Song of Myself\n\n正如在 Section 1 中所提到的，devtools 是一个“元软件包 (meta-package)”，包含并提供了在几个较小的包中维护的功能1。 例如，devtools 可能会提供一个包装器函数 (wrapper function)，以设置用户友好的默认值，引入有用的交互行为，或组合来自多个子软件包的功能。 在某些情况下，它只是从另一个包中重新导出一个函数，以便在使用 (attach)2 devtools 时能够方便地使用它。\n那么我们推荐使用 devtools 及其组成软件包的方法是什么呢？ 根据你的意图有不同的使用方法：\n\n如果你正在交互式地使用这些函数来帮助开发软件包，则应将 devtools 视为首选的用于包开发的函数提供者。在这种情况下，你应该将使用 library(devtools) 附加 devtools 并在不加限定符的情况下调用函数（例如 load_all()）。\n如果你正在编写包代码并使用 devtools 和相关函数，则不应该依赖 devtools，而应通过是它们所在的软件包来访问函数。\n\ndevtools 应该尽量避免以形如 pkg::fcn() 的限定调用的形式出现在 pkg 中。相对地，pkg 应该是 fcn() 的函数定义所在的包。例如，如果你要在包中创建一个函数，在函数内你需要查询用户 R session 的状态，请在你的包中使用 sessioninfo::session_info() 而不是 devtools::session_info()。\n\n\n如果你发现了漏洞，请尝试在作为函数主要宿主的包上报告它们。devtools::fcn() 的帮助文档通常说明了 devtools 何时从另一个包中重新导出一个函数。\n\nusethis 软件包是更多人可能知道并直接使用的组成软件包。 它包含了操作 R 项目中文件和文件夹的函数，特别是对于任何既是 R 项目又是 R 软件包的项目。 devtools 让你可以轻松地以交互式方法使用 usethis 函数，当你调用 library(devtools) 时，usethis 也会被附加。 然后，你可以在不加限定符的情况下使用 usethis 中的任何函数，例如，可以调用 use_testthat()。 如果你选择指定命名空间，例如在更程序化的风格下工作时，请确保使用 usethis 对调用进行限定，例如，usethis::use_testthat()。\n\n2.2.1 个人启动配置\n你可以通过以下方式附加 (attach) devtools 程序包：\n\nlibrary(devtools)\n\n但是，在每个 R session 中重复附加 devtools 很快就会变得令人恼火。 因此，我们强烈建议将 devtools 附加3到你的 .Rprofile 启动文件中, 如下所示：\n\nif (interactive()) {\n  suppressMessages(require(devtools))\n}\n\n为了方便起见， use_devtools() 函数会在你需要时创建 .Rprofile 文件，将其打开并进行编辑，然后在剪切板和屏幕上放置必要的代码行。\n\n\n\n\n\n\nWarning\n\n\n\n一般来说，在 .Rprofile 中附加软件包是一个坏主意，因为它会让你创建无法通过显式调用 library(foo) 来反映所有依赖关系的 R 脚本。 但是 devtools 是一个工作流包，它用于简化软件包开发过程，因此不太可能被嵌入到任何分析脚本中。 请注意，我们仍然注意只在交互式会话中附加软件包。\n\n\nusethis 会查找某些选项，例如当你从头 (de novo) 开始创建软件包时。 这允许你为自己（作为软件包维护者）或你的首选许可证指定个人默认值。 下面是一个可以进入 .Rprofile 的代码片段示例：\n\noptions(\n  \"Authors@R\" = utils::person(\n    \"Jane\", \"Doe\",\n    email = \"jane@example.com\",\n    role = c(\"aut\", \"cre\"),\n    comment = c(ORCID = \"0000-1111-2222-3333\")\n  ),\n  License = \"MIT + file LICENSE\"\n)\n\n以下代码展示了如何安装 devtools 和 usethis 的开发版本。 有时，本书可能会介绍 devtools 和相关软件包的开发版本中尚未发布的新功能。\n\ndevtools::install_github(\"r-lib/devtools\")\ndevtools::install_github(\"r-lib/usethis\")\n\n# or, alternatively\npak::pak(\"r-lib/devtools\")\npak::pak(\"r-lib/usethis\")"
  },
  {
    "objectID": "setup.html#setup-tools",
    "href": "setup.html#setup-tools",
    "title": "2  系统设置",
    "section": "\n2.3 R 构建工具链",
    "text": "2.3 R 构建工具链\n要能够完全从源代码构建 R 软件包，还需要一个编译器和其他一些命令行工具。 这可能不是严格必须的，除非你想构建包含 C 或 C++ 代码的程序包。 特别是如果你正在使用 RStudio，可以暂时把它放在一边。 一旦你尝试执行需要设置开发环境的操作，IDE 将发出警报并提供支持。 请阅读下面的建议，了解如何自己做到这一点。\n\n2.3.1 Windows\n在 Windows 上，从源代码构建程序包所需要的工具集叫做 RTools。\nRtools 不是 R 软件包。 它不是通过 install.packages() 进行安装。 而是通过从 https://cran.r-project.org/bin/windows/Rtools/ 下载并运行安装程序来安装。\n在 RTools 的安装过程中，您可能会看到一个窗口，它询问您是否“Select Additional Tasks”。\n\n\n不要选中“Edit the system PATH”。devtools 和 Rstudio 会在需要时自动将 RTools 放入 PATH。\n选中 “Save version information to registry”。它应该是默认选中的。\n\n2.3.2 macOS\n你需要安装 Xcode 命令行工具，这需要你注册成为 Apple 开发人员（不用担心，对于哪些只希望安装应用程序，例如 Xcode 命令行工具的个人来说是免费的。只有那些想要发布应用程序、访问测试版软件并集成Siri、Apple Pay和iCloud等功能的人才需要加入付费开发者计划。）。\n然后，在 shell 中执行如下操作：\nxcode-select --install\n或者，你可以从 Xcode from the Mac App Store 安装最新版本的完整的 Xcode。 这会包含许多您不需要的东西，但是它有 App Store 便利性的优势。\n\n2.3.3 Linux\n请确保你不仅已经安装了 R，还安装了 R 开发工具 (R development tools)。 例如，在 Ubuntu（以及 Debian）上，你需要安装 r-base-dev 包：\nsudo apt install r-base-dev\n在 Fedora 和 RedHat 上，开发工具（名为 R-core-devel）将会在你使用 sudo dnf install R 时自动安装。"
  },
  {
    "objectID": "setup.html#验证系统设置",
    "href": "setup.html#验证系统设置",
    "title": "2  系统设置",
    "section": "\n2.4 验证系统设置",
    "text": "2.4 验证系统设置\n你可以使用 devtools::dev_sitrep() 生成一个“（软件包）开发环境报告”：\n\ndevtools::dev_sitrep()\n#&gt; ── R ───────────────────────────────────────────────────────────────────────\n#&gt; • version: 4.1.2\n#&gt; • path: '/Library/Frameworks/R.framework/Versions/4.1/Resources/'\n#&gt; ── RStudio ─────────────────────────────────────────────────────────────────\n#&gt; • version: 2022.2.0.443\n#&gt; ── devtools ────────────────────────────────────────────────────────────────\n#&gt; • version: 2.4.3.9000\n#&gt; • devtools or its dependencies out of date:\n#&gt;   'gitcreds', 'gh'\n#&gt;   Update them with `devtools::update_packages(\"devtools\")`\n#&gt; ── dev package ─────────────────────────────────────────────────────────────\n#&gt; • package: 'rpkgs'\n#&gt; • path: '/Users/jenny/rrr/r-pkgs/'\n#&gt; • rpkgs dependencies out of date:\n#&gt;   'gitcreds', 'generics', 'tidyselect', 'dplyr', 'tidyr', 'broom', 'gh'\n#&gt;  Update them with `devtools::install_dev_deps()`\n\n如果它揭示了某些工具或软件包丢失或过时的情况，那么我们鼓励你进行相应的更新。"
  },
  {
    "objectID": "setup.html#footnotes",
    "href": "setup.html#footnotes",
    "title": "2  系统设置",
    "section": "",
    "text": "在写作本书时，devtools 提供了来自 remotes, pkgbuild, pkgload, rcmdcheck, revdepcheck, sessioninfo, usethis, testthat, and roxygen2 的功能↩︎\n译者注：R 中导入软件包的实质是载入其命名空间并将它添加到搜索列表中。↩︎\n这是我们推荐使用 require() 而非 library() 的少数情况之一。如果 library() 无法附加软件包，它将失败报错，从而终止执行你的 .Rprofile 文件。 如果 require() 无法附加软件包，它将会发出警告但仍然允许你的 .Rprofile 继续执行。 这将在 ?sec-dependencies-attach-vs-load 中进一步讨论。↩︎"
  },
  {
    "objectID": "structure.html#sec-package-states",
    "href": "structure.html#sec-package-states",
    "title": "3  软件包结构与状态",
    "section": "\n3.1 Package states",
    "text": "3.1 Package states\nWhen you create or modify a package, you work on its “source code” or “source files”. You interact with the in-development package in its source form. This is NOT the package form you are most familiar with from day-to-day usage. Package development workflows make much more sense if you understand the five states an R package can be in:\n\nsource\nbundled\nbinary\ninstalled\nin-memory\n\nYou already know some of the functions that put packages into these states. For example, install.packages() can move a package from the source, bundled, or binary states into the installed state. devtools::install_github() takes a source package on GitHub and moves it into the installed state. The library() function loads an installed package into memory, making it available for immediate and direct use."
  },
  {
    "objectID": "structure.html#sec-source-package",
    "href": "structure.html#sec-source-package",
    "title": "3  软件包结构与状态",
    "section": "\n3.2 Source package",
    "text": "3.2 Source package\nA source package is just a directory of files with a specific structure. It includes particular components, such as a DESCRIPTION file, an R/ directory containing .R files, and so on. Most of the remaining chapters in this book are dedicated to detailing these components.\nIf you are new to package development, you may have never seen a package in source form! You might not even have any source packages on your computer. The easiest way to see a package in source form right away is to browse around its code on the web.\nMany R packages are developed in the open on GitHub (or GitLab or similar). The best case scenario is that you visit the package’s CRAN landing page, e.g.:\n\nforcats: https://cran.r-project.org/package=forcats\n\nreadxl: https://cran.r-project.org/package=readxl\n\n\nand one of its URLs links to a repository on a public hosting service, e.g.:\n\nforcats: https://github.com/tidyverse/forcats\n\nreadxl: https://github.com/tidyverse/readxl\n\n\nSome maintainers forget to list this URL, even though the package is developed in a public repository, but you still might be able to discover it via search.\nEven if a package is not developed on a public platform, you can visit its source in the unofficial, read-only mirror maintained by R-hub. Examples:\n\nMASS: https://github.com/cran/MASS\n\ncar: https://github.com/cran/car\n\n\nNote that exploring a package’s source and history within the cran GitHub organisation is not the same as exploring the package’s true development venue, because this source and its evolution is just reverse-engineered from the package’s CRAN releases. This presents a redacted view of the package and its history, but, by definition, it includes everything that is essential."
  },
  {
    "objectID": "structure.html#sec-bundled-package",
    "href": "structure.html#sec-bundled-package",
    "title": "3  软件包结构与状态",
    "section": "\n3.3 Bundled package",
    "text": "3.3 Bundled package\nA bundled package is a package that’s been compressed into a single file. By convention (from Linux), package bundles in R use the extension .tar.gz and are sometimes referred to as “source tarballs”. This means that multiple files have been reduced to a single file (.tar) and then compressed using gzip (.gz). While a bundle is not that useful on its own, it’s a platform-agnostic, transportation-friendly intermediary between a source package and an installed package.\nIn the rare case that you need to make a bundle from a package you’re developing locally, use devtools::build(). Under the hood, this calls pkgbuild::build() and, ultimately, R CMD build, which is described further in the Building package tarballs section of Writing R Extensions.\nThis should tip you off that a package bundle or “source tarball” is not simply the result of making a tar archive of the source files, then compressing with gzip. By convention, in the R world, a few more operations are carried out when making the .tar.gz file and this is why we’ve elected to refer to this form as a package bundle, in this book.\nEvery CRAN package is available in bundled form, via the “Package source” field of its landing page. Continuing our examples from above, you could download the bundles forcats_0.4.0.tar.gz and readxl_1.3.1.tar.gz (or whatever the current versions may be). You could unpack such a bundle in the shell (not the R console) like so:\ntar xvf forcats_0.4.0.tar.gz\nIf you decompress a bundle, you’ll see it looks almost the same as a source package. Figure 3.1 shows the files present in the source, bundled, and binary forms of a fictional package named zzzpackage. We’ve deliberately crafted this example to include most of the package parts covered in this book. Not every package will include every file seen here, nor does this diagram include every possible file that might appear in a package.\n\n\n\n\nFigure 3.1: Package forms: source vs. bundled vs. binary.\n\n\n\nThe main differences between a source package and an uncompressed bundle are:\n\nVignettes have been built, so rendered outputs, such as HTML, appear below inst/doc/ and a vignette index appears in the build/ directory.\nA local source package might contain temporary files used to save time during development, like compilation artefacts in src/. These are never found in a bundle.\nAny files listed in .Rbuildignore are not included in the bundle. These are typically files that facilitate your development process, but that should be excluded from the distributed product.\n\n\n3.3.1 .Rbuildignore\n\nYou won’t need to contemplate the exact structure of package .tar.gz files very often, but you do need to understand the .Rbuildignore file. It controls which files from the source package make it into the downstream forms.\nEach line of .Rbuildignore is a Perl-compatible regular expression that is matched, without regard to case, against the path to each file in the source package1. If the regular expression matches, that file or directory is excluded. Note there are some default exclusions implemented by R itself, mostly relating to classic version control systems and editors, such as SVN, Git, and Emacs.\nWe usually modify .Rbuildignore with the usethis::use_build_ignore() function, which takes care of easy-to-forget details, such as regular expression anchoring and escaping. To exclude a specific file or directory (the most common use case), you MUST anchor the regular expression. For example, to exclude a directory called “notes”, the .Rbuildignore entry must be ^notes$, whereas the unanchored regular expression notes will match any file name containing “notes”, e.g. R/notes.R, man/important-notes.R, data/endnotes.Rdata, etc. We find that use_build_ignore() helps us get more of our .Rbuildignore entries right the first time.\n.Rbuildignore is a way to resolve some of the tension between the practices that support your development process and CRAN’s requirements for submission and distribution (?sec-release). Even if you aren’t planning to release on CRAN, following these conventions will allow you to make the best use of R’s built-in tooling for package checking and installation. The files you should .Rbuildignore fall into two broad, semi-overlapping classes:\n\nFiles that help you generate package contents programmatically. Examples:\n\nUsing README.Rmd to generate an informative and current README.md (?sec-readme).\nStoring .R scripts to create and update internal or exported data (?sec-data-data-raw).\n\n\nFiles that drive package development, checking, and documentation, outside of CRAN’s purview. Examples:\n\nFiles relating to the RStudio IDE (Section 4.2).\nUsing the pkgdown package to generate a website (?sec-website).\nConfiguration files related to continuous integration/deployment (?sec-sw-dev-practices-ci).\n\n\n\nHere is a non-exhaustive list of typical entries in the .Rbuildignore file for a package in the tidyverse:\n^.*\\.Rproj$         # Designates the directory as an RStudio Project\n^\\.Rproj\\.user$     # Used by RStudio for temporary files\n^README\\.Rmd$       # An Rmd file used to generate README.md\n^LICENSE\\.md$       # Full text of the license\n^cran-comments\\.md$ # Comments for CRAN submission\n^data-raw$          # Code used to create data included in the package\n^pkgdown$           # Resources used for the package website\n^_pkgdown\\.yml$     # Configuration info for the package website\n^\\.github$          # GitHub Actions workflows\nNote that the comments above must not appear in an actual .Rbuildignore file; they are included here only for exposition.\nWe’ll mention when you need to add files to .Rbuildignore whenever it’s important. Remember that usethis::use_build_ignore() is an attractive way to manage this file. Furthermore, many usethis functions that add a file that should be listed in .Rbuildignore take care of this automatically. For example, use_read_rmd() adds “^README\\.Rmd$” to .Rbuildignore."
  },
  {
    "objectID": "structure.html#sec-structure-binary",
    "href": "structure.html#sec-structure-binary",
    "title": "3  软件包结构与状态",
    "section": "\n3.4 Binary package",
    "text": "3.4 Binary package\nIf you want to distribute your package to an R user who doesn’t have package development tools, you’ll need to provide a binary package. The primary maker and distributor of binary packages is CRAN, not individual maintainers. But even if you delegate the responsibility of distributing your package to CRAN, it’s still important for a maintainer to understand the nature of a binary package.\nLike a package bundle, a binary package is a single file. Unlike a bundled package, a binary package is platform specific and there are two basic flavors: Windows and macOS. (Linux users are generally required to have the tools necessary to install from .tar.gz files, although the emergence of resources like Posit Public Package Manager is giving Linux users the same access to binary packages as their colleagues on Windows and macOS.)\nBinary packages for macOS are stored as .tgz, whereas Windows binary packages end in .zip. If you need to make a binary package, use devtools::build(binary = TRUE) on the relevant operating system. Under the hood, this calls pkgbuild::build(binary = TRUE) and, ultimately, R CMD INSTALL --build, which is described further in the Building binary packages section of Writing R Extensions. If you choose to release your package on CRAN (?sec-release), you submit your package in bundled form, then CRAN creates and distributes the package binaries.\nCRAN packages are usually available in binary form, for both macOS and Windows, for the current, previous, and (possibly) development versions of R. Continuing our examples from above, you could download binary packages such as:\n\nforcats for macOS: forcats_0.4.0.tgz\n\nreadxl for Windows: readxl_1.3.1.zip\n\n\nand this is, indeed, part of what’s usually going on behind the scenes when you call install.packages().\nIf you uncompress a binary package, you’ll see that the internal structure is rather different from a source or bundled package. Figure 3.1 includes this comparison, so this is a good time to revisit that diagram. Here are some of the most notable differences:\n\nThere are no .R files in the R/ directory - instead there are three files that store the parsed functions in an efficient file format. This is basically the result of loading all the R code and then saving the functions with save(). (In the process, this adds a little extra metadata to make things as fast as possible).\nA Meta/ directory contains a number of .rds files. These files contain cached metadata about the package, like what topics the help files cover and a parsed version of the DESCRIPTION file. (You can use readRDS() to see exactly what’s in those files). These files make package loading faster by caching costly computations.\nThe actual help content appears in help/ and html/ (no longer in man/).\nIf you had any code in the src/ directory, there will now be a libs/ directory that contains the results of compiling the code.\nIf you had any objects in data/, they have now been converted into a more efficient form.\nThe contents of inst/ are moved to the top-level directory. For example, vignette files are now in doc/.\nSome files and folders have been dropped, such as README.md, build/, tests/, and vignettes/."
  },
  {
    "objectID": "structure.html#sec-installed-package",
    "href": "structure.html#sec-installed-package",
    "title": "3  软件包结构与状态",
    "section": "\n3.5 Installed package",
    "text": "3.5 Installed package\nAn installed package is a binary package that’s been decompressed into a package library (described in Section 3.7). Figure 3.2 illustrates the many ways a package can be installed, along with a few other functions for converting a package from one state to another. This diagram is complicated! In an ideal world, installing a package would involve stringing together a set of simple steps: source -&gt; bundle, bundle -&gt; binary, binary -&gt; installed. In the real world, it’s not this simple because there are often (faster) shortcuts available.\n\n\n\n\nFigure 3.2: Many methods for converting between package states.\n\n\n\nThe built-in command line tool R CMD INSTALL powers all package installation. It can install a package from source files, a bundle (a.k.a. a source tarball), or a binary package. Details are available in the Installing packages section of R Installation and Administration. Just like with devtools::build(), devtools provides a wrapper function, devtools::install(), that makes this tool available from within an R session.\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio can also help you install your in-development package via the Install and More drop-downs in the Build pane and with Install Package in the Build menu.\n\n\nMost useRs understandably like to install packages from the comfort of an R session and directly from CRAN. The built-in function install.packages() meets this need. It can download the package, in various forms, install it, and optionally attend to the installation of dependencies.\nThere is a price, however, for the convenience of installing R packages from within an R session. As you might expect, it can be a bit tricky to re-install a package that is already in use in the current session. This actually works most of the time, but sometimes it does not, especially when installing an R package with compiled code on Windows. Due to how file handles are locked on Windows, an attempt to install a new version of a package that’s in use can result in a corrupt installation where the package’s R code has been updated, but its compiled code has not. When troubleshooting, Windows users should strive to install packages in a clean R session, with as few packages loaded as possible.\nThe pak package (https://pak.r-lib.org/) is a relative newcomer (at the time of writing) and provides a promising alternative to install.packages(), as well as other more specialized functions such as devtools::install_github(). It’s too early to make a blanket recommendation for using pak for all of your package installation needs, but we are certainly using it more and more in our personal workflows. One of pak’s flagship features is that it nicely solves the “locked DLL” problem described above, i.e. updating a package with compiled code on Windows. As you get deeper into package development, you will find yourself doing a whole new set of tasks, such as installing a dependency from an in-development branch or scrutinizing package dependency trees. pak provides a rich toolkit for this and many other related tasks. We predict that pak will soon become our official recommendation for how to install packages (and more).\nHowever, in the meantime, we describe the status quo. devtools has long offered a family of install_*() functions to address some needs beyond the reach of install.packages() or to make existing capabilities easier to access. These functions are actually maintained in the remotes package and are re-exported by devtools. (Given what we said above, it is likely that remotes will essentially become superseded, in favor of pak, but we’re not quite there yet.)\n\nlibrary(remotes)\n\nfuns &lt;- as.character(lsf.str(\"package:remotes\"))\ngrep(\"^install_.+\", funs, value = TRUE)\n#&gt;  [1] \"install_bioc\"      \"install_bitbucket\" \"install_cran\"     \n#&gt;  [4] \"install_deps\"      \"install_dev\"       \"install_git\"      \n#&gt;  [7] \"install_github\"    \"install_gitlab\"    \"install_local\"    \n#&gt; [10] \"install_remote\"    \"install_svn\"       \"install_url\"      \n#&gt; [13] \"install_version\"\n\ninstall_github() is the most useful of these functions and is also featured in Figure 3.2. It is the flagship example of a family of functions that can download a package from a remote location that is not CRAN and do whatever is necessary to install it and its dependencies. The rest of the devtools/remotes install_*() functions are aimed at making things that are technically possible with base tooling a bit easier or more explicit, such as install_version() which installs a specific version of a CRAN package.\nAnalogous to .Rbuildignore, described in section Section 3.3.1, .Rinstignore lets you keep files present in a package bundle out of the installed package. However, in contrast to .Rbuildignore, this is rather obscure and rarely needed."
  },
  {
    "objectID": "structure.html#in-memory-package",
    "href": "structure.html#in-memory-package",
    "title": "3  软件包结构与状态",
    "section": "\n3.6 In-memory package",
    "text": "3.6 In-memory package\nWe finally arrive at a command familiar to everyone who uses R:\n\nlibrary(usethis)\n\nAssuming usethis is installed, this call makes its functions available for use, i.e. now we can do:\n\ncreate_package(\"/path/to/my/coolpackage\")\n\nThe usethis package has been loaded into memory and, in fact, has also been attached to the search path. The distinction between loading and attaching packages is not important when you’re writing scripts, but it’s very important when you’re writing packages. You’ll learn more about the difference and why it’s important in ?sec-dependencies-attach-vs-load.\nlibrary() is not a great way to iteratively tweak and test drive a package you’re developing, because it only works for an installed package. In Section 4.4, you’ll learn how devtools::load_all() accelerates development by allowing you to load a source package directly into memory."
  },
  {
    "objectID": "structure.html#sec-library",
    "href": "structure.html#sec-library",
    "title": "3  软件包结构与状态",
    "section": "\n3.7 Package libraries",
    "text": "3.7 Package libraries\nWe just discussed the library() function, whose name is inspired by what it does. When you call library(somepackage), R looks through the current libraries for an installed package named “somepackage” and, if successful, it makes somepackage available for use.\nIn R, a library is a directory containing installed packages, sort of like a library for books. Unfortunately, in the R world, you will frequently encounter confused usage of the words “library” and “package”. It’s common for someone to refer to dplyr, for example, as a library when it is actually a package. There are a few reasons for the confusion. First, R’s terminology arguably runs counter to broader programming conventions, where the usual meaning of “library” is closer to what we mean by “package”. The name of the library() function itself probably reinforces the wrong associations. Finally, this vocabulary error is often harmless, so it’s easy for R users to fall into the wrong habit and for people who point out this mistake to look like insufferable pedants. But here’s the bottom line:\n\nWe use the library() function to load 2 a package.\n\nThe distinction between the two is important and useful as you get involved in package development.\nYou can have multiple libraries on your computer. In fact, many of you already do, especially if you’re on Windows. You can use .libPaths() to see which libraries are currently active. Here’s how this might look on Windows:\n\n# on Windows\n.libPaths()\n#&gt; [1] \"C:/Users/jenny/Documents/R/win-library/4.2\"\n#&gt; [2] \"C:/Program Files/R/R-4.2.2/library\"\n\nlapply(.libPaths(), list.dirs, recursive = FALSE, full.names = FALSE)\n#&gt; [[1]]\n#&gt;   [1] \"abc\"           \"anytime\"       \"askpass\"       \"assertthat\"   \n#&gt;  ...\n#&gt; [145] \"zeallot\"      \n#&gt; \n#&gt; [[2]]\n#&gt;  [1] \"base\"         \"boot\"         \"class\"        \"cluster\"     \n#&gt;  [5] \"codetools\"    \"compiler\"     \"datasets\"     \"foreign\"     \n#&gt;  [9] \"graphics\"     \"grDevices\"    \"grid\"         \"KernSmooth\"  \n#&gt; [13] \"lattice\"      \"MASS\"         \"Matrix\"       \"methods\"     \n#&gt; [17] \"mgcv\"         \"nlme\"         \"nnet\"         \"parallel\"    \n#&gt; [21] \"rpart\"        \"spatial\"      \"splines\"      \"stats\"       \n#&gt; [25] \"stats4\"       \"survival\"     \"tcltk\"        \"tools\"       \n#&gt; [29] \"translations\" \"utils\"\n\nHere’s a similar look on macOS (but your results may vary):\n\n# on macOS\n.libPaths()\n#&gt; [1] \"/Users/jenny/Library/R/arm64/4.2/library\"\n#&gt; [2] \"/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\"\n\nlapply(.libPaths(), list.dirs, recursive = FALSE, full.names = FALSE)\n#&gt; [[1]]\n#&gt;    [1] \"abc\"                  \"abc.data\"             \"abind\"                \n#&gt;  ...\n#&gt; [1033] \"Zelig\"                \"zip\"                  \"zoo\"                 \n#&gt; \n#&gt; [[2]]\n#&gt;  [1] \"base\"         \"boot\"         \"class\"        \"cluster\"     \n#&gt;  [5] \"codetools\"    \"compiler\"     \"datasets\"     \"foreign\"     \n#&gt;  [9] \"graphics\"     \"grDevices\"    \"grid\"         \"KernSmooth\"  \n#&gt; [13] \"lattice\"      \"MASS\"         \"Matrix\"       \"methods\"     \n#&gt; [17] \"mgcv\"         \"nlme\"         \"nnet\"         \"parallel\"    \n#&gt; [21] \"rpart\"        \"spatial\"      \"splines\"      \"stats\"       \n#&gt; [25] \"stats4\"       \"survival\"     \"tcltk\"        \"tools\"       \n#&gt; [29] \"translations\" \"utils\"\n\nIn both cases we see two active libraries, consulted in this order:\n\nA user library\nA system-level or global library\n\nThis setup is typical on Windows, but is something you usually need to opt into on macOS and Linux3. With this setup, add-on packages installed from CRAN (or elsewhere) or under local development are kept in the user library. Above, the macOS system is used as a primary development machine and has many packages here (~1000), whereas the Windows system is only used occasionally and is much more spartan. The core set of base and recommended packages that ship with R live in the system-level library and are the same on all operating systems. This separation appeals to many developers and makes it easy to, for example, clean out your add-on packages without disturbing your base R installation.\nIf you’re on macOS or Linux and only see one library, there is no urgent need to change anything. But next time you upgrade R, consider creating a user-level library. By default, R looks for a user library found at the path stored in the environment variable R_LIBS_USER, which itself defaults to ~/Library/R/m/x.y/library, on macOS, and ~/R/m-library/x.y on Linux (where m is a concise description of your CPU architecture, and x.y is the R version). You can see this path with Sys.getenv(\"R_LIBS_USER\"). These directories do not exist by default, and the use of them must be enabled by creating the directory. When you install a new version of R, and prior to installing any add-on packages, use dir.create(Sys.getenv(\"R_LIBS_USER\"), recursive = TRUE) to create a user library in the default location. Now you will have the library setup seen above. Alternatively, you could set up a user library elsewhere and tell R about that by setting the R_LIBS_USER environment variable in .Renviron. The simplest way to edit your .Renviron file is with usethis::edit_r_environ(), which will create the file if it doesn’t exist, and open it for editing.\nThe filepaths for these libraries also make it clear they are associated with a specific version of R (4.2.x at the time of writing), which is also typical. This reflects and enforces the fact that you need to reinstall your add-on packages when you update R from, say, 4.1 to 4.2, which is a change in the minor version. You generally do not need to re-install add-on packages for a patch release, e.g., going from R 4.2.1 to 4.2.2.\nAs your R usage grows more sophisticated, it’s common to start managing package libraries with more intention. For example, tools like renv (and its predecessor packrat) automate the process of managing project-specific libraries. This can be important for making data products reproducible, portable, and isolated from one another. A package developer might prepend the library search path with a temporary library, containing a set of packages at specific versions, in order to explore issues with backwards and forwards compatibility, without affecting other day-to-day work. Reverse dependency checks are another example where we explicitly manage the library search path.\nHere are the main levers that control which libraries are active, in order of scope and persistence:\n\nEnvironment variables, like R_LIBS and R_LIBS_USER, which are consulted at startup.\nCalling .libPaths() with one or more filepaths.\nExecuting small snippets of code with a temporarily altered library search path via withr::with_libpaths().\nArguments to individual functions, like install.packages(lib =) and library(lib.loc =).\n\nFinally, it’s important to note that library() should NEVER be used inside a package. Packages and scripts rely on different mechanisms for declaring their dependencies and this is one of the biggest adjustments you need to make in your mental model and habits. We explore this topic fully in ?sec-description-imports-suggests and ?sec-dependencies-in-practice."
  },
  {
    "objectID": "structure.html#footnotes",
    "href": "structure.html#footnotes",
    "title": "3  软件包结构与状态",
    "section": "",
    "text": "To see the set of filepaths that should be on your radar, execute dir(full.names = TRUE, recursive = TRUE, include.dirs = TRUE, all.files = TRUE) in the package’s top-level directory.↩︎\nWell, actually, library() loads and attaches a package, but that’s a topic for ?sec-dependencies-attach-vs-load.↩︎\nFor more details, see the Maintaining R section in What They Forgot To Teach You About R, Managing Libraries in R Installation and Administration and the R help files for ?Startup and ?.libPaths.↩︎"
  },
  {
    "objectID": "workflow101.html#sec-workflow101-create-package",
    "href": "workflow101.html#sec-workflow101-create-package",
    "title": "4  Fundamental development workflows",
    "section": "\n4.1 Create a package",
    "text": "4.1 Create a package\n\n4.1.1 Survey the existing landscape\nMany packages are born out of one person’s frustration at some common task that should be easier. How should you decide whether something is package-worthy? There’s no definitive answer, but it’s helpful to appreciate at least two types of payoff:\n\nProduct: your life will be better when this functionality is implemented formally, in a package.\nProcess: greater mastery of R will make you more effective in your work.\n\nIf all you care about is the existence of a product, then your main goal is to navigate the space of existing packages. Silge, Nash, and Graves organized a survey and sessions around this at useR! 2017 and their write up for the R Journal (Silge, Nash, and Graves 2018) provides a comprehensive roundup of resources.\nIf you are looking for ways to increase your R mastery, you should still educate yourself about the landscape. But there are plenty of good reasons to make your own package, even if there is relevant prior work. The way experts got that way is by actually building things, often very basic things, and you deserve the same chance to learn by tinkering. If you’re only allowed to work on things that have never been touched, you’re likely looking at problems that are either very obscure or very difficult.\nIt’s also valid to evaluate the suitability of existing tools on the basis of user interface, defaults, and edge case behaviour. A package may technically do what you need, but perhaps it’s very unergonomic for your use case. In this case, it may make sense for you to develop your own implementation or to write wrapper functions that smooth over the sharp edges.\nIf your work falls into a well-defined domain, educate yourself about the existing R packages, even if you’ve resolved to create your own package. Do they follow specific design patterns? Are there specific data structures that are common as the primary input and output? For example, there is a very active R community around spatial data analysis (r-spatial.org) that has successfully self-organised to promote greater consistency across packages with different maintainers. In modeling, the hardhat package provides scaffolding for creating a modeling package that plays well with the tidymodels ecosystem. Your package will get more usage and will need less documentation if it fits nicely into the surrounding landscape.\n\n4.1.2 Name your package\n\n“There are only two hard things in Computer Science: cache invalidation and naming things.”\n— Phil Karlton\n\nBefore you can create your package, you need to come up with a name for it. This can be the hardest part of creating a package! (Not least because no one can automate it for you.)\n\n4.1.2.1 Formal requirements\nThere are three formal requirements:\n\nThe name can only consist of letters, numbers, and periods, i.e., ..\nIt must start with a letter.\nIt cannot end with a period.\n\nUnfortunately, this means you can’t use either hyphens or underscores, i.e., - or _, in your package name. We recommend against using periods in package names, due to confusing associations with file extensions and S3 methods.\n\n4.1.2.2 Things to consider\nIf you plan to share your package with others, it’s important to come up with a good name. Here are some tips:\n\nPick a unique name that’s easy to Google. This makes it easy for potential users to find your package (and associated resources) and for you to see who’s using it.\n\nDon’t pick a name that’s already in use on CRAN or Bioconductor. You may also want to consider some other types of name collision:\n\nIs there an in-development package maturing on, say, GitHub that already has some history and seems to be heading towards release?\nIs this name already used for another piece of software or for a library or framework in, e.g., the Python or JavaScript ecosystem?\n\n\nAvoid using both upper and lower case letters: doing so makes the package name hard to type and even harder to remember. For example, it’s hard to remember if it’s Rgtk2 or RGTK2 or RGtk2.\nGive preference to names that are pronounceable, so people are comfortable talking about your package and have a way to hear it inside their head.\n\nFind a word that evokes the problem and modify it so that it’s unique. Here are some examples:\n\nlubridate makes dates and times easier.\nrvest “harvests” the content from web pages.\nr2d3 provides utilities for working with D3 visualizations.\nforcats is an anagram of factors, which we use for categorical data.\n\n\n\nUse abbreviations, like the following:\n\nRcpp = R + C++ (plus plus)\nbrms = Bayesian Regression Models using Stan\n\n\n\nAdd an extra R, for example:\n\nstringr provides string tools.\nbeepr plays notification sounds.\ncallr calls R, from R.\n\n\n\nDon’t get sued.\n\nIf you’re creating a package that talks to a commercial service, check the branding guidelines. For example, rDrop isn’t called rDropbox because Dropbox prohibits any applications from using the full trademarked name.\n\n\n\nNick Tierney presents a fun typology of package names in his Naming Things blog post, which also includes more inspiring examples. He also has some experience with renaming packages; the post So, you’ve decided to change your r package name is a good resource if you don’t get this right the first time.\n\n4.1.2.3 Use the available package\nIt is impossible to abide by all of the above suggestions simultaneously, so you will need to make some trade-offs. The available package has a function called available() that helps you evaluate a potential package name from many angles:\n\nlibrary(available)\n\navailable(\"doofus\")\n#&gt; Urban Dictionary can contain potentially offensive results,\n#&gt;   should they be included? [Y]es / [N]o:\n#&gt; 1: 1\n#&gt; ── doofus ──────────────────────────────────────────────────────────────────\n#&gt; Name valid: ✔\n#&gt; Available on CRAN: ✔ \n#&gt; Available on Bioconductor: ✔\n#&gt; Available on GitHub:  ✔ \n#&gt; Abbreviations: http://www.abbreviations.com/doofus\n#&gt; Wikipedia: https://en.wikipedia.org/wiki/doofus\n#&gt; Wiktionary: https://en.wiktionary.org/wiki/doofus\n#&gt; Sentiment:???\n\navailable::available() does the following:\n\nChecks for validity.\nChecks availability on CRAN, Bioconductor, and beyond.\nSearches various websites to help you discover any unintended meanings. In an interactive session, the URLs you see above are opened in browser tabs.\nAttempts to report whether name has positive or negative sentiment.\n\npak::pkg_name_check() is alternative function with a similar purpose. Since the pak package is under more active development than available, it may emerge as the better option going forward.\n\n4.1.3 Package creation\nOnce you’ve come up with a name, there are two ways to create the package.\n\nCall usethis::create_package().\nIn RStudio, do File &gt; New Project &gt; New Directory &gt; R Package. This ultimately calls usethis::create_package(), so really there’s just one way.\n\nThis produces the smallest possible working package, with three components:\n\nAn R/ directory, which you’ll learn about in ?sec-r.\nA basic DESCRIPTION file, which you’ll learn about in ?sec-description.\nA basic NAMESPACE file, which you’ll learn about in ?sec-dependencies-NAMESPACE-file.\n\nIt may also include an RStudio project file, pkgname.Rproj, that makes your package easy to use with RStudio, as described below. Basic .Rbuildignore and .gitignore files are also left behind.\n\n\n\n\n\n\nWarning\n\n\n\nDon’t use package.skeleton() to create a package. Because this function comes with R, you might be tempted to use it, but it creates a package that immediately throws errors with R CMD build. It anticipates a different development process than we use here, so repairing this broken initial state just makes unnecessary work for people who use devtools (and, especially, roxygen2). Use create_package().\n\n\n\n4.1.4 Where should you create_package()?\nThe main and only required argument to create_package() is the path where your new package will live:\n\ncreate_package(\"path/to/package/pkgname\")\n\nRemember that this is where your package lives in its source form (Section 3.2), not in its installed form (Section 3.5). Installed packages live in a library and we discussed conventional setups for libraries in Section 3.7.\nWhere should you keep source packages? The main principle is that this location should be distinct from where installed packages live. In the absence of external considerations, a typical user should designate a directory inside their home directory for R (source) packages. We discussed this with colleagues and the source of many tidyverse packages lives inside directories like ~/rrr/, ~/documents/tidyverse/, ~/r/packages/, or ~/pkg/. Some of us use one directory for this, others divide source packages among a few directories based on their development role (contributor vs. not), GitHub organization (tidyverse vs r-lib), development stage (active vs. not), and so on.\nThe above probably reflects that we are primarily tool-builders. An academic researcher might organize their files around individual publications, whereas a data scientist might organize around data products and reports. There is no particular technical or traditional reason for one specific approach. As long as you keep a clear distinction between source and installed packages, just pick a strategy that works within your overall system for file organization, and use it consistently."
  },
  {
    "objectID": "workflow101.html#sec-workflow101-rstudio-projects",
    "href": "workflow101.html#sec-workflow101-rstudio-projects",
    "title": "4  Fundamental development workflows",
    "section": "\n4.2 RStudio Projects",
    "text": "4.2 RStudio Projects\ndevtools works hand-in-hand with RStudio, which we believe is the best development environment for most R users. To be clear, you can use devtools without using RStudio and you can develop packages in RStudio without using devtools. But there is a special, two-way relationship that makes it very rewarding to use devtools and RStudio together.\n\n\n\n\n\n\nRStudio\n\n\n\nAn RStudio Project, with a capital “P”, is a regular directory on your computer that includes some (mostly hidden) RStudio infrastructure to facilitate your work on one or more projects, with a lowercase “p”. A project might be an R package, a data analysis, a Shiny app, a book, a blog, etc.\n\n\n\n4.2.1 Benefits of RStudio Projects\nFrom Section 3.2, you already know that a source package lives in a directory on your computer. We strongly recommend that each source package is also an RStudio Project. Here are some of the payoffs:\n\nProjects are very “launch-able”. It’s easy to fire up a fresh instance of RStudio in a Project, with the file browser and working directory set exactly the way you need, ready for work.\n\nEach Project is isolated; code run in one Project does not affect any other Project.\n\nYou can have several RStudio Projects open at once and code executed in Project A does not have any effect on the R session and workspace of Project B.\n\n\nYou get handy code navigation tools like F2 to jump to a function definition and Ctrl + . to look up functions or files by name.\n\nYou get useful keyboard shortcuts and a clickable interface for common package development tasks, like generating documentation, running tests, or checking the entire package.\n\n\n\n\nFigure 4.1: Keyboard Shortcut Quick Reference in RStudio.\n\n\n\n\n\n\n\n\n\n\n\nRStudio\n\n\n\nTo see the most useful keyboard shortcuts, press Alt + Shift + K or use Help &gt; Keyboard Shortcuts Help. You should see something like Figure 4.1.\nRStudio also provides the Command Palette which gives fast, searchable access to all of the IDE’s commands – especially helpful when you can’t remember a particular keyboard shortcut. It is invoked via Ctrl + Shift + P (Windows & Linux) or Cmd + Shift + P (macOS).\n\n\n\n\n\n\n\n\nRStudio\n\n\n\nFollow @rstudiotips on Twitter for a regular dose of RStudio tips and tricks.\n\n\n\n4.2.2 How to get an RStudio Project\nIf you follow our recommendation to create new packages with create_package(), each new package will also be an RStudio Project, if you’re working from RStudio.\nIf you need to designate the directory of a pre-existing source package as an RStudio Project, choose one of these options:\n\nIn RStudio, do File &gt; New Project &gt; Existing Directory.\nCall create_package() with the path to the pre-existing R source package.\nCall usethis::use_rstudio(), with the active usethis project set to an existing R package. In practice, this probably means you just need to make sure your working directory is inside the pre-existing package directory.\n\n4.2.3 What makes an RStudio Project?\nA directory that is an RStudio Project will contain an .Rproj file. Typically, if the directory is named “foo”, the Project file is foo.Rproj. And if that directory is also an R package, then the package name is usually also “foo”. The path of least resistance is to make all of these names coincide and to NOT nest your package inside a subdirectory inside the Project. If you settle on a different workflow, just know it may feel like you are fighting with the tools.\nAn .Rproj file is just a text file. Here is a representative project file you might see in a Project initiated via usethis:\nVersion: 1.0\n\nRestoreWorkspace: No\nSaveWorkspace: No\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nEncoding: UTF-8\n\nAutoAppendNewline: Yes\nStripTrailingWhitespace: Yes\nLineEndingConversion: Posix\n\nBuildType: Package\nPackageUseDevtools: Yes\nPackageInstallArgs: --no-multiarch --with-keep.source\nPackageRoxygenize: rd,collate,namespace\nYou don’t need to modify this file by hand. Instead, use the interface available via Tools &gt; Project Options (Figure 4.2) or Project Options in the Projects menu in the top-right corner (Figure 4.3).\n\n\n\n\nFigure 4.2: Project Options in RStudio.\n\n\n\n\n\n\n\nFigure 4.3: Projects Menu in RStudio.\n\n\n\n\n4.2.4 How to launch an RStudio Project\nDouble-click the foo.Rproj file in macOS’s Finder or Windows Explorer to launch the foo Project in RStudio.\nYou can also launch Projects from within RStudio via File &gt; Open Project (in New Session) or the Projects menu in the top-right corner.\nIf you use a productivity or launcher app, you can probably configure it to do something delightful for .Rproj files. We both use Alfred for this 1, which is macOS only, but similar tools exist for Windows. In fact, this is a very good reason to use a productivity app in the first place.\nIt is very normal – and productive! – to have multiple Projects open at once.\n\n4.2.5 RStudio Project vs. active usethis project\nYou will notice that most usethis functions don’t take a path: they operate on the files in the “active usethis project”. The usethis package assumes that 95% of the time all of these coincide:\n\nThe current RStudio Project, if using RStudio.\nThe active usethis project.\nCurrent working directory for the R process.\n\nIf things seem funky, call proj_sitrep() to get a “situation report”. This will identify peculiar situations and propose ways to get back to a happier state.\n\n# these should usually be the same (or unset)\nproj_sitrep()\n#&gt; *   working_directory: '/Users/jenny/rrr/readxl'\n#&gt; * active_usethis_proj: '/Users/jenny/rrr/readxl'\n#&gt; * active_rstudio_proj: '/Users/jenny/rrr/readxl'"
  },
  {
    "objectID": "workflow101.html#working-directory-and-filepath-discipline",
    "href": "workflow101.html#working-directory-and-filepath-discipline",
    "title": "4  Fundamental development workflows",
    "section": "\n4.3 Working directory and filepath discipline",
    "text": "4.3 Working directory and filepath discipline\nAs you develop your package, you will be executing R code. This will be a mix of workflow calls (e.g., document() or test()) and ad hoc calls that help you write your functions, examples, and tests. We strongly recommend that you keep the top-level of your source package as the working directory of your R process. This will generally happen by default, so this is really a recommendation to avoid development workflows that require you to fiddle with working directory.\nIf you’re totally new to package development, you don’t have much basis for supporting or resisting this proposal. But those with some experience may find this recommendation somewhat upsetting. You may be wondering how you are supposed to express paths when working in subdirectories, such as tests/. As it becomes relevant, we’ll show you how to exploit path-building helpers, such as testthat::test_path(), that determine paths at execution time.\nThe basic idea is that by leaving working directory alone, you are encouraged to write paths that convey intent explicitly (“read foo.csv from the test directory”) instead of implicitly (“read foo.csv from current working directory, which I think is going to be the test directory”). A sure sign of reliance on implicit paths is incessant fiddling with your working directory, because you’re using setwd() to manually fulfill the assumptions that are implicit in your paths.\nUsing explicit paths can design away a whole class of path headaches and makes day-to-day development more pleasant as well. There are two reasons why implicit paths are hard to get right:\n\nRecall the different forms that a package can take during the development cycle (Chapter 3). These states differ from each other in terms of which files and folders exist and their relative positions within the hierarchy. It’s tricky to write relative paths that work across all package states.\nEventually, your package will be processed with built-in tools like R CMD build, R CMD check, and R CMD INSTALL, by you and potentially CRAN. It’s hard to keep track of what the working directory will be at every stage of these processes.\n\nPath helpers like testthat::test_path(), fs::path_package(), and the rprojroot package are extremely useful for building resilient paths that hold up across the whole range of situations that come up during development and usage. Another way to eliminate brittle paths is to be rigorous in your use of proper methods for storing data inside your package (?sec-data) and to target the session temp directory when appropriate, such as for ephemeral testing artefacts (?sec-testing-basics)."
  },
  {
    "objectID": "workflow101.html#sec-workflow101-load-all",
    "href": "workflow101.html#sec-workflow101-load-all",
    "title": "4  Fundamental development workflows",
    "section": "\n4.4 Test drive with load_all()\n",
    "text": "4.4 Test drive with load_all()\n\nThe load_all() function is arguably the most important part of the devtools workflow.\n\n# with devtools attached and\n# working directory set to top-level of your source package ...\n\nload_all()\n\n# ... now experiment with the functions in your package\n\nload_all() is the key step in this “lather, rinse, repeat” cycle of package development:\n\nTweak a function definition.\nload_all()\nTry out the change by running a small example or some tests.\n\nWhen you’re new to package development or to devtools, it’s easy to overlook the importance of load_all() and fall into some awkward habits from a data analysis workflow.\n\n4.4.1 Benefits of load_all()\n\nWhen you first start to use a development environment, like RStudio or VS Code, the biggest win is the ability to send lines of code from an .R script for execution in R console. The fluidity of this is what makes it tolerable to follow the best practice of regarding your source code as real 2 (as opposed to objects in the workspace) and saving .R files (as opposed to saving and reloading .Rdata).\nload_all() has the same significance for package development and, ironically, requires that you NOT test drive package code in the same way as script code. load_all() simulates the full blown process for seeing the effect of a source code change, which is clunky enough 3 that you won’t want to do it very often. Figure 4.4 reinforces that the library() function can only load a package that has been installed, whereas load_all() gives a high-fidelity simulation of this, based on the current package source.\n\n\n\n\nFigure 4.4: devtools::load_all() vs. library().\n\n\n\nThe main benefits of load_all() include:\n\nYou can iterate quickly, which encourages exploration and incremental progress.\n\nThis iterative speedup is especially noticeable for packages with compiled code.\n\n\nYou get to develop interactively under a namespace regime that accurately mimics how things are when someone uses your installed package, with the following additional advantages:\n\nYou can call your own internal functions directly, without using ::: and without being tempted to temporarily define your functions in the global workspace.\nYou can also call functions from other packages that you’ve imported into your NAMESPACE, without being tempted to attach these dependencies via library().\n\n\n\nload_all() removes friction from the development workflow and eliminates the temptation to use workarounds that often lead to mistakes around namespace and dependency management.\n\n4.4.2 Other ways to call load_all()\n\nWhen working in a Project that is a package, RStudio offers several ways to call load_all():\n\nKeyboard shortcut: Cmd+Shift+L (macOS), Ctrl+Shift+L (Windows, Linux)\nBuild pane’s More … menu\nBuild &gt; Load All\n\ndevtools::load_all() is a thin wrapper around pkgload::load_all() that adds a bit of user-friendliness. It is unlikely you will use load_all() programmatically or inside another package, but if you do, you should probably use pkgload::load_all() directly."
  },
  {
    "objectID": "workflow101.html#sec-workflow101-r-cmd-check",
    "href": "workflow101.html#sec-workflow101-r-cmd-check",
    "title": "4  Fundamental development workflows",
    "section": "\n4.5 check() and R CMD check\n",
    "text": "4.5 check() and R CMD check\n\nBase R provides various command line tools and R CMD check is the official method for checking that an R package is valid. It is essential to pass R CMD check if you plan to submit your package to CRAN, but we highly recommend holding yourself to this standard even if you don’t intend to release your package on CRAN. R CMD check detects many common problems that you’d otherwise discover the hard way.\nOur recommended way to run R CMD check is in the R console via devtools:\n\ndevtools::check()\n\nWe recommend this because it allows you to run R CMD check from within R, which dramatically reduces friction and increases the likelihood that you will check() early and often! This emphasis on fluidity and fast feedback is exactly the same motivation as given for load_all(). In the case of check(), it really is executing R CMD check for you. It’s not just a high fidelity simulation, which is the case for load_all().\n\n\n\n\n\n\nRStudio\n\n\n\nRStudio exposes check() in the Build menu, in the Build pane via Check, and in keyboard shortcuts Ctrl + Shift + E (Windows & Linux) or Cmd + Shift + E (macOS).\n\n\nA rookie mistake that we see often in new package developers is to do too much work on their package before running R CMD check. Then, when they do finally run it, it’s typical to discover many problems, which can be very demoralizing. It’s counter-intuitive but the key to minimizing this pain is to run R CMD check more often: the sooner you find a problem, the easier it is to fix4. We model this behaviour very intentionally in Chapter 1.\nThe upper limit of this approach is to run R CMD check every time you make a change. We don’t run check() manually quite that often, but when we’re actively working on a package, it’s typical to check() multiple times per day. Don’t tinker with your package for days, weeks, or months, waiting for some special milestone to finally run R CMD check. If you use GitHub (?sec-sw-dev-practices-git-github), we’ll show you how to set things up so that R CMD check runs automatically every time you push (?sec-sw-dev-practices-gha).\n\n4.5.1 Workflow\nHere’s what happens inside devtools::check():\n\nEnsures that the documentation is up-to-date by running devtools::document().\nBundles the package before checking it (Section 3.3). This is the best practice for checking packages because it makes sure the check starts with a clean slate: because a package bundle doesn’t contain any of the temporary files that can accumulate in your source package, e.g. artifacts like .so and .o files which accompany compiled code, you can avoid the spurious warnings such files will generate.\nSets the NOT_CRAN environment variable to \"true\". This allows you to selectively skip tests on CRAN. See ?testthat::skip_on_cran and ?sec-testing-advanced-skip-on-cran for details.\n\nThe workflow for checking a package is simple, but tedious:\n\nRun devtools::check(), or press Ctrl/Cmd + Shift + E.\nFix the first problem.\nRepeat until there are no more problems.\n\nR CMD check returns three types of messages:\n\nERRORs: Severe problems that you should fix regardless of whether or not you’re submitting to CRAN.\nWARNINGs: Likely problems that you must fix if you’re planning to submit to CRAN (and a good idea to look into even if you’re not).\nNOTEs: Mild problems or, in a few cases, just an observation. If you are submitting to CRAN, you should strive to eliminate all NOTEs, even if they are false positives. If you have no NOTEs, human intervention is not required, and the package submission process will be easier. If it’s not possible to eliminate a NOTE, you’ll need describe why it’s OK in your submission comments, as described in ?sec-release-process. If you’re not submitting to CRAN, carefully read each NOTE. If it’s easy to eliminate the NOTEs, it’s worth it, so that you can continue to strive for a totally clean result. But if eliminating a NOTE will have a net negative impact on your package, it is reasonable to just tolerate it. Make sure that doesn’t lead to you ignoring other issues that really should be addressed.\n\nR CMD check consists of dozens of individual checks and it would be overwhelming to enumerate them here. See our online-only guide to R CMD check for details.\n\n4.5.2 Background on R CMD check\n\nAs you accumulate package development experience, you might want to access R CMD check directly at some point. Remember that R CMD check is something you must run in the terminal, not in the R console. You can see its documentation like so:\nR CMD check --help\nR CMD check can be run on a directory that holds an R package in source form (Section 3.2) or, preferably, on a package bundle (Section 3.3):\nR CMD build somepackage\nR CMD check somepackage_0.0.0.9000.tar.gz  \nTo learn more, see the Checking packages section of Writing R Extensions.\n\n\n\n\nSilge, Julia, John C. Nash, and Spencer Graves. 2018. “Navigating the R Package Universe.” The R Journal 10 (2): 558–63. https://doi.org/10.32614/RJ-2018-058."
  },
  {
    "objectID": "workflow101.html#footnotes",
    "href": "workflow101.html#footnotes",
    "title": "4  Fundamental development workflows",
    "section": "",
    "text": "Specifically, we configure Alfred to favor .Rproj files in its search results when proposing apps or files to open. To register the .Rproj file type with Alfred, go to Preferences &gt; Features &gt; Default Results &gt; Advanced. Drag any .Rproj file onto this space and then close.↩︎\nQuoting the usage philosophy favored by Emacs Speaks Statistics (ESS).↩︎\nThe command line approach is to quit R, go to the shell, do R CMD build foo in the package’s parent directory, then R CMD INSTALL foo_x.y.x.tar.gz, restart R, and call library(foo).↩︎\nA great blog post advocating for “if it hurts, do it more often” is FrequencyReducesDifficulty by Martin Fowler.↩︎"
  },
  {
    "objectID": "package-within.html#alfa-a-script-that-works",
    "href": "package-within.html#alfa-a-script-that-works",
    "title": "5  The package within",
    "section": "\n5.1 Alfa: a script that works",
    "text": "5.1 Alfa: a script that works\n\nLet’s consider data-cleaning.R, a fictional data analysis script for a group that collects reports from people who went for a swim:\n\nWhere did you swim and how hot was it outside?\n\nTheir data usually comes as a CSV file, such as swim.csv:\n\nname,where,temp\nAdam,beach,95\nBess,coast,91\nCora,seashore,28\nDale,beach,85\nEvan,seaside,31\n\ndata-cleaning.R begins by reading swim.csv into a data frame:\n\ninfile &lt;- \"swim.csv\"\n(dat &lt;- read.csv(infile))\n\n\n#&gt;   name    where temp\n#&gt; 1 Adam    beach   95\n#&gt; 2 Bess    coast   91\n#&gt; 3 Cora seashore   28\n#&gt; 4 Dale    beach   85\n#&gt; 5 Evan  seaside   31\n\nThey then classify each observation as using American (“US”) or British (“UK”) English, based on the word chosen to describe the sandy place where the ocean and land meet. The where column is used to build the new english column.\n\ndat$english[dat$where == \"beach\"] &lt;- \"US\"\ndat$english[dat$where == \"coast\"] &lt;- \"US\"\ndat$english[dat$where == \"seashore\"] &lt;- \"UK\"\ndat$english[dat$where == \"seaside\"] &lt;- \"UK\"\n\nSadly, the temperatures are often reported in a mix of Fahrenheit and Celsius. In the absence of better information, they guess that Americans report temperatures in Fahrenheit and therefore those observations are converted to Celsius.\n\ndat$temp[dat$english == \"US\"] &lt;- (dat$temp[dat$english == \"US\"] - 32) * 5/9\ndat\n#&gt;   name    where temp english\n#&gt; 1 Adam    beach 35.0      US\n#&gt; 2 Bess    coast 32.8      US\n#&gt; 3 Cora seashore 28.0      UK\n#&gt; 4 Dale    beach 29.4      US\n#&gt; 5 Evan  seaside 31.0      UK\n\nFinally, this cleaned (cleaner?) data is written back out to a CSV file. They like to capture a timestamp in the filename when they do this1.\n\nnow &lt;- Sys.time()\ntimestamp &lt;- format(now, \"%Y-%B-%d_%H-%M-%S\")\n(outfile &lt;- paste0(timestamp, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile)))\n#&gt; [1] \"2023-十二月-25_22-26-57_swim_clean.csv\"\nwrite.csv(dat, file = outfile, quote = FALSE, row.names = FALSE)\n\nHere is data-cleaning.R in its entirety:\n\n\ninfile &lt;- \"swim.csv\"\n(dat &lt;- read.csv(infile))\n\ndat$english[dat$where == \"beach\"] &lt;- \"US\"\ndat$english[dat$where == \"coast\"] &lt;- \"US\"\ndat$english[dat$where == \"seashore\"] &lt;- \"UK\"\ndat$english[dat$where == \"seaside\"] &lt;- \"UK\"\n\ndat$temp[dat$english == \"US\"] &lt;- (dat$temp[dat$english == \"US\"] - 32) * 5/9\ndat\n\nnow &lt;- Sys.time()\ntimestamp &lt;- format(now, \"%Y-%B-%d_%H-%M-%S\")\n(outfile &lt;- paste0(timestamp, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile)))\nwrite.csv(dat, file = outfile, quote = FALSE, row.names = FALSE)\n\nEven if your typical analytical tasks are quite different, hopefully you see a few familiar patterns here. It’s easy to imagine that this group does very similar pre-processing of many similar data files over time. Their analyses can be more efficient and consistent if they make these standard data maneuvers available to themselves as functions in a package, instead of inlining the same data and logic into dozens or hundreds of data ingest scripts."
  },
  {
    "objectID": "package-within.html#bravo-a-better-script-that-works",
    "href": "package-within.html#bravo-a-better-script-that-works",
    "title": "5  The package within",
    "section": "\n5.2 Bravo: a better script that works",
    "text": "5.2 Bravo: a better script that works\nThe package that lurks within the original script is actually pretty hard to see! It’s obscured by a few suboptimal coding practices, such as the use of repetitive copy/paste-style code and the mixing of code and data. Therefore a good first step is to refactor this code, isolating as much data and logic as possible in proper objects and functions, respectively.\nThis is also a good time to introduce the use of some add-on packages, for several reasons. First, we would actually use the tidyverse for this sort of data wrangling. Second, many people use add-on packages in their scripts, so it is good to see how add-on packages are handled inside a package.\nHere’s the new and improved version of the script.\n\nlibrary(tidyverse)\n\ninfile &lt;- \"swim.csv\"\ndat &lt;- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\nlookup_table &lt;- tribble(\n      ~where, ~english,\n     \"beach\",     \"US\",\n     \"coast\",     \"US\",\n  \"seashore\",     \"UK\",\n   \"seaside\",     \"UK\"\n)\n\ndat &lt;- dat %&gt;% \n  left_join(lookup_table)\n\nf_to_c &lt;- function(x) (x - 32) * 5/9\n\ndat &lt;- dat %&gt;% \n  mutate(temp = if_else(english == \"US\", f_to_c(temp), temp))\ndat\n\nnow &lt;- Sys.time()\ntimestamp &lt;- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path &lt;- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\nwrite_csv(dat, outfile_path(infile))\n\nThe key changes to note are:\n\nWe are using functions from tidyverse packages (specifically from readr and dplyr) and we make them available with library(tidyverse).\nThe map between different “beach” words and whether they are considered to be US or UK English is now isolated in a lookup table, which lets us create the english column in one go with a left_join(). This lookup table makes the mapping easier to comprehend and would be much easier to extend in the future with new “beach” words.\n\nf_to_c(), timestamp(), and outfile_path() are new helper functions that hold the logic for converting temperatures and forming the timestamped output file name.\n\nIt’s getting easier to recognize the reusable bits of this script, i.e. the bits that have nothing to do with a specific input file, like swim.csv. This sort of refactoring often happens naturally on the way to creating your own package, but if it does not, it’s a good idea to do this intentionally."
  },
  {
    "objectID": "package-within.html#charlie-a-separate-file-for-helper-functions",
    "href": "package-within.html#charlie-a-separate-file-for-helper-functions",
    "title": "5  The package within",
    "section": "\n5.3 Charlie: a separate file for helper functions",
    "text": "5.3 Charlie: a separate file for helper functions\nA typical next step is to move reusable data and logic out of the analysis script and into one or more separate files. This is a conventional opening move, if you want to use these same helper files in multiple analyses.\nHere is the content of beach-lookup-table.csv:\n\nwhere,english\nbeach,US\ncoast,US\nseashore,UK\nseaside,UK\n\nHere is the content of cleaning-helpers.R:\n\nlibrary(tidyverse)\n\nlocalize_beach &lt;- function(dat) {\n  lookup_table &lt;- read_csv(\n    \"beach-lookup-table.csv\",\n    col_types = cols(where = \"c\", english = \"c\")\n  )\n  left_join(dat, lookup_table)\n}\n\nf_to_c &lt;- function(x) (x - 32) * 5/9\n\ncelsify_temp &lt;- function(dat) {\n  mutate(dat, temp = if_else(english == \"US\", f_to_c(temp), temp))\n}\n\nnow &lt;- Sys.time()\ntimestamp &lt;- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path &lt;- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n\nWe’ve added some high-level helper functions, localize_beach() and celsify_temp(), to the pre-existing helpers (f_to_c(), timestamp(), and outfile_path()).\nHere is the next version of the data cleaning script, now that we’ve pulled out the helper functions (and lookup table).\n\nlibrary(tidyverse)\nsource(\"cleaning-helpers.R\")\n\ninfile &lt;- \"swim.csv\"\ndat &lt;- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\n(dat &lt;- dat %&gt;% \n    localize_beach() %&gt;% \n    celsify_temp())\n\nwrite_csv(dat, outfile_path(infile))\n\nNotice that the script is getting shorter and, hopefully, easier to read and modify, because repetitive and fussy clutter has been moved out of sight. Whether the code is actually easier to work with is subjective and depends on how natural the “interface” feels for the people who actually preprocess swimming data. These sorts of design decisions are the subject of a separate project: design.tidyverse.org.\nLet’s assume the group agrees that our design decisions are promising, i.e. we seem to be making things better, not worse. Sure, the existing code is not perfect, but this is a typical developmental stage when you’re trying to figure out what the helper functions should be and how they should work."
  },
  {
    "objectID": "package-within.html#delta-a-failed-attempt-at-making-a-package",
    "href": "package-within.html#delta-a-failed-attempt-at-making-a-package",
    "title": "5  The package within",
    "section": "\n5.4 Delta: a failed attempt at making a package",
    "text": "5.4 Delta: a failed attempt at making a package\nWhile this first attempt to create a package will end in failure, it’s still helpful to go through some common missteps, to illuminate what happens behind the scenes.\nHere are the simplest steps that you might take, in an attempt to convert cleaning-helpers.R into a proper package:\n\nUse usethis::create_package(\"path/to/delta\") to scaffold a new R package, with the name “delta”.\n\nThis is a good first step!\n\n\nCopy cleaning-helpers.R into the new package, specifically, to R/cleaning-helpers.R.\n\nThis is morally correct, but mechanically wrong in several ways, as we will soon see.\n\n\nCopy beach-lookup-table.csv into the new package. But where? Let’s try the top-level of the source package.\n\nThis is not going to end well. Shipping data files in a package is a special topic, which is covered in ?sec-data.\n\n\nInstall this package, perhaps using devtools::install() or via Ctrl + Shift + B (Windows & Linux) or Cmd + Shift + B in RStudio.\n\nDespite all of the problems identified above, this actually works! Which is interesting, because we can (try to) use it and see what happens.\n\n\n\nHere is the next version of the data cleaning script that you hope will run after successfully installing this package (which we’re calling “delta”).\n\nlibrary(tidyverse)\nlibrary(delta)\n\ninfile &lt;- \"swim.csv\"\ndat &lt;- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\ndat &lt;- dat %&gt;% \n  localize_beach() %&gt;% \n  celsify_temp()\n\nwrite_csv(dat, outfile_path(infile))\n\nThe only change from our previous script is that\n\nsource(\"cleaning-helpers.R\")\n\nhas been replaced by\n\nlibrary(delta)\n\nHere’s what actually happens if you install the delta package and try to run the data cleaning script:\n\nlibrary(tidyverse)\nlibrary(delta)\n\ninfile &lt;- \"swim.csv\"\ndat &lt;- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\ndat &lt;- dat %&gt;% \n  localize_beach() %&gt;% \n  celsify_temp()\n#&gt; Error in localize_beach(.) : could not find function \"localize_beach\"\n\nwrite_csv(dat, outfile_path(infile))\n#&gt; Error in outfile_path(infile) : could not find function \"outfile_path\"\n\nNone of the helper functions are actually available for use, even though you call library(delta)! In contrast to source()ing a file of helper functions, attaching a package does not dump its functions into the global workspace. By default, functions in a package are only for internal use. You need to export localize_beach(), celsify_temp(), and outfile_path() so your users can call them. In the devtools workflow, we achieve this by putting @export in the special roxygen comment above each function (namespace management is covered in ?sec-dependencies-NAMESPACE-workflow), like so:\n\n#' @export\ncelsify_temp &lt;- function(dat) {\n  mutate(dat, temp = if_else(english == \"US\", f_to_c(temp), temp))\n}\n\nAfter you add the @export tag to localize_beach(), celsify_temp(), and outfile_path(), you run devtools::document() to (re)generate the NAMESPACE file, and re-install the delta package. Now when you re-execute the data cleaning script, it works!\nCorrection: it sort of works sometimes. Specifically, it works if and only if the working directory is set to the top-level of the source package. From any other working directory, you still get an error:\n\ndat &lt;- dat %&gt;% \n  localize_beach() %&gt;% \n  celsify_temp()\n#&gt; Error: 'beach-lookup-table.csv' does not exist in current working directory ('/Users/jenny/tmp').\n\nThe lookup table consulted inside localize_beach() cannot be found. One does not simply dump CSV files into the source of an R package and expect things to “just work”. We will fix this in our next iteration of the package (?sec-data has full coverage of how to include data in a package).\nBefore we abandon this initial experiment, let’s also marvel at the fact that you were able to install, attach, and, to a certain extent, use a fundamentally broken package. devtools::load_all() works fine, too! This is a sobering reminder that you should be running R CMD check, probably via devtools::check(), very often during development. This will quickly alert you to many problems that simple installation and usage does not reveal.\nIndeed, check() fails for this package and you see this:\n * installing *source* package ‘delta’ ...\n ** using staged installation\n ** R\n ** byte-compile and prepare package for lazy loading\n Error in library(tidyverse) : there is no package called ‘tidyverse’\n Error: unable to load R code in package ‘delta’\n Execution halted\n ERROR: lazy loading failed for package ‘delta’\n * removing ‘/Users/jenny/rrr/delta.Rcheck/delta’\nWhat do you mean “there is no package called ‘tidyverse’”?!? We’re using it, with no problems, in our main script! Also, we’ve already installed and used this package, why can’t R CMD check find it?\nThis error is what happens when the strictness of R CMD check meets the very first line of R/cleaning-helpers.R:\n\nlibrary(tidyverse)\n\nThis is not how you declare that your package depends on another package (the tidyverse, in this case). This is also not how you make functions in another package available for use in yours. Dependencies must be declared in DESCRIPTION (and that’s not all). Since we declared no dependencies, R CMD check takes us at our word and tries to install our package with only the base packages available, which means this library(tidyverse) call fails. A “regular” installation succeeds, simply because the tidyverse is available in your regular library, which hides this particular mistake.\nTo review, copying cleaning-helpers.R to R/cleaning-helpers.R, without further modification, was problematic in (at least) the following ways:\n\nDoes not account for exported vs. non-exported functions.\nThe CSV file holding our lookup table cannot be found in the installed package.\nDoes not properly declare our dependency on other add-on packages."
  },
  {
    "objectID": "package-within.html#echo-a-working-package",
    "href": "package-within.html#echo-a-working-package",
    "title": "5  The package within",
    "section": "\n5.5 Echo: a working package",
    "text": "5.5 Echo: a working package\nWe’re ready to make the most minimal version of this package that actually works.\nHere is the new version of R/cleaning-helpers.R2:\n\nlookup_table &lt;- dplyr::tribble(\n      ~where, ~english,\n     \"beach\",     \"US\",\n     \"coast\",     \"US\",\n  \"seashore\",     \"UK\",\n   \"seaside\",     \"UK\"\n)\n\n#' @export\nlocalize_beach &lt;- function(dat) {\n  dplyr::left_join(dat, lookup_table)\n}\n\nf_to_c &lt;- function(x) (x - 32) * 5/9\n\n#' @export\ncelsify_temp &lt;- function(dat) {\n  dplyr::mutate(dat, temp = dplyr::if_else(english == \"US\", f_to_c(temp), temp))\n}\n\nnow &lt;- Sys.time()\ntimestamp &lt;- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\n\n#' @export\noutfile_path &lt;- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n\nWe’ve gone back to defining the lookup_table with R code, since the initial attempt to read it from CSV created some sort of filepath snafu. This is OK for small, internal, static data, but remember to see ?sec-data for more general techniques for storing data in a package.\nAll of the calls to tidyverse functions have now been qualified with the name of the specific package that actually provides the function, e.g. dplyr::mutate(). There are other ways to access functions in another package, explained in ?sec-dependencies-in-imports, but this is our recommended default. It is also our strong recommendation that no one depend on the tidyverse meta-package in a package3. Instead, it is better to identify the specific package(s) you actually use. In this case, the package only uses dplyr.\nThe library(tidyverse) call is gone and instead we declare the use of dplyr in the Imports field of DESCRIPTION:\nPackage: echo\n(... other lines omitted ...)\nImports: \n    dplyr\nThis, together with the use of namespace-qualified calls, like dplyr::left_join(), constitutes a valid way to use another package within yours. The metadata conveyed via DESCRIPTION is covered in ?sec-description.\nAll of the user-facing functions have an @export tag in their roxygen comment, which means that devtools::document() adds them correctly to the NAMESPACE file. Note that f_to_c() is currently only used internally, inside celsify_temp(), so it is not exported (likewise for timestamp()).\nThis version of the package can be installed, used, AND it technically passes R CMD check, though with 1 warning and 1 note.\n* checking for missing documentation entries ... WARNING\nUndocumented code objects:\n  ‘celsify_temp’ ‘localize_beach’ ‘outfile_path’\nAll user-level objects in a package should have documentation entries.\nSee chapter ‘Writing R documentation files’ in the ‘Writing R\nExtensions’ manual.\n\n* checking R code for possible problems ... NOTE\ncelsify_temp: no visible binding for global variable ‘english’\ncelsify_temp: no visible binding for global variable ‘temp’\nUndefined global functions or variables:\n  english temp\nThe “no visible binding” note is a peculiarity of using dplyr and unquoted variable names inside a package, where the use of bare variable names (english and temp) looks suspicious. You can add either of these lines to any file below R/ to eliminate this note (such as the package-level documentation file described in ?sec-man-package-doc):\n\n# option 1 (then you should also put utils in Imports)\nutils::globalVariables(c(\"english\", \"temp\"))\n\n# option 2\nenglish &lt;- temp &lt;- NULL\n\nWe’re seeing that it can be tricky to program around a package like dplyr, which makes heavy use of nonstandard evaluation. Behind the scenes, that is the technique that allows dplyr’s end users to use bare (not quoted) variable names. Packages like dplyr prioritize the experience of the typical end user, at the expense of making them trickier to depend on. The two options shown above for suppressing the “no visible binding” note, represent entry-level solutions. For a more sophisticated treatment of these issues, see vignette(\"in-packages\", package = \"dplyr\") and vignette(\"programming\", package = \"dplyr\").\nThe warning about missing documentation is because the exported functions have not been properly documented. This is a valid concern and something you should absolutely address in a real package. You’ve already seen how to create help files with roxygen comments in Section 1.12 and we cover this topic thoroughly in ?sec-man."
  },
  {
    "objectID": "package-within.html#sec-package-within-build-time-run-time",
    "href": "package-within.html#sec-package-within-build-time-run-time",
    "title": "5  The package within",
    "section": "\n5.6 Foxtrot: build time vs. run time",
    "text": "5.6 Foxtrot: build time vs. run time\nThe echo package works, which is great, but group members notice something odd about the timestamps:\n\nSys.time()\n#&gt; [1] \"2023-03-26 22:48:48 PDT\"\n\noutfile_path(\"INFILE.csv\")\n#&gt; [1] \"2020-September-03_11-06-33_INFILE_clean.csv\"\n\nThe datetime in the timestamped filename doesn’t reflect the time reported by the system. In fact, the users claim that the timestamp never seems to change at all! Why is this?\nRecall how we form the filepath for output files:\n\nnow &lt;- Sys.time()\ntimestamp &lt;- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path &lt;- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n\nThe fact that we capture now &lt;- Sys.time() outside of the definition of outfile_path() has probably been vexing some readers for a while. now reflects the instant in time when we execute now &lt;- Sys.time(). In the initial approach, now was assigned when we source()d cleaning-helpers.R. That’s not ideal, but it was probably a pretty harmless mistake, because the helper file would be source()d shortly before we wrote the output file.\nBut this approach is quite devastating in the context of a package. now &lt;- Sys.time() is executed when the package is built4. And never again. It is very easy to assume your package code is re-evaluated when the package is attached or used. But it is not. Yes, the code inside your functions is absolutely run whenever they are called. But your functions – and any other objects created in top-level code below R/ – are defined exactly once, at build time.\nBy defining now with top-level code below R/, we’ve doomed our package to timestamp all of its output files with the same (wrong) time. The fix is to make sure the Sys.time() call happens at run time.\nLet’s look again at parts of R/cleaning-helpers.R:\n\nlookup_table &lt;- dplyr::tribble(\n      ~where, ~english,\n     \"beach\",     \"US\",\n     \"coast\",     \"US\",\n  \"seashore\",     \"UK\",\n   \"seaside\",     \"UK\"\n)\n\nnow &lt;- Sys.time()\ntimestamp &lt;- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path &lt;- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n\nThere are four top-level &lt;- assignments in this excerpt. The top-level definitions of the data frame lookup_table and the functions timestamp() and outfile_path() are correct. It is appropriate that these be defined exactly once, at build time. The top-level definition of now, which is then used inside outfile_path(), is regrettable.\nHere are better versions of outfile_path():\n\n# always timestamp as \"now\"\noutfile_path &lt;- function(infile) {\n  ts &lt;- timestamp(Sys.time())\n  paste0(ts, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n\n# allow user to provide a time, but default to \"now\"\noutfile_path &lt;- function(infile, time = Sys.time()) {\n  ts &lt;- timestamp(time)\n  paste0(ts, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n\nThis illustrates that you need to have a different mindset when defining objects inside a package. The vast majority of those objects should be functions and these functions should generally only use data they create or that is passed via an argument. There are some types of sloppiness that are fairly harmless when a function is defined immediately before its use, but that can be more costly for functions distributed as a package."
  },
  {
    "objectID": "package-within.html#sec-package-within-side-effects",
    "href": "package-within.html#sec-package-within-side-effects",
    "title": "5  The package within",
    "section": "\n5.7 Golf: side effects",
    "text": "5.7 Golf: side effects\nThe timestamps now reflect the current time, but the group raises a new concern. As it stands, the timestamps reflect who has done the data cleaning and which part of the world they’re in. The heart of the timestamp strategy is this format string5:\n\nformat(Sys.time(), \"%Y-%B-%d_%H-%M-%S\")\n#&gt; [1] \"2023-十二月-25_22-26-57\"\n\nThis formats Sys.time() in such a way that it includes the month name (not number) and the local time6.\nTable 5.1 shows what happens when such a timestamp is produced by several hypothetical colleagues cleaning some data at exactly the same instant in time.\n\n\n\n\nTable 5.1: Timestamp varies by locale and timezone.\n\n\n\n\n\n\n\nlocation\ntimestamp\nLC_TIME\ntz\n\n\n\nRome, Italy\n2020-settembre-05_00-30-00\nit_IT.UTF-8\nEurope/Rome\n\n\nWarsaw, Poland\n2020-wrzesień-05_00-30-00\npl_PL.UTF-8\nEurope/Warsaw\n\n\nSao Paulo, Brazil\n2020-setembro-04_19-30-00\npt_BR.UTF-8\nAmerica/Sao_Paulo\n\n\nGreenwich, England\n2020-September-04_23-30-00\nen_GB.UTF-8\nEurope/London\n\n\n“Computer World!”\n2020-September-04_22-30-00\nC\nUTC\n\n\n\n\n\n\nNote that the month names vary, as does the time, and even the date! The safest choice is to form timestamps with respect to a fixed locale and time zone (presumably the non-geographic choices represented by “Computer World!” above).\nYou do some research and learn that you can force a certain locale via Sys.setlocale() and force a certain time zone by setting the TZ environment variable. Specifically, we set the LC_TIME component of the locale to “C” and the time zone to “UTC” (Coordinated Universal Time). Here’s your first attempt to improve timestamp():\n\ntimestamp &lt;- function(time = Sys.time()) {\n  Sys.setlocale(\"LC_TIME\", \"C\")\n  Sys.setenv(TZ = \"UTC\")\n  format(time, \"%Y-%B-%d_%H-%M-%S\")\n}\n\nBut your Brazilian colleague notices that datetimes print differently, before and after she uses outfile_path() from your package:\nBefore:\n\nformat(Sys.time(), \"%Y-%B-%d_%H-%M-%S\")\n\n\n#&gt; [1] \"2023-dezembro-25_11-26-58\"\n\nAfter:\n\noutfile_path(\"INFILE.csv\")\n#&gt; [1] \"2023-December-25_14-26-57_INFILE_clean.csv\"\n\nformat(Sys.time(), \"%Y-%B-%d_%H-%M-%S\")\n#&gt; [1] \"2023-December-25_14-26-58\"\n\nNotice that her month name switched from Portuguese to English and the time is clearly being reported in a different time zone. The calls to Sys.setlocale() and Sys.setenv() inside timestamp() have made persistent (and very surprising) changes to her R session. This sort of side effect is very undesirable and is extremely difficult to track down and debug, especially in more complicated settings.\nHere are better versions of timestamp():\n\n# use withr::local_*() functions to keep the changes local to timestamp()\ntimestamp &lt;- function(time = Sys.time()) {\n  withr::local_locale(c(\"LC_TIME\" = \"C\"))\n  withr::local_timezone(\"UTC\")\n  format(time, \"%Y-%B-%d_%H-%M-%S\")\n}\n\n# use the tz argument to format.POSIXct()\ntimestamp &lt;- function(time = Sys.time()) {\n  withr::local_locale(c(\"LC_TIME\" = \"C\"))\n  format(time, \"%Y-%B-%d_%H-%M-%S\", tz = \"UTC\")\n}\n\n# put the format() call inside withr::with_*()\ntimestamp &lt;- function(time = Sys.time()) {\n  withr::with_locale(\n    c(\"LC_TIME\" = \"C\"),\n    format(time, \"%Y-%B-%d_%H-%M-%S\", tz = \"UTC\")\n  )\n}\n\nThese show various methods to limit the scope of our changes to LC_TIME and the timezone. A good rule of thumb is to make the scope of such changes as narrow as possible and practical. The tz argument of format() is the most surgical way to deal with the timezone, but nothing similar exists for LC_TIME. We make the temporary locale modification using the withr package, which provides a very flexible toolkit for temporary state changes. This (and base::on.exit()) are discussed further in ?sec-code-r-landscape. Note that if you use withr as we do above, you would need to list it in DESCRIPTION in Imports (?sec-dependencies-in-practice, ?sec-dependencies-tidyverse).\nThis underscores a point from the previous section: you need to adopt a different mindset when defining functions inside a package. Try to avoid making any changes to the user’s overall state. If such changes are unavoidable, make sure to reverse them (if possible) or to document them explicitly (if related to the function’s primary purpose)."
  },
  {
    "objectID": "package-within.html#concluding-thoughts",
    "href": "package-within.html#concluding-thoughts",
    "title": "5  The package within",
    "section": "\n5.8 Concluding thoughts",
    "text": "5.8 Concluding thoughts\nFinally, after several iterations, we have successfully extracted the repetitive data cleaning code for the swimming survey into an R package. This example concludes the first part of the book and marks the transition into more detailed reference material on specific package components. Before we move on, let’s review the lessons learned in this chapter.\n\n5.8.1 Script vs. package\nWhen you first hear that expert R users often put their code into packages, you might wonder exactly what that means. Specifically, what happens to your existing R scripts, R Markdown reports, and Shiny apps? Does all of that code somehow get put into a package? The answer is “no”, in most contexts.\nTypically, you identify certain recurring operations that occur across multiple projects and this is what you extract into an R package. You will still have R scripts, R Markdown reports, and Shiny apps, but by moving specific pieces of code into a formal package, your data products tend to become more concise and easier to maintain.\n\n5.8.2 Finding the package within\nAlthough the example in this chapter is rather simple, it still captures the typical process of developing an R package for personal or organizational use. You typically start with a collection of idiosyncratic and related R scripts, scattered across different projects. Over time, you begin to notice that certain needs come up over and over again.\nEach time you revisit a similar analysis, you might try to elevate your game a bit, compared to the previous iteration. You refactor copy/paste-style code using more robust patterns and start to encapsulate key “moves” in helper functions, which might eventually migrate into their own file. Once you reach this stage, you’re in a great position to take the next step and create a package.\n\n5.8.3 Package code is different\nWriting package code is a bit different from writing R scripts and it’s natural to feel some discomfort when making this adjustment. Here are the most common gotchas that trip many of us up at first:\n\nPackage code requires new ways of working with functions in other packages. The DESCRIPTION file is the principal way to declare dependencies; we don’t do this via library(somepackage).\nIf you want data or files to be persistently available, there are package-specific methods of storage and retrieval. You can’t just put files in the package and hope for the best.\nIt’s necessary to be explicit about which functions are user-facing and which are internal helpers. By default, functions are not exported for use by others.\nA new level of discipline is required to ensure that code runs at the intended time (build time vs. run time) and that there are no unintended side effects."
  },
  {
    "objectID": "package-within.html#footnotes",
    "href": "package-within.html#footnotes",
    "title": "5  The package within",
    "section": "",
    "text": "Sys.time() returns an object of class POSIXct, therefore when we call format() on it, we are actually using format.POSIXct(). Read the help for ?format.POSIXct if you’re not familiar with such format strings.↩︎\nPutting everything in one file, with this name, is not ideal, but it is technically allowed. We discuss organising and naming the files below R/ in ?sec-code-organising.↩︎\nThe blog post The tidyverse is for EDA, not packages elaborates on this.↩︎\nHere we’re referring to when the package code is compiled, which could be either when the binary is made (for macOS or Windows; Section 3.4) or when the package is installed from source (Section 3.5).↩︎\nSys.time() returns an object of class POSIXct, therefore when we call format() on it, we are actually using format.POSIXct(). Read the help for ?format.POSIXct if you’re not familiar with such format strings.↩︎\nIt would clearly be better to format according to ISO 8601, which encodes the month by number, but please humor me for the sake of making this example more obvious.↩︎"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "6  References",
    "section": "",
    "text": "Marwick, Ben, Carl Boettiger, and Lincoln Mullen. 2018a.\n“Packaging Data Analytical Work Reproducibly Using r (and\nFriends).” The American Statistician 72 (1): 80–88. https://doi.org/10.1080/00031305.2017.1375986.\n\n\n———. 2018b. “Packaging Data Analytical Work Reproducibly Using r\n(and Friends).” PeerJ Preprints 6 (March): e3192v2. https://doi.org/10.7287/peerj.preprints.3192v2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2018. Styler: Non-Invasive\nPretty Printing of R Code. http://styler.r-lib.org.\n\n\nSilge, Julia, John C. Nash, and Spencer Graves. 2018. “Navigating the R Package Universe.”\nThe R Journal 10 (2): 558–63. https://doi.org/10.32614/RJ-2018-058."
  },
  {
    "objectID": "R-CMD-check.html#check-metadata",
    "href": "R-CMD-check.html#check-metadata",
    "title": "Appendix A — R CMD check",
    "section": "\nA.1 Check metadata",
    "text": "A.1 Check metadata\nR CMD check always starts by describing your current environment.\n\n\nUsing log directory ‘/some/tmp/path/googledrive.Rcheck’\n\nUsing R version 4.2.2 (2022-10-31)\n\nUsing platform: x86_64-apple-darwin17.0 (64-bit)\n\nUsing session charset: UTF-8\n\nNext the DESCRIPTION file is parsed and the package version and encoding is printed.\n\n\n\nChecking for file ‘googledrive/DESCRIPTION’\n\nThis is package ‘googledrive’ version ‘2.1.0.9000’\n\nPackage encoding: UTF-8"
  },
  {
    "objectID": "R-CMD-check.html#package-structure",
    "href": "R-CMD-check.html#package-structure",
    "title": "Appendix A — R CMD check",
    "section": "\nA.2 Package structure",
    "text": "A.2 Package structure\n\n\n\nChecking package directory. The directory you’re checking must exist - devtools::check() protects you against this problem.\n\n\n\nChecking if this is a source package. You must check a source package, not a binary or installed package. This should never fail if you use devtools::check().\n\n\n\nChecking for executable files. You must not have executable files in your package: they’re not portable, they’re not open source, and they are a security risk. Delete any executable files from your package. (If you’re not submitting to CRAN, you can silence this warning by listing each executable file in the BinaryFiles field in your DESCRIPTION.)\n\n\n\nChecking for hidden files and directories. On Linux and macOS, files with a name starting with . are hidden by default, and you’ve probably included them in your package by mistake. Either delete them, or if they are important, use .Rbuildignore to remove them from the package bundle. R automatically removes some common directories like .git and .svn.\n\n\n\nChecking for portable file names. R packages must work on Windows, Linux and macOS, so you can only use file names that work on all platforms. The easiest way to do this is to stick to letters, numbers, underscores and dashes. Avoid non-English letters and spaces. Fix this check by renaming the listed files.\n\n\n\nChecking for sufficient/correct file permissions. If you can’t read a file, you can’t check it. This check detects the unlikely occurrence that you have files in the package that you don’t have permission to read. Fix this problem by fixing the file permissions.\n\n\n\nChecking whether package ‘XYZ’ can be installed. R CMD check runs R CMD INSTALL to make sure that it’s possible to install your package. If this fails, you should run devtools::install() or the equivalent from RStudio’s menus and debug any problems before continuing.\n\n\n\nChecking installed package size. It’s easy to accidentally include large files that blow up the size of your package. This check ensures that the whole package is less than 5 MB and each subdirectory is less than 1 MB. If you see this message, check that you haven’t accidentally included a large file.\nIf submitting to CRAN, you’ll need to justify the size of your package. First, make sure the package is as small as it possibly can be: try recompressing the data, ?sec-data-data-raw; and minimising vignettes, ?sec-vignettes. If it’s still too large, consider moving data into its own package.\n\n\n\n\nChecking top-level files. Only specified files and directories are allowed at the top level of the package (e.g. DESCRIPTION, R/, src/). To include other files, you have two choices:\n\nIf they don’t need to be installed (i.e. they’re only used for development tasks), add them to .Rbuildignore with usethis::use_build_ignore().\nIf they need to be installed: move them into inst/. They’ll be moved back to the top-level package directory when installed. Learn more in ?sec-misc-inst.\n\n\n\n\n\nChecking package subdirectories.\n\nDon’t include any empty directories. These are usually removed automatically by R CMD build so you shouldn’t see this error. If you do, just delete the empty directory.\nThe case of files and directories is important. All sub-directories should be lower-case, except for R/. A citation file, if present, should be in inst/CITATION. Rename as needed.\nThe contents of inst/ shouldn’t clash with top-level contents of the package, such as data/ or R/. If they do, rename your files/directories. Learn more in ?sec-misc-inst.\n\n\n\n\n\nChecking for left-over files. Remove any files listed here. They’ve been included in your package by accident."
  },
  {
    "objectID": "R-CMD-check.html#description",
    "href": "R-CMD-check.html#description",
    "title": "Appendix A — R CMD check",
    "section": "\nA.3 DESCRIPTION\n",
    "text": "A.3 DESCRIPTION\n\n\n\n\nChecking DESCRIPTION meta-information.\n\nThe DESCRIPTION must be valid. You are unlikely to see this error, because devtools::load_all() runs the same check each time you re-load the package.\nIf you use any non-ASCII characters in the DESCRIPTION, you must also specify an encoding. There are only three encodings that work on all platforms: latin1, latin2 and UTF-8. We strongly recommend UTF-8: Encoding: UTF-8. Learn more in ?sec-data-non-ascii.\nThe License must refer to either a known license (a complete list can be found at https://svn.r-project.org/R/trunk/share/licenses/license.db), or it must use file LICENSE and that file must exist. Errors here are most likely to be typos. Learn more in ?sec-license.\nYou should either provide Authors@R or Authors and Maintainer. You’ll get an error if you’ve specified both, which you can fix by removing the one you didn’t want. Learn more in ?sec-description-authors-at-r.\n\n\n\n\n\nChecking package dependencies.\n\nAll packages listed in Depends, Imports and LinkingTo must be installed, and their version requirements must be met, otherwise your package can’t be checked.\nPackages listed in Suggests must be installed, unless you’ve set the environment variable _R_CHECK_FORCE_SUGGESTS_ to a false value (e.g. with check(force_suggests = FALSE)). This is useful if some of the suggested packages are not available on all platforms.\nAn easy way to install any missing or outdated dependencies is to run devtools::install_deps(dependencies = TRUE). See also pak::local_install_deps() and pak::local_install_dev_deps().\nR packages can not have a cycle of dependencies: i.e. if package A requires B, then B can not require A (otherwise which one would you load first?). If you see this error, you’ll need to rethink the design of your package. One easy fix is to move the conflicting package from Imports or Depends to Suggests.\nAny packages used in the NAMESPACE must be listed in one of Imports (most commonly) or Depends (only in special cases).\nEvery package listed in Depends must also be imported in the NAMESPACE or accessed with pkg::foo(). If you don’t do this, your package will work when attached to the search path (with library(mypackage)) but will not work when only loaded (e.g. mypackage::foo())\n\n\n\n\n\nChecking CRAN incoming feasibility. These checks only apply if you’re submitting to CRAN.\n\nIf you’re submitting a new package, you can’t use the same name as an existing package. You’ll need to come up with a new name.\nIf you’re submitting an update, the version number must be higher than the current CRAN version. Update the Version field in DESCRIPTION.\nIf the maintainer of the package has changed (even if it’s just a change in email address), the new maintainer should submit to CRAN, and the old maintainer will receive an email prompting them to confirm the change.\nYou must use a standard open source license, as listed in https://svn.r-project.org/R/trunk/share/licenses/license.db. You can not use a custom license as CRAN does not have the legal resources to review custom agreements.\nThe Title and Description must be free from spelling mistakes. The title of the package must be in title case. Neither title nor description should include either the name of your package or the word “package”. Reword your title and description as needed.\nIf you’re submitting a new package, you’ll always get a NOTE. This reminds the CRAN maintainers to do some extra manual checks.\nAvoid submitting multiple versions of the same package in a short period of time. CRAN prefers at most one submission per month. If you need to fix a major bug, be apologetic."
  },
  {
    "objectID": "R-CMD-check.html#namespace",
    "href": "R-CMD-check.html#namespace",
    "title": "Appendix A — R CMD check",
    "section": "\nA.4 Namespace",
    "text": "A.4 Namespace\n\n\n\nChecking if there is a namespace. You must have a NAMESPACE file. This is handled for your automatically by the devtools workflow.\n\n\n\nChecking package namespace information. The NAMESPACE should be parseable by parseNamespaceFile() and valid. If this check fails, it’s a bug in roxygen2.\n\n\n\nChecking whether the package can be loaded with stated dependencies. Runs library(pkg) with R_DEFAULT_PACKAGES=NULL, so the search path is empty (i.e. stats, graphics, grDevices, utils, datasets and methods are not attached like usual). Failure here typically indicates that you’re missing a dependency on one of those packages.\n\n\n\nChecking whether the namespace can be loaded with stated dependencies. Runs loadNamespace(pkg) with R_DEFAULT_PACKAGES=NULL. Failure usually indicates a problem with the namespace."
  },
  {
    "objectID": "R-CMD-check.html#r-code",
    "href": "R-CMD-check.html#r-code",
    "title": "Appendix A — R CMD check",
    "section": "\nA.5 R code",
    "text": "A.5 R code\n\n\n\nChecking R files for non-ASCII characters. For maximum portability (i.e. so people can use your package on Windows) you should avoid using non-ASCII characters in R files. It’s ok to use them in comments, but object names shouldn’t use them, and in strings you should use unicode escapes. See the CRAN-specific notes in ?sec-r for more details.\n\n\n\nChecking R files for syntax errors. Obviously your R code must be valid. You’re unlikely to see this error if you’ve been regularly using devtools::load_all().\n\n\n\nChecking dependencies in R code. Errors here often indicate that you’ve forgotten to declare a needed package in the DESCRIPTION. Remember that you should never use require() or library() inside a package - see ?sec-description-imports-suggests, ?sec-dependencies-mindset-background, and ?sec-dependencies-in-practice for more details on best practices.\nAlternatively, you may have accidentally used ::: to access an exported function from a package. Switch to :: instead.\n\n\n\n\nChecking S3 generic/method consistency. S3 methods must have a compatible function signature with their generic. This means that the method must have the same arguments as its generic, with one exception: if the generic includes ... the method can have additional arguments.\nA common cause of this error is defining print methods, because the print() generic contains...:\n\n# BAD\nprint.my_class &lt;- function(x) cat(\"Hi\")\n\n# GOOD\nprint.my_class &lt;- function(x, ...) cat(\"Hi\")\n\n# Also ok\nprint.my_class &lt;- function(x, ..., my_arg = TRUE) cat(\"Hi\")\n\n\n\n\n\nChecking replacement functions. Replacement functions (e.g. functions that are called like foo(x) &lt;- y), must have value as the last argument.\n\n\n\nChecking R code for possible problems. This is a compound check for a wide range of problems:\n\nCalls to library.dynam() (and library.dynam.unload()) should look like library.dynam(\"name\"), not library.dynam(\"name.dll\"). Remove the extension to fix this error.\nPut library.dynam() in .onLoad(), not .onAttach(); put packageStartupMessage() in .onAttach(), not .onLoad(). Put library.dynam.unload() in .onUnload(). If you use any of these functions, make sure they’re in the right place.\nDon’t use unlockBinding() or assignInNamespace() to modify objects that don’t belong to you.\ncodetools::checkUsagePackage() is called to check that your functions don’t use variables that don’t exist. This sometimes raises false positives with functions that use non-standard evaluation (NSE), like subset() or with(). Generally, we think you should avoid NSE in package functions, and hence avoid this NOTE, but if you can not, see ?globalVariables for how to suppress this NOTE.\nYou are not allowed to use .Internal() in a package. Either call the R wrapper function, or write your own C function. (If you copy and paste the C function from base R, make sure to maintain the copyright notice, use a GPL-2 compatible license, and list R-core in the Authors@R field.)\nSimilarly you are not allowed to use ::: to access non-exported functions from other packages. Either ask the package maintainer to export the function you need, or write your own version of it using exported functions. Alternatively, if the licenses are compatible you can copy and paste the exported function into your own package. If you do this, remember to update Authors@R.\nDon’t use assign() to modify objects in the global environment. If you need to maintain state across function calls, create your own environment, as described in ?sec-data-state.\nDon’t use attach() in your code. Instead refer to variables explicitly.\nDon’t use data() without specifying the envir argument. Otherwise the data will be loaded in the global environment.\nDon’t use deprecated or defunct functions. Update your code to use the latest versions.\nYou must use TRUE and FALSE in your code (and examples), not T and F.\n\n\n\n\n\nChecking whether the package can be loaded. R loads your package with library(). Failure here typically indicates a problem with .onLoad() or .onAttach().\n\n\n\nChecking whether the package can be unloaded cleanly. Loads with library() and then detach()es. If this fails, check .onUnload() and .onDetach().\n\n\n\nChecking whether the namespace can be unloaded cleanly. Runs loadNamespace(\"pkg\"); unloadNamespace(\"pkg\"). Check .onUnload() for problems.\n\n\n\nChecking loading without being on the library search path. Calls library(x, lib.loc = ...). Failure here indicates that you are making a false assumption in .onLoad() or .onAttach()."
  },
  {
    "objectID": "R-CMD-check.html#data",
    "href": "R-CMD-check.html#data",
    "title": "Appendix A — R CMD check",
    "section": "\nA.6 Data",
    "text": "A.6 Data\n\n\n\nChecking contents of ‘data’ directory.\n\nThe data directory can only contain file types described in ?sec-data-data.\nData files can contain non-ASCII characters only if the encoding is correctly set. This usually shouldn’t be a problem if you’re saving .Rdata files. If you do see this error, look at the Encoding() of each column in the data frame, and ensure none are “unknown”. (You’ll typically need to fix this somewhere in the import process). Learn more in ?sec-data-non-ascii.\nIf you’ve compressed a data file with bzip2 or xz you need to declare at least Depends: R (&gt;= 2.10) in your DESCRIPTION.\nIf you’ve used a sub-optimal compression algorithm for your data, re-compress with the suggested algorithm."
  },
  {
    "objectID": "R-CMD-check.html#documentation",
    "href": "R-CMD-check.html#documentation",
    "title": "Appendix A — R CMD check",
    "section": "\nA.7 Documentation",
    "text": "A.7 Documentation\nIf you’re grappling with documentation problems specifically, you may be able to iterate more quickly by using devtools::check_man(), which attempts to run only the relevant subset of checks. It also automatically calls devtools::document() for you.\n\n\n\nChecking Rd files. This checks that all man/*.Rd files use the correct Rd syntax. If this fails, it indicates a bug in roxygen2.\n\n\n\nChecking Rd metadata. Names and aliases must be unique across all documentation files in a package. If you encounter this problem you’ve accidentally used the same @name or @aliases in multiple places; make sure they’re unique.\n\n\n\nChecking Rd line widths. Lines in Rd files must be less than 90 characters wide. This is unlikely to occur if you wrap your R code, and hence roxygen comments, to 80 characters. For very long URLs, use a link-shortening service like bit.ly.\n\n\n\nChecking Rd cross-references. Errors here usually represent typos.\n\n\n\nChecking for missing documentation entries. All exported objects must be documented. See ?tools::undoc for more details.\n\n\n\nChecking for code/documentation mismatches. This check ensures that the documentation matches the code. This should never fail because you’re using roxygen2 which automatically keeps them in sync and check() should usually re-document() your package. In any case, the solution is often to re-run devtools::document().\n\n\n\nChecking Rd \\usage sections. All arguments must be documented, and all @params must document an existing argument. You may have forgotten to document an argument, forgotten to remove the documentation for an argument that you’ve removed, or misspelled an argument name.\nS3 and S4 methods need to use special \\S3method{} and \\S4method{} markup in the Rd file. Roxygen2 will generate this for you automatically.\n\n\n\n\nChecking Rd contents. This checks for auto-generated content made by package.skeleton(). Since you’re not using package.skeleton() you should never have a problem here.\n\n\n\nChecking for unstated dependencies in examples. If you use a package only for an example, make sure it’s listed in the Suggests field. Learn more about how to use different types of dependencies in your examples in ?sec-dependencies-in-practice.\n\n\n\nChecking examples. Every documentation example must run without errors, and must not take too long. See ?sec-man-examples for details.\n\n\n\nChecking PDF version of manual. Occasionally you’ll get an error when building the PDF manual. This is usually because the pdf is built by latex and you’ve forgotten to escape something. Debugging this is painful - your best bet is to look up the latex logs and combined tex file and work back from there to .Rd files then back to a roxygen comment. Any such failure is potentially a bug in roxygen2, so open an issue."
  },
  {
    "objectID": "R-CMD-check.html#demos",
    "href": "R-CMD-check.html#demos",
    "title": "Appendix A — R CMD check",
    "section": "\nA.8 Demos",
    "text": "A.8 Demos\n\n\n\nChecking index information. If you’ve written demos, each demo must be listed in demo/00Index. The file should look like:\ndemo-name-without-extension  Demo description\nanother-demo-name            Another description"
  },
  {
    "objectID": "R-CMD-check.html#compiled-code",
    "href": "R-CMD-check.html#compiled-code",
    "title": "Appendix A — R CMD check",
    "section": "\nA.9 Compiled code",
    "text": "A.9 Compiled code\n\n\n\nChecking foreign function calls. .Call(), .C(), .Fortran(), .External() must always be called either with a NativeSymbolInfo object (as created with @useDynLib) or use the .package argument. See ?tools::checkFF for more details.\n\n\n\nChecking line endings in C/C++/Fortran sources/headers. Always use LF as a line ending.\n\n\n\nChecking line endings in Makefiles. As above.\n\n\n\nChecking for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS). Errors here indicate an issue with your use of BLAS and LAPACK.\n\n\n\nChecking compiled code. Checks that you’re not using any C functions that you shouldn’t."
  },
  {
    "objectID": "R-CMD-check.html#tests",
    "href": "R-CMD-check.html#tests",
    "title": "Appendix A — R CMD check",
    "section": "\nA.10 Tests",
    "text": "A.10 Tests\n\n\n\nChecking for unstated dependencies in tests. Every package used by tests must be included in the dependencies.\n\n\n\nChecking tests. Each file in tests/ is run. If you’ve followed the instructions in ?sec-testing-basics you’ll have at least one file: testthat.R. The output from R CMD check is not usually that helpful, so you may need to look at the log file package.Rcheck/tests/testthat.Rout. Fix any failing tests by iterating with devtools::test().\nOccasionally you may have a problem where the tests pass when run interactively with devtools::test(), but fail when in R CMD check. This usually indicates that you’ve made a faulty assumption about the testing environment, and it’s often hard to figure it out."
  },
  {
    "objectID": "R-CMD-check.html#vignettes",
    "href": "R-CMD-check.html#vignettes",
    "title": "Appendix A — R CMD check",
    "section": "\nA.11 Vignettes",
    "text": "A.11 Vignettes\nThis is a tricky enough topic that it also receives substantial coverage in the main body of the book; see ?sec-vignettes-how-built-checked.\n\n\n\nChecking ‘build’ directory. build/ is used to track vignette builds. It’s hard to imagine how this check could fail unless you’ve accidentally .Rbuildignored the build/ directory.\n\n\n\nChecking installed files from ‘inst/doc’. Don’t put files in inst/doc - keep your vignettes and the files they need in vignettes/.\n\n\n\nChecking files in ‘vignettes’. Problems here are usually straightforward - you’ve included files that are already included in R (like jss.cls, jss.bst, or Sweave.sty), or you have leftover latex compilation files. Delete these files.\n\n\n\nChecking for sizes of PDF files under ‘inst/doc’. If you’re making PDF vignettes, you can make them as small as possible by running tools::compactPDF().\n\n\n\nChecking for unstated dependencies in vignettes. As with tests, every package that you use in a vignette must be listed in the DESCRIPTION. If a package is used only for a vignette, and not elsewhere, make sure it’s listed in Suggests. If you really want to use a package and you don’t want to list it in DESCRIPTION, write an article instead of a vignette.\n\n\n\nChecking package vignettes in ‘inst/doc’. This checks that every source vignette (i.e. .Rmd) has a built equivalent (i.e. .html) in inst/doc. This shouldn’t fail if you’ve used the standard process outlined in ?sec-vignettes. If there is a problem, start by checking your .Rbuildignore.\n\n\n\nChecking running R code from vignettes. The R code from each vignette is run. If you want to deliberately execute errors (to show the user what failure looks like), make sure the chunk has error = TRUE, purl = FALSE.\n\n\n\nChecking re-building of vignette outputs. Each vignette is re-knit to make sure that the output corresponds to the input. Again, this shouldn’t fail in normal circumstances."
  },
  {
    "objectID": "R-CMD-check.html#sec-r-cmd-check-informational-notes",
    "href": "R-CMD-check.html#sec-r-cmd-check-informational-notes",
    "title": "Appendix A — R CMD check",
    "section": "\nA.12 NOTEs that are informational",
    "text": "A.12 NOTEs that are informational\nOur blanket advice is to eliminate all ERRORs, WARNINGs, and even NOTEs that you see in R CMD check. But there are a few exceptions, i.e. there are a couple of NOTEs that do you not need to fix (and, indeed, probably can not fix).\n\nA.12.1 Initial CRAN submission\nWhen a package first goes to CRAN, there will always be one NOTE that alerts the CRAN maintainers that this is a new submission and that they’ll need to do some extra checks. You can’t eliminate this NOTE.\n* checking CRAN incoming feasibility ... NOTE\nMaintainer: 'Jane Doe &lt;jane@example.com&gt;'\n\nNew submission\n\nA.12.2 Non-ASCII characters in data\nIf your package’s data contains non-ASCII characters, you will get a NOTE like this, but it does not necessarily mean you need to do anything about it.\nCheck: data for non-ASCII characters\nResult: NOTE\n     Note: found 25 marked UTF-8 strings\nAs long as you are aware of the non-ASCII characters and the NOTE mentions your intended and declared encoding (preferably UTF-8), all is well.\n\nA.12.3 Rd cross-references\nIf your roxygen comments contain a cross-reference to a package that is not a formal, direct dependency, you might see a NOTE like this:\nCheck: Rd cross-references\nResult: NOTE\n    Undeclared package ‘jsonlite’ in Rd xrefs\nThis could happen if you want to document something related to a hard indirect dependency: There’s a legitimate reason to link to a topic in the other package and it is basically guaranteed to be installed. Therefore, in practice, often more good than harm comes from the cross-reference.\nIn our experience, this NOTE is only seen on certain CRAN check flavors and not others. Thus far, we have never been directed to address this NOTE by CRAN maintainers."
  }
]