parsermd::parse_rmd("whole-game.Rmd")
parsermd::parse_rmd("whole-game.Rmd")
parsermd::has_type("rmd_chunk")
rmd <- parsermd::parse_rmd("whole-game.Rmd")
chunks <- parsermd::rmd_select(rmd, parsermd::has_type("rmd_chunk"))
chunks
getwd()
source("common.R")
library(glue)
library(fs)
library(tidyverse)
# Whenever any chunk changes, we want to re-run _every_ chunk
rmd <- parsermd::parse_rmd("whole-game.Rmd")
chunks <- parsermd::rmd_select(rmd, parsermd::has_type("rmd_chunk"))
knitr::opts_chunk$set(
cache = TRUE,
cache.extra = digest::digest(chunks)
)
# By default, knitr saves loaded packages and reloads at the start of the
# the new session. This doesn't work for our toy package because it is
# deleted at the end of this Rmd. So we just hack knitr to not save or load
# the package info
assignInNamespace(
"cache", ns = "knitr",
modifyList(knitr:::cache, list(library = function(...) {}))
)
# do you want to see how this sausage is made?
debug <- FALSE
# do we build the toy package? if so, where?
# NA            --> no, don't build it
# "tmp_user"    --> build in ~/tmp/TOYPACKAGE, so it's easy to access after
# "tmp_session" --> build in session temp dir, it's disposable
where <- "tmp_session"
debug
where
packageVersion("devtools")
where <- match.arg(
as.character(where),
choices = c(NA, "tmp_user", "tmp_session")
)
where
create <- !is.na(where)
create
where <- switch(
where,
tmp_user = path_home("tmp"),
tmp_session = path_temp(),
NULL
)
where
path_home("tmp")
where
path_temp
path_temp()
path(where, "regexcite")
pkgpath <- path(where, "regexcite")
pkgpath
if (!is.null(where)) {
if (requireNamespace("regexcite", quietly = TRUE)) {
remove.packages("regexcite")
unloadNamespace("regexcite")
}
if (dir_exists(pkgpath)) {
dir_delete(pkgpath)
}
dir_create(where)
}
withr::with_options(
list(usethis.description = NULL),
create_package(pkgpath, open = FALSE, rstudio = TRUE)
)
library(devtools)
withr::with_options(
list(usethis.description = NULL),
create_package(pkgpath, open = FALSE, rstudio = TRUE)
)
(owd <- getwd())
local_project(pkgpath, setwd = TRUE)
getwd()
# I normally am not this masochistic, but there is little choice
knitr::opts_knit$set(root.dir = pkgpath)
# can't be in chunk above, because knitr
proj_sitrep()
source("common.R")
library(glue)
library(fs)
library(tidyverse)
# Whenever any chunk changes, we want to re-run _every_ chunk
rmd <- parsermd::parse_rmd("whole-game.Rmd")
chunks <- parsermd::rmd_select(rmd, parsermd::has_type("rmd_chunk"))
knitr::opts_chunk$set(
cache = TRUE,
cache.extra = digest::digest(chunks)
)
# By default, knitr saves loaded packages and reloads at the start of the
# the new session. This doesn't work for our toy package because it is
# deleted at the end of this Rmd. So we just hack knitr to not save or load
# the package info
assignInNamespace(
"cache", ns = "knitr",
modifyList(knitr:::cache, list(library = function(...) {}))
)
# do you want to see how this sausage is made?
debug <- FALSE
# do we build the toy package? if so, where?
# NA            --> no, don't build it
# "tmp_user"    --> build in ~/tmp/TOYPACKAGE, so it's easy to access after
# "tmp_session" --> build in session temp dir, it's disposable
where <- "tmp_session"
library(devtools)
packageVersion("devtools")
where <- match.arg(
as.character(where),
choices = c(NA, "tmp_user", "tmp_session")
)
create <- !is.na(where)
where <- switch(
where,
tmp_user = path_home("tmp"),
tmp_session = path_temp(),
NULL
)
pkgpath <- path(where, "regexcite")
if (!is.null(where)) {
if (requireNamespace("regexcite", quietly = TRUE)) {
remove.packages("regexcite")
unloadNamespace("regexcite")
}
if (dir_exists(pkgpath)) {
dir_delete(pkgpath)
}
dir_create(where)
}
withr::with_options(
list(usethis.description = NULL),
create_package(pkgpath, open = FALSE, rstudio = TRUE)
)
(owd <- getwd())
local_project(pkgpath, setwd = TRUE)
getwd()
# I normally am not this masochistic, but there is little choice
knitr::opts_knit$set(root.dir = pkgpath)
# can't be in chunk above, because knitr
proj_sitrep()
dir_info(all = TRUE) %>%
select(path, type) %>%
knitr::kable()
use_git()
suppressPackageStartupMessages(library(gert))
git_add(".")
git_commit("Initial commit")
dir_info(all = TRUE, regexp = "^[.]git$") %>%
select(path, type) %>%
knitr::kable()
git_log(max = 1) %>%
select(commit, author, message) %>%
mutate(commit = paste0(substr(commit, 1, 10), "...")) %>%
knitr::kable()
(x <- "alfa,bravo,charlie,delta")
strsplit(x, split = ",")
str(strsplit(x, split = ","))
unlist(strsplit(x, split = ","))
strsplit(x, split = ",")[[1]]
#| engine.opts = list(file = path("R", "strsplit1.R"))
strsplit1 <- function(x, split) {
strsplit(x, split = split)[[1]]
}
use_r("strsplit1")
load_all()
shhh_check(error_on = "never")
where
source("common.R")
library(glue)
library(fs)
library(tidyverse)
# Whenever any chunk changes, we want to re-run _every_ chunk
rmd <- parsermd::parse_rmd("whole-game.Rmd")
chunks <- parsermd::rmd_select(rmd, parsermd::has_type("rmd_chunk"))
knitr::opts_chunk$set(
cache = TRUE,
cache.extra = digest::digest(chunks)
)
# By default, knitr saves loaded packages and reloads at the start of the
# the new session. This doesn't work for our toy package because it is
# deleted at the end of this Rmd. So we just hack knitr to not save or load
# the package info
assignInNamespace(
"cache", ns = "knitr",
modifyList(knitr:::cache, list(library = function(...) {}))
)
# do you want to see how this sausage is made?
debug <- TRUE
# do we build the toy package? if so, where?
# NA            --> no, don't build it
# "tmp_user"    --> build in ~/tmp/TOYPACKAGE, so it's easy to access after
# "tmp_session" --> build in session temp dir, it's disposable
where <- "tmp_session"
library(devtools)
packageVersion("devtools")
where <- match.arg(
as.character(where),
choices = c(NA, "tmp_user", "tmp_session")
)
create <- !is.na(where)
where <- switch(
where,
tmp_user = path_home("tmp"),
tmp_session = path_temp(),
NULL
)
pkgpath <- path(where, "regexcite")
if (!is.null(where)) {
if (requireNamespace("regexcite", quietly = TRUE)) {
remove.packages("regexcite")
unloadNamespace("regexcite")
}
if (dir_exists(pkgpath)) {
dir_delete(pkgpath)
}
dir_create(where)
}
where
withr::with_options(
list(usethis.description = NULL),
create_package(pkgpath, open = FALSE, rstudio = TRUE)
)
(owd <- getwd())
local_project(pkgpath, setwd = TRUE)
getwd()
# I normally am not this masochistic, but there is little choice
knitr::opts_knit$set(root.dir = pkgpath)
# can't be in chunk above, because knitr
proj_sitrep()
?library
devtools::dev_sitrep()
devtools::dev_sitrep()
devtools::dev_sitrep()
devtools::update_packages("devtools")
warnings()
bookdown
require("bookdown")
remove.packages("bookdown")
bookdown::render_book
bookdown::render_book
bookdown::render_book()
bookdown::render_book(
)
bookdown::render_book("")
library(bookdown)
library(devtools)
library(devtools)
library(devtools)
packageVersion("devtools")
getwd()
quarto
tinytex::check_installed()
tinytex::tlmgr_version()
tinytex::tinytex_root()
tinytex::tlmgr_update()
tinytex::tlmgr_update()
tinytex::
install.packages(c("rmarkdown", "roxygen2", "shiny", "stringi", "testthat", "timechange", "tinytex", "tzdb", "uuid", "withr", "xfun", "zoo"))
tinytex::tinytex_root()
tinytex::tlmgr_update()
install.packages(c("bookdown", "bslib", "countrycode", "credentials", "crul", "curl", "data.table", "dbplyr", "dplyr", "DT", "echarts4r", "evaluate", "flextable", "ggplot2", "httr2", "knitr", "lmom", "markdown", "pak", "rematch", "reticulate", "rstudioapi", "servr"))
install.packages(c("bookdown", "bslib", "countrycode", "credentials", "crul", "curl", "data.table", "dbplyr", "dplyr", "DT", "echarts4r", "evaluate", "flextable", "ggplot2", "httr2", "knitr", "lmom", "markdown", "pak", "rematch", "reticulate", "rstudioapi", "servr"))
install.packages(c("bookdown", "bslib", "countrycode", "credentials", "crul", "curl", "data.table", "dbplyr", "dplyr", "DT", "echarts4r", "evaluate", "flextable", "ggplot2", "httr2", "knitr", "lmom", "markdown", "pak", "rematch", "reticulate", "rstudioapi", "servr"))
dir(full.names = TRUE, recursive = TRUE, include.dirs = TRUE, all.files = TRUE)
?usethis::create_package
.libPaths()
.Library
.Library.site
.libPaths()
Sys.getenv("R_LIBS_USER")
?.libPaths
library(tidyverse)
tmp<-data.frame()
tmp
tmp<-data.frame([1,2,3])
tmp<-data.frame(c(1,2,3)
)
tmp
tmp<-data.frame(a=c(1,2,3),b=c(2,3,4))
tmp
glimpse(tmp)
characters
df <- tibble(
col1 = c(1, 2, 3),
col2 = c("a", "b", "c"),
col3 = c(TRUE, FALSE, TRUE)
)
glimpse(df)
str(tmp)
df <- tibble(
col1 = c(1, 2, 3),
col2 = c("a", "b", "c"),
col3 = c(TRUE, FALSE, TRUE)
)
tmp<-data.frame(a=c(1,2,3),b=c(2,3,4), c=c(1, NA, 0))
tmp
glimpse(tmp)
apply(tmp, 2, as.numeric)
apply(tmp, 2, as.numeric())
apply(tmp, 2, as.numeric
apply(tmp, 2, as.numeric)
apply(tmp, 2, as.numeric)
apply(tmp, 1, as.numeric)
apply(tmp, 0, as.numeric)
apply(tmp, 2, as.numeric)
tmp<-data.frame(a=c(1,2,3),b=c(2,3,4), c=c(1, 0.1, 0))
glimpse(tmp)
tmp<-data.frame(a=c(1,NA,3),b=c(2,'3',4), c=c(1, False, 0))
tmp<-data.frame(a=c(1,NA,3),b=c(2,'3',4), c=c(1, FALSE, 0))
glimpse(tmp)
tmp<-data.frame(a=c(1,NA,3),b=c(2,'3',4), c=c(1, 'a', 0))
glimpse(tmp)
apply(tmp, 2, as.numeric)
apply(tmp, 2, as.numeric())
apply(tmp, 2, as.numeric
)
apply(tmp, 2, as.numeric)
library(installr)
R
R.Version()
updateR()
install.packages(c("BH", "bibtex", "brew", "brio", "broom", "BWStest", "cachem", "checkmate", "cli", "cluster", "collections", "commonmark", "cowplot", "cpp11", "crosstalk", "cyclocomp", "data.table", "DBI", "desc", "DescTools", "downlit", "e1071", "ellipse", "emmeans", "expm", "extraDistr", "FactoMineR", "fansi", "fontawesome", "foreign", "fs", "gargle", "gdtools", "gert", "ggrepel", "ggridges", "glue", "gmp", "googledrive", "googlesheets4", "gtable", "haven", "heatmaply", "htmlwidgets", "httpuv", "httr", "igraph", "kableExtra", "kSamples", "labeling", "languageserver", "later", "lattice", "lifecycle", "lintr", "lme4", "lubridate", "MASS", "Matrix", "MatrixModels", "matrixStats", "mgcv", "minqa", "mvtnorm", "nlme", "officedown", "officer", "openssl", "parsermd", "patchwork", "pkgbuild", "pkgsearch", "plotly", "plyr", "PMCMRplus", "prettyunits", "profvis", "progress", "promises", "psych", "purrr", "quantmod", "quantreg", "R.oo", "R.utils", "ragg", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "remotes", "reprex", "reticulate", "rlang", "Rmpfr", "rootSolve", "roxygen2", "rpart", "RPostgreSQL", "rprojroot", "rstan", "rstantools", "rticles", "rvest", "rvg", "sass", "scales", "seriation", "servr", "StanHeaders", "stringr", "styler", "survival", "svglite", "systemfonts", "textshaping", "tidyr", "TSP", "TTR", "usethis", "utf8", "viridis", "vroom", "waldo", "webshot", "xaringan", "xfun", "xml2", "xts", "yaml", "zip"))
install.packages(c("BH", "bibtex", "brew", "brio", "broom", "BWStest", "cachem", "checkmate", "cli", "cluster", "collections", "commonmark", "cowplot", "cpp11", "crosstalk", "cyclocomp", "data.table", "DBI", "desc", "DescTools", "downlit", "e1071", "ellipse", "emmeans", "expm", "extraDistr", "FactoMineR", "fansi", "fontawesome", "foreign", "fs", "gargle", "gdtools", "gert", "ggrepel", "ggridges", "glue", "gmp", "googledrive", "googlesheets4", "gtable", "haven", "heatmaply", "htmlwidgets", "httpuv", "httr", "igraph", "kableExtra", "kSamples", "labeling", "languageserver", "later", "lattice", "lifecycle", "lintr", "lme4", "lubridate", "MASS", "Matrix", "MatrixModels", "matrixStats", "mgcv", "minqa", "mvtnorm", "nlme", "officedown", "officer", "openssl", "parsermd", "patchwork", "pkgbuild", "pkgsearch", "plotly", "plyr", "PMCMRplus", "prettyunits", "profvis", "progress", "promises", "psych", "purrr", "quantmod", "quantreg", "R.oo", "R.utils", "ragg", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "remotes", "reprex", "reticulate", "rlang", "Rmpfr", "rootSolve", "roxygen2", "rpart", "RPostgreSQL", "rprojroot", "rstan", "rstantools", "rticles", "rvest", "rvg", "sass", "scales", "seriation", "servr", "StanHeaders", "stringr", "styler", "survival", "svglite", "systemfonts", "textshaping", "tidyr", "TSP", "TTR", "usethis", "utf8", "viridis", "vroom", "waldo", "webshot", "xaringan", "xfun", "xml2", "xts", "yaml", "zip"))
